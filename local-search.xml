<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/12/15/MYSQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    <url>/2022/12/15/MYSQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<hr><p>title:  MYSQL 必知必会笔记</p><p>date: 2022-12-15 19:00:00</p><p>tags: [Mysql]</p><p>excerpt: 本笔记使用的populate数据库的sql文件可在 <a href="https://forta.com/wp-content/uploads/books/0672327120/mysql_scripts.zip">https://forta.com/wp-content/uploads/books/0672327120/mysql_scripts.zip</a> 上下载得到</p><hr><p>使用小提示：可以搜索’注’来查看需要注意的地方，防止在开始工作后触碰到危险，此时，你便在使用数据库操作的数据过滤。</p><p>注：</p><ol><li><p>空字符串：’’    和    空：NULL    不同</p><pre><code class="hljs">     2. sql不区分大小写，包括表内数据</code></pre></li></ol><h1 id="常用命令行语句"><a href="#常用命令行语句" class="headerlink" title="常用命令行语句"></a>常用命令行语句</h1><p>net start/stop mysql（需要管理员打开cmd）开启或关闭mysql服务</p><p>mysql -u root -p populate 使用root登录，并使用数据库populate</p><h1 id="操作整个查询结果"><a href="#操作整个查询结果" class="headerlink" title="操作整个查询结果"></a>操作整个查询结果</h1><h2 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a>Distinct</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> vend_id <br><span class="hljs-keyword">from</span> products;<br></code></pre></td></tr></table></figure><h2 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> products <br>limit <span class="hljs-number">1</span>,<span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>从第1行开始查，查10个记录。（这种写法是mysql特有的快捷方式）</p><p>标准sql语句为 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> products <br>limit <span class="hljs-number">10</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h2 id="Order-by"><a href="#Order-by" class="headerlink" title="Order by"></a>Order by</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_price,prod_name <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_price,prod_name <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><p>注：</p><ol><li><p>order by 必须是最后出现的子句。</p></li><li><p>如若未使用ORDER BY子句，查询结果的顺序是插入数据的顺序，但这个顺序会因为增删改查导致混乱，一般认为该顺序没有任何意义。</p></li></ol><p>desc代表按降序排列，如果未指定顺序，则默认按升序排列</p><p>上面语句等同于下面语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_price,prod_name <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><p>2和3是指select时写的顺序</p><h1 id="数据过滤"><a href="#数据过滤" class="headerlink" title="数据过滤"></a>数据过滤</h1><h2 id="普通数据过滤"><a href="#普通数据过滤" class="headerlink" title="普通数据过滤"></a>普通数据过滤</h2><h3 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_name,prod_price <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">where</span> prod_price<span class="hljs-operator">=</span><span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><table><thead><tr><th>操作符</th><th>说明</th><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于</td><td>&gt;</td><td>大于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td><td>&gt;=</td><td>大于等于</td></tr><tr><td>!=</td><td>不等于</td><td>!&gt;</td><td>不大于</td></tr><tr><td>&lt;</td><td>小于</td><td>between and</td><td>在指定的两个值之间</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>is null</td><td>为null值</td></tr><tr><td>!&lt;</td><td>不小于</td><td></td><td></td></tr></tbody></table><h3 id="And"><a href="#And" class="headerlink" title="And"></a>And</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_price,prod_name <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">where</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1001</span> <span class="hljs-keyword">and</span> prod_price<span class="hljs-operator">&lt;=</span><span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h3 id="Or"><a href="#Or" class="headerlink" title="Or"></a>Or</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_price,prod_name <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">where</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1001</span> <span class="hljs-keyword">or</span> prod_id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;tnt2&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="In"><a href="#In" class="headerlink" title="In"></a>In</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_price,prod_name <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">where</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1001</span> <span class="hljs-keyword">or</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1002</span>;<br></code></pre></td></tr></table></figure><p>↑↓两种写法结果相同，但 in 子句的可读性更高，且搜索速度更快，所以更推荐使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_price,prod_name <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">where</span> vend_id <span class="hljs-keyword">in</span> (<span class="hljs-number">1001</span>,<span class="hljs-number">1002</span>);<br></code></pre></td></tr></table></figure><h3 id="Not"><a href="#Not" class="headerlink" title="Not"></a>Not</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1001</span> <span class="hljs-keyword">or</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1002</span>;<br></code></pre></td></tr></table></figure><p>not 子句会否定紧接其后的条件子句，即 vend_id=1001</p><h2 id="通配符过滤"><a href="#通配符过滤" class="headerlink" title="通配符过滤"></a>通配符过滤</h2><p>注：通配符搜索一般比其他操作都要耗时很多，所以尽量不使用。</p><h3 id><a href="#" class="headerlink" title="%"></a>%</h3><p>贪婪模式，会尽可能匹配多的字符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;J%&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title="_"></a>_</h3><p>专一模式，只匹配一个字符</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> prod_id,prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;TNT%k_&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h1><p>格式化数据。该操作一般可以在客户端完成，但在数据库服务器上完成这些操作比在客户端中完成要快得多。</p><h2 id="Concat"><a href="#Concat" class="headerlink" title="Concat"></a>Concat</h2><p>拼接字段。其他数据库并不是使用concat（）函数来完成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> CONCAT(vend_name,<span class="hljs-string">&#x27;(&#x27;</span>,vend_country,<span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">FROM</span> vendors<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name;<br></code></pre></td></tr></table></figure><h2 id="Rtrim"><a href="#Rtrim" class="headerlink" title="Rtrim"></a>Rtrim</h2><p>去除值右边所有的空格。然后这里并看不出不一样的效果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> CONCAT(vend_name,<span class="hljs-string">&#x27;(&#x27;</span>,RTRIM(vend_country),<span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">FROM</span> vendors<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name;<br></code></pre></td></tr></table></figure><h2 id="As"><a href="#As" class="headerlink" title="As"></a>As</h2><p>取别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> CONCAT(vend_name,<span class="hljs-string">&#x27;(&#x27;</span>,RTRIM(vend_country),<span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">AS</span> vend_title<br><span class="hljs-keyword">FROM</span> vendors<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name;<br></code></pre></td></tr></table></figure><h2 id="执行算术运算"><a href="#执行算术运算" class="headerlink" title="执行算术运算"></a>执行算术运算</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_id,<br> quantity,<br> item_price,<br> quantity<span class="hljs-operator">*</span>item_price <span class="hljs-keyword">as</span> expanded_price<br><span class="hljs-keyword">FROM</span> orderitems<br><span class="hljs-keyword">WHERE</span> order_num<span class="hljs-operator">=</span><span class="hljs-number">20009</span><br></code></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_name,<span class="hljs-built_in">UPPER</span>(vend_name) <span class="hljs-keyword">AS</span> vend_name_upcase<br><span class="hljs-keyword">FROM</span> vendors<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name;<br></code></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>LEFT(str,len)</td><td>返回字符串左边的字符</td></tr><tr><td>LENGTH()</td><td>返回字符串长度</td></tr><tr><td>LOWER()</td><td>将字符串转换为小写</td></tr><tr><td>LTRIM()</td><td>去掉字符串左边的空格</td></tr><tr><td>RIGHT()</td><td>返回字符串右边的空格</td></tr><tr><td>RTRIM()</td><td>去掉字符串右边的空格</td></tr><tr><td>SUBSTR(str FROM pos FOR len)</td><td>提取字符串的组成部分</td></tr><tr><td>SOUNDEX()</td><td>返回字符串的SOUNDEX值</td></tr><tr><td>UPPER()</td><td>将字符串转换为大写</td></tr></tbody></table><h2 id="日期处理函数"><a href="#日期处理函数" class="headerlink" title="日期处理函数"></a>日期处理函数</h2><h3 id="Extract"><a href="#Extract" class="headerlink" title="Extract"></a>Extract</h3><p>返回日期中的一部分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">EXTRACT</span>(<span class="hljs-keyword">month</span> <span class="hljs-keyword">FROM</span> order_date)<span class="hljs-operator">=</span><span class="hljs-number">9</span>;<br></code></pre></td></tr></table></figure><h3 id="To-days"><a href="#To-days" class="headerlink" title="To_days"></a>To_days</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">WHERE</span> TO_DAYS(order_date) <span class="hljs-keyword">BETWEEN</span> TO_DAYS(<span class="hljs-string">&#x27;2005-09-01&#x27;</span>) <span class="hljs-keyword">AND</span> TO_DAYS(<span class="hljs-string">&#x27;2005-10-01&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>ABS()</td><td>返回一个数的绝对值</td></tr><tr><td>COS()</td><td>返回一个角度的余弦</td></tr><tr><td>EXP()</td><td>返回一个数的指数值</td></tr><tr><td>PI()</td><td>返回圆周率的值</td></tr><tr><td>SIN()</td><td>返回一个角度的正弦</td></tr><tr><td>SQRT()</td><td>返回一个数的平方根</td></tr><tr><td>TAN()</td><td>返回一个角度的正切</td></tr></tbody></table><h2 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h2><h3 id="Avg"><a href="#Avg" class="headerlink" title="Avg"></a>Avg</h3><p>注：总是忽略NULL值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(prod_price) <span class="hljs-keyword">AS</span> avg_price<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1001</span>;<br></code></pre></td></tr></table></figure><h3 id="Count"><a href="#Count" class="headerlink" title="Count"></a>Count</h3><p>注：</p><p>使用COUNT(*) 时，不忽略NULL</p><p>使用COUNT(column)对特定列进行计数时，忽略NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> num_cust<br><span class="hljs-keyword">FROM</span> customers;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(cust_email) <span class="hljs-keyword">AS</span> num_cust<br><span class="hljs-keyword">FROM</span> customers;<br></code></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>AVG()</td><td>返回某列的平均值</td></tr><tr><td>COUNT()</td><td>返回某列的行数</td></tr><tr><td>MAX()</td><td>返回某列的最大值</td></tr><tr><td>MIN()</td><td>返回某列的最小值</td></tr><tr><td>SUM()</td><td>返回某列值之和</td></tr></tbody></table><p>以上五个函数均可使用 ALL 和 DISTINCT ，默认为 ALL；但要注意，count(*) 不能使用DISTINCT()</p><h1 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h1><h2 id="Group-by"><a href="#Group-by" class="headerlink" title="Group by"></a>Group by</h2><p>计算聚集时进行分组</p><p>注：</p><ol><li>GROUP BY 子句必须出现在WHERE子句之后，ORDER BY之前</li><li>不能在 GROUP BY 后使用别名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_id,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> num_prods<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> vend_id;<br></code></pre></td></tr></table></figure><h2 id="Having"><a href="#Having" class="headerlink" title="Having"></a>Having</h2><p>过滤分组</p><p>很明显，执行顺序是先 GROUP BY 进行分组，再对每一个分组进行 Having 过滤</p><p>注：WHERE 在数据分组前进行过滤，Having 在数据分组后进行过滤</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_id <span class="hljs-keyword">AS</span> id,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> num_prods<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> vend_id<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&lt;=</span> <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><h2 id="在过滤字段中使用子查询"><a href="#在过滤字段中使用子查询" class="headerlink" title="在过滤字段中使用子查询"></a>在过滤字段中使用子查询</h2><p>如果要查询下了 prod=‘FB’ 这些订单的顾客 的 cust_id。可以分为两步进行</p><p>第一步：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> order_num<br><span class="hljs-keyword">FROM</span> orderitems<br><span class="hljs-keyword">WHERE</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;FB&#x27;</span>;<br></code></pre></td></tr></table></figure><p>第一步执行完会返回 order_num 值 20005,20009</p><p>第二步：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_id <br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">WHERE</span> order_num <span class="hljs-keyword">IN</span> (<span class="hljs-number">20005</span>,<span class="hljs-number">20009</span>);<br></code></pre></td></tr></table></figure><p>然后我们把这两步嵌套起来，就是所谓的子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_id <br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">WHERE</span> order_num <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> order_num<br>   <span class="hljs-keyword">FROM</span> orderitems<br>   <span class="hljs-keyword">WHERE</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;FB&#x27;</span>);<br></code></pre></td></tr></table></figure><p>如果还要进一步查找这些顾客的信息，就可以再嵌套一层</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name,cust_contact<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_id <span class="hljs-keyword">IN</span>(<span class="hljs-keyword">SELECT</span> cust_id <br>                 <span class="hljs-keyword">FROM</span> orders<br>                 <span class="hljs-keyword">WHERE</span> order_num <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> order_num<br>                                     <span class="hljs-keyword">FROM</span> orderitems<br>                                     <span class="hljs-keyword">WHERE</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;FB&#x27;</span>));<br></code></pre></td></tr></table></figure><p>注：子查询子句结果只能有单个列，否则将会报错。</p><h2 id="在计算字段中使用子查询"><a href="#在计算字段中使用子查询" class="headerlink" title="在计算字段中使用子查询"></a>在计算字段中使用子查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> orders<br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">WHERE</span> cust_id<span class="hljs-operator">=</span><span class="hljs-number">10001</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name,cust_state,(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br>                             <span class="hljs-keyword">FROM</span> orders<br>                             <span class="hljs-keyword">WHERE</span> orders.cust_id<span class="hljs-operator">=</span>customers.cust_id) <span class="hljs-keyword">AS</span> orders<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> cust_name;<br></code></pre></td></tr></table></figure><h1 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h1><h2 id="等值联结"><a href="#等值联结" class="headerlink" title="等值联结"></a>等值联结</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_name,prod_name,prod_price<br><span class="hljs-keyword">FROM</span> vendors,products<br><span class="hljs-keyword">WHERE</span> vendors.vend_id<span class="hljs-operator">=</span>products.vend_id;<br></code></pre></td></tr></table></figure><p>过程是这样的，数据库会固定vendors第一行，然后从头扫描products每一行，看看有没有 vendors.vend_id=products.vend_id 的，然后固定 vendors 第二行，继续从头扫描products…</p><p>也就是说，如果没又 WHERE  子句，返回的将会是全连接图，也就是笛卡尔积。</p><h2 id="内联结"><a href="#内联结" class="headerlink" title="内联结"></a>内联结</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_name,prod_name,prod_price<br><span class="hljs-keyword">FROM</span> vendors<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> products<br><span class="hljs-keyword">ON</span> vendors.vend_id<span class="hljs-operator">=</span>products.vend_id;<br></code></pre></td></tr></table></figure><p>结果和上面的等值联结相同。</p><h2 id="多表联结"><a href="#多表联结" class="headerlink" title="多表联结"></a>多表联结</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> cust_name,cust_contact<br><span class="hljs-keyword">FROM</span> customers,orders,orderItems<br><span class="hljs-keyword">WHERE</span> customers.cust_id<span class="hljs-operator">=</span>orders.cust_id<br><span class="hljs-keyword">AND</span> orderItems.order_num<span class="hljs-operator">=</span>orders.order_num<br><span class="hljs-keyword">AND</span> prod_id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;FB&#x27;</span>;<br></code></pre></td></tr></table></figure><p>该查询结果和下面的子查询结果相同。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name,cust_contact<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_id <span class="hljs-keyword">IN</span>(<span class="hljs-keyword">SELECT</span> cust_id <br>                 <span class="hljs-keyword">FROM</span> orders<br>                 <span class="hljs-keyword">WHERE</span> order_num <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> order_num<br>                                     <span class="hljs-keyword">FROM</span> orderitems<br>                                     <span class="hljs-keyword">WHERE</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;FB&#x27;</span>));<br></code></pre></td></tr></table></figure><h1 id="高级联结"><a href="#高级联结" class="headerlink" title="高级联结"></a>高级联结</h1><h2 id="表别名"><a href="#表别名" class="headerlink" title="表别名"></a>表别名</h2><p>使用表别名主要的优点是：运行在一条 SELECT 语句中多次使用相同的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> cust_name,cust_contact<br><span class="hljs-keyword">FROM</span> customers <span class="hljs-keyword">AS</span> C,orders <span class="hljs-keyword">AS</span> O,orderItems <span class="hljs-keyword">AS</span> OI<br><span class="hljs-keyword">WHERE</span> C.cust_id<span class="hljs-operator">=</span>O.cust_id<br><span class="hljs-keyword">AND</span> OI.order_num<span class="hljs-operator">=</span>O.order_num<br><span class="hljs-keyword">AND</span> prod_id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;FB&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a>自联结</h2><p>先插入一行数据，以便于后面演示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> customers<br><span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">10006</span>,<span class="hljs-string">&#x27;Wascals&#x27;</span>,<span class="hljs-string">&#x27;829 Riverside Drive&#x27;</span>,<span class="hljs-string">&#x27;Phoenix&#x27;</span>,<span class="hljs-string">&#x27;AZ&#x27;</span>,<span class="hljs-number">88889</span>,<span class="hljs-string">&#x27;USA&#x27;</span>,<span class="hljs-string">&#x27;Y Sam&#x27;</span>,<span class="hljs-string">&#x27;sam@yosemite.com&#x27;</span>);<br></code></pre></td></tr></table></figure><p>题目是：假如要给与Jim Jones同一公司的所有顾客发送一封信件。这个查询要求首先找出Jim Jones工作的公司，然后找出在该公司工作的顾客。下面是解决此问题的一种方法。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> c1.cust_id,c1.cust_name,c1.cust_contact<br><span class="hljs-keyword">FROM</span> customers <span class="hljs-keyword">as</span> c1,customers <span class="hljs-keyword">as</span> c2<br><span class="hljs-keyword">WHERE</span> c1.cust_name<span class="hljs-operator">=</span>c2.cust_name<br><span class="hljs-keyword">AND</span> c2.cust_contact<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Jim Jones&#x27;</span>;<br></code></pre></td></tr></table></figure><p>使用 c1 和 c2 作为 customers 的别名，就可以在同一 SELECT 中使用多次 customers </p><h2 id="外联结"><a href="#外联结" class="headerlink" title="外联结"></a>外联结</h2><p>外联结包含了那些在相关表中没有关联行的行。</p><p>如列出所有产品以及订购数量，包含没有人订购的产品。</p><p>我们先给出一个内联结</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> customers.cust_id,orders.order_num<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> orders <span class="hljs-keyword">ON</span> customers.cust_id<span class="hljs-operator">=</span>orders.cust_id;<br></code></pre></td></tr></table></figure><p>然后再给出一个左外联结</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> customers.cust_id,orders.order_num<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> orders <span class="hljs-keyword">ON</span> customers.cust_id<span class="hljs-operator">=</span>orders.cust_id;<br></code></pre></td></tr></table></figure><p>比较他们的查询结果可以发现，内联结没有null项，而外联结有。</p><p>而 LEFT 和 RIGHT 是用来指定包含所有行的表。</p><p>上面外查询语句由于使用了 LEFT ，所有出现的 null 项都是 OUTER JOIN 左边的表，也就是 customers 表的。</p><p>从结果来看，cust_id 为 10002 出现了 null 项，证明 customers 表中有cust_id 为 10002 的项，而 orders 表中没有。</p><h1 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h1><h2 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h2><p>UNION 操作符可以将多条 SELECT 语句组合成一个结果集</p><p>注：</p><ol><li>UNION 左右两边查询结果列数应该相同</li><li>UNION 默认去除重复行，可以使用 UNION ALL 来取消去重效果，这是 WHERE 子句不能够完成的。</li><li>只能使用一条 ORDER BY 子句</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name,cust_contact,cust_email<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_state <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;IL&#x27;</span>,<span class="hljs-string">&#x27;IN&#x27;</span>,<span class="hljs-string">&#x27;MI&#x27;</span>)<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> cust_name,cust_contact,cust_email<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Wascals&#x27;</span>;<br></code></pre></td></tr></table></figure><p>以上查询语句相当于↓</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name,cust_contact,cust_email<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_state <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;IL&#x27;</span>,<span class="hljs-string">&#x27;IN&#x27;</span>,<span class="hljs-string">&#x27;MI&#x27;</span>) <span class="hljs-keyword">OR</span> cust_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Wascals&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><h2 id="普通数据插入"><a href="#普通数据插入" class="headerlink" title="普通数据插入"></a>普通数据插入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> customers<br><span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">10007</span>,<span class="hljs-string">&#x27;Wascals&#x27;</span>,<span class="hljs-string">&#x27;829 Riverside Drive&#x27;</span>,<span class="hljs-string">&#x27;Phoenix&#x27;</span>,<span class="hljs-string">&#x27;AZ&#x27;</span>,<span class="hljs-number">88889</span>,<span class="hljs-string">&#x27;USA&#x27;</span>,<span class="hljs-string">&#x27;Y Sam&#x27;</span>,<span class="hljs-string">&#x27;sam@yosemite.com&#x27;</span>),<br>(<span class="hljs-number">10008</span>,<span class="hljs-string">&#x27;Wascals&#x27;</span>,<span class="hljs-string">&#x27;829 Riverside Drive&#x27;</span>,<span class="hljs-string">&#x27;Phoenix&#x27;</span>,<span class="hljs-string">&#x27;AZ&#x27;</span>,<span class="hljs-number">88889</span>,<span class="hljs-string">&#x27;USA&#x27;</span>,<span class="hljs-string">&#x27;Y Sam&#x27;</span>,<span class="hljs-string">&#x27;sam@yosemite.com&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> customers(列名<span class="hljs-number">1</span>,列名<span class="hljs-number">2</span>,...)#此处列名可以省略不写，但给出列名的话，可以用不同的列的顺序给出记录，也可以省略某些列<br><span class="hljs-keyword">VALUES</span><br>(列<span class="hljs-number">1</span>,列<span class="hljs-number">2</span>,...),#用逗号隔开多条记录<br>(列<span class="hljs-number">1</span>,列<span class="hljs-number">2</span>,...<br></code></pre></td></tr></table></figure><p>注：省略的列要求允许NULL值或者有默认值。</p><h2 id="插入检索出的数据"><a href="#插入检索出的数据" class="headerlink" title="插入检索出的数据"></a>插入检索出的数据</h2><p>注:  INSERT 和 SELECT 子句中的列位置要相同，因为 DBMS 是使用列的位置作为填充依据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> customers (cust_id,<br>                        cust_name,<br>                        cust_address,<br>                        cust_city,<br>                        cust_state,<br>                        cust_zip,<br>                        cust_country,<br>                        cust_contact,<br>                        cust_email)<br><span class="hljs-keyword">SELECT</span> cust_id,<br>        cust_name,<br>        cust_address,<br>        cust_city,<br>        cust_state,<br>        cust_zip,<br>        cust_country,<br>        cust_contact,<br>        cust_email<br><span class="hljs-keyword">FROM</span> custnew;<br></code></pre></td></tr></table></figure><p>由于列名很多，最好先执行下面语句获取表头</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> columns <span class="hljs-keyword">from</span> customers;<br></code></pre></td></tr></table></figure><h2 id="从一个表复制到另外一个表"><a href="#从一个表复制到另外一个表" class="headerlink" title="从一个表复制到另外一个表"></a>从一个表复制到另外一个表</h2><p>下列语句在不同数据库中可能写法不同</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> custcopy <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> customers;<br></code></pre></td></tr></table></figure><h1 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h1><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> customers<br><span class="hljs-keyword">SET</span> cust_email<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10086@qq.com&#x27;</span>,<br>cust_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Michel&#x27;</span><br><span class="hljs-keyword">WHERE</span> cust_id<span class="hljs-operator">=</span><span class="hljs-number">10006</span>;<br></code></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_id<span class="hljs-operator">=</span><span class="hljs-number">10006</span>;<br></code></pre></td></tr></table></figure><h1 id="创建和操纵表"><a href="#创建和操纵表" class="headerlink" title="创建和操纵表"></a>创建和操纵表</h1><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> products<br>(<br>  prod_id    <span class="hljs-type">char</span>(<span class="hljs-number">10</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  vend_id    <span class="hljs-type">int</span>           <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>  prod_name  <span class="hljs-type">char</span>(<span class="hljs-number">255</span>)     <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>  prod_price <span class="hljs-type">decimal</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>  prod_desc  text          <span class="hljs-keyword">NULL</span> ,<br>  <span class="hljs-keyword">PRIMARY</span> KEY(prod_id)<br>);<br></code></pre></td></tr></table></figure><p>创建表还有很多可选项，如果默认值，默认日期。对了，最常用的莫过于你可以让性别为一个枚举型，只能在男女中选一个。</p><h2 id="更新表"><a href="#更新表" class="headerlink" title="更新表"></a>更新表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> vendors<br><span class="hljs-keyword">ADD</span> vend_phone <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> custcopy;<br></code></pre></td></tr></table></figure><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>视图是虚拟的表，存储的是查询结果。</p><p>它可以用来简化复杂数据的处理，例如你经常需要使用某一个格式化后的结果，也就是使用例如了CONCAT() 函数后的结果，那么最好就是创建一个视图，使用它即可。</p><h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> ProductCustomers <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> cust_name,cust_contact,prod_id<br><span class="hljs-keyword">FROM</span> customers,orders,orderitems<br><span class="hljs-keyword">WHERE</span> customers.cust_id<span class="hljs-operator">=</span>orders.cust_id<br><span class="hljs-keyword">AND</span> orderitems.order_num<span class="hljs-operator">=</span>orders.order_num;<br></code></pre></td></tr></table></figure><h2 id="使用视图进行查询"><a href="#使用视图进行查询" class="headerlink" title="使用视图进行查询"></a>使用视图进行查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name,cust_contact<br><span class="hljs-keyword">FROM</span> productcustomers<br><span class="hljs-keyword">WHERE</span> prod_id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;FB&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Servlet 学习笔记</title>
    <link href="/2022/11/10/Servlet/"/>
    <url>/2022/11/10/Servlet/</url>
    
    <content type="html"><![CDATA[<h1 id="Servlet-学习笔记"><a href="#Servlet-学习笔记" class="headerlink" title="Servlet 学习笔记"></a>Servlet 学习笔记</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>servlet 是 java 的一个小程序，用于处理请求和转发信息。</p><h2 id="手动实现-servlet-程序"><a href="#手动实现-servlet-程序" class="headerlink" title="手动实现 servlet 程序"></a>手动实现 servlet 程序</h2><ol><li><p>编写一个类去实现 servlet 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span><br></code></pre></td></tr></table></figure></li><li><p>实现 service 方法，处理请求，并响应数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * service方法用于处理请求和响应，也就是说只要访问了hello，他就会自动调用service方法</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> servletRequest</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> servletResponse</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException<br>   &#123;<br>       System.out.println(<span class="hljs-string">&quot;Hello,这里是service!&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>到 web.xml中去配置 servlet 程序的访问地址</p><p>工程路径：右上角 运行/调试配置→Tomcat服务器→部署 往下拉→应用程序上下文</p><p>资源路径：/hello</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- servlet标签给Tomcat配置Servlet程序 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--servlet-name标签 Servlet程序起一个别名（一般是类名） --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--servlet-class是Servlet程序的全类名--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.yutou.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>   <br>   <span class="hljs-comment">&lt;!--servlet-mapping标签给servlet程序配置访问地址--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--servlet-name标签的作用是告诉服务器，我当前配置的地址给哪个Servlet程序使用--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">           url-pattern标签配置访问地址                                     &lt;br/&gt;</span><br><span class="hljs-comment">              / 斜杠在服务器解析的时候，表示地址为：http://ip:port/工程路径          &lt;br/&gt;</span><br><span class="hljs-comment">              /hello 表示地址为：http://ip:port/工程路径/hello              &lt;br/&gt;</span><br><span class="hljs-comment">       --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="Servlet-生命周期"><a href="#Servlet-生命周期" class="headerlink" title="Servlet 生命周期"></a>Servlet 生命周期</h2><p>第一次访问 Servlet 的时候会创建该 Servlet实现类</p><ol><li>执行 Servlet 构造器方法（创建 Servlet 实现类会调用）</li><li>执行 init 初始化方法（创建完 Servlet 实现类会调用）</li><li>执行 service 方法 （每次访问都会调用）</li><li>执行 destroy 销毁方法（在 web 工程停止的时候调用）</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>存储器扩展</title>
    <link href="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/"/>
    <url>/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h2 id="存储元和存储单元"><a href="#存储元和存储单元" class="headerlink" title="存储元和存储单元"></a>存储元和存储单元</h2><p>在讲位扩展和字扩展之前，我们先来说一下存储元和存储单元。</p><h3 id="存储元"><a href="#存储元" class="headerlink" title="存储元"></a>存储元</h3><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502161450795.png" alt="image-20220502161450795"></p><p>百度百科里介绍到，任何具有两个稳定状态的物理器件都可以用来做存储元。也就是说，既然存储元只有两种状态，我们就可以把它相当于一位二进制数（只有0或1两种状态）。如下图，我们用一个小箱子来表示一个存储单元，它可以输出0或1。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502163628268.png" alt="image-20220502163628268"></p><h3 id="存储单元"><a href="#存储单元" class="headerlink" title="存储单元"></a>存储单元</h3><p>我们买来了四个存储元，将它们输出到一个4位的寄存器上。我们称这样一组输出到同一寄存器上（也就是连接到同一寄存器上）的存储元为一个==存储单元==。而一个存储单元有多少个存储元，我们就说==字长==是多少位。而存储单元输出的一个数据（本例中为一个4位的数据1011），我们称之为==存储字==。而将存储元连接到寄存器MDR上的蓝线我们称之为==数据线==，一个存储单元有多少个存储元就有多少根数据线。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502170228183.png" alt="image-20220502170228183"></p><p>位扩展和字扩展里面的位和字就是这么一回事，要理解好了位和字才能学好后面的位扩展和位扩展。</p><h3 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h3><p>为了存储4个4位的数据，我们买来了4个4位存储单元，或者说买来了16个存储元，然后把它们都输出到MDR上，如下图。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502170244930.png" alt="image-20220502170244930"></p><p>然后我们会发现一个问题，就是MDR寄存器它不知道要听一个存储单元（或者说哪一组存储元）的，第一个存储单元想要输出1011，第二个存储单元想要输出1010，那这种情况要怎么办？答案其实也很简单，只能存4位数据（实际上MDR可以存8位数据，这里为了方便我就用4位来举例）的MDR不可能同时接收多个4位数据。所以我们只能选择接收其中一个存储单元的数据。如下图，我们增加了红色的线来选择要将哪个存储单元的数据输出到MDR上，只有当红色线提供的数据为1时，对应的存储单元数据才会被输出，所以这4根红色线中只能同时有一根线为1。图中只有第一根红线为1，所以只有第一个存储单元的数据会被输出到MDR上。</p><p>然后我们又买来了一个译码器，用来把1或0送到红色线上。输入译码器的紫色线我们称之为==地址线==。如果紫色线为00，就是只有从上往下数第4根红色线为1；如果紫色线为01，第3根红色线为1；如果紫色线是10，则只有第2根红色线为1；如果紫色线是11，则只有第1根红色线为1。我们可以知道，一个地址（图中2根地址线组成的数字00,01那些）就对应一根红色线为1。一个地址是每一位都只能为0或1，所以有2根地址线就有2×2共4种状态，有3根地址线就有2×2×2共8种状态。也就是说，有多少根地址线，输出的地址就有2的多少次方种状态，就可以对应多少个存储单元。</p><p>总容量=存储单元个数（2^地址线根数） * 存储字长（数据线根数）</p><p>如下面要讲的1K×8bit的存储器，就是2的10次方个存储单元，10根地址线，存储字长为8bit，数据线有8根。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502171857968.png" alt="image-20220502171857968"></p><h2 id="位扩展和字扩展"><a href="#位扩展和字扩展" class="headerlink" title="位扩展和字扩展"></a>位扩展和字扩展</h2><p>进入本文正题，位扩展和字扩展。</p><h3 id="位扩展（增加存储字长）"><a href="#位扩展（增加存储字长）" class="headerlink" title="位扩展（增加存储字长）"></a>位扩展（增加存储字长）</h3><p>问题：用（2）片 1K×4位 存储芯片组成 1K×8位的存储器（10根地址线，8根数据线）</p><p>由于增加的是存储字长，也是就是说增加一个字的位数。我们可以这样设计：拿一片1K×4位 存储芯片作为高4位，再拿一片1K×4位 存储芯片作为低4位，这样我们的存储字长就从4位增加到了8位。</p><p>D7~D0为8根数据线，对应8位数据。我们先将两个1K×4位的存储芯片分别接到数据线的高四位和低四位。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502175558181.png" alt="image-20220502175558181"></p><p>然后我们将两个1K×4位的存储芯片接到同样的地址线上面，表示他们同时工作。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502180336275-16516428803801.png" alt="image-20220502180336275"></p><p>然后我们再将两个1K×4位的存储芯片接到同样的片选线CS和读写控制线WE上，同样表示他们同时进行工作。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502181545575.png" alt="image-20220502181545575"></p><h3 id="字扩展-增加存储字的数量"><a href="#字扩展-增加存储字的数量" class="headerlink" title="字扩展(增加存储字的数量)"></a>字扩展(增加存储字的数量)</h3><p>问题：用（2）片 1K×8位存储芯片组成2K×8位的存储器。（11根地址线，8根数据线）</p><p>由于增加的是存储字的数量，也是就是说增加存储单元的数量。我们可以这样设计：1片1K×8位存储芯片有2^10个存储单元，一个2K×8位的存储器的2^11个存储单元，所以我们直接拿两片1K×8位存储芯片就可以达到目的，功德圆满。</p><p> 我们先把两片1K×8位存储芯片接到同样的地址线上，但由于这两片芯片不能同时工作（一个地址怎么能对应多户人家（数据）呢），我们得再增加一位地址，来表示是使用了哪一片1K×8位的存储芯片，这也是片选线的意义所在（如下下图所示）。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502182512174.png" alt="image-20220502182512174"></p><p>如下图，我们增加了一位地址A10，并将两片1K×8位存储芯片的片选线接到上面，然后增加了一个取反器。这样一来第一个1K×8位存储芯片的地址为0xxxxxxxxxx，而第二个1K×8位存储芯片的地址为1xxxxxxxxxx。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502183403715.png" alt="image-20220502183403715"></p><p>然后将数据线和读写控制线都给接上</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502184054987.png" alt="image-20220502184054987"></p><h3 id="字位同时扩展"><a href="#字位同时扩展" class="headerlink" title="字位同时扩展"></a>字位同时扩展</h3><p>问题：用（8）片 1K×4位的存储芯片组成4K×8位的存储器。（12根地址线，8根数据线）</p><p>我们先进行位扩展，也就是用2片1K×4位的存储芯片将位数扩展到8位。然后进行字扩展，我们可以把前面2片1K×4位的存储芯片看为1组1K×8位的存储芯片，然后我们需要4组1K×8位的存储芯片才能扩展为4K×8位的存储器，也就是4×2片1K×4位的存储芯片。</p><p>我们先将每两片1K×4位的存储芯片作为1组接到数据线上，一共4组。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502185536432.png" alt="image-20220502185536432"></p><p>再将这四组存储芯片接到同样的地址线上，但由于这四组存储芯片不能同时工作，我们需要增加地址，来表示选择哪一组存储芯片（下下图）。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502190534482.png" alt="image-20220502190534482"></p><p>我们为这四组存储芯片都加了片选线（如下图），同一组芯片是同时工作的，所以他们需要接收到同样的片选信号。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502191047467.png" alt="image-20220502191047467"></p><p>再将读写控制线接上，功德圆满。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502191404221.png" alt="image-20220502191404221"></p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
