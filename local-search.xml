<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>4.Bean管理之注解</title>
    <link href="/2022/12/16/Spring/4.Bean%E7%AE%A1%E7%90%86%E4%B9%8B%E6%B3%A8%E8%A7%A3/"/>
    <url>/2022/12/16/Spring/4.Bean%E7%AE%A1%E7%90%86%E4%B9%8B%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">使用注解的目的是简化xml配置，本文会介绍怎么用注解创建对象并进行属性注入。<br></code></pre></td></tr></table></figure><h1 id="四种注解"><a href="#四种注解" class="headerlink" title="四种注解"></a>四种注解</h1><p>(1)@Component 万能注解<br>(2)@Service 业务层<br>(3)@Controller 控制层<br>(4) @Repository 持久层</p><p>*上面四个注解功能是一样的，都可以用来创建 bean 实例。但通常被放在不同的层中，这是一种约定。</p><h1 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>相比于xml方式，还需要导入 spring-aop-5.3.24.jar</p><p><img src="/2022/12/16/Spring/4.Bean%E7%AE%A1%E7%90%86%E4%B9%8B%E6%B3%A8%E8%A7%A3/image-20221216205313514.png" alt="image-20221216205313514"></p><h2 id="名称空间引入"><a href="#名称空间引入" class="headerlink" title="名称空间引入"></a>名称空间引入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;<br></code></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">xsi:</span>schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span><br></code></pre></td></tr></table></figure><p>组合起来就是这样:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="开启组件扫描"><a href="#开启组件扫描" class="headerlink" title="开启组件扫描"></a>开启组件扫描</h2><p>写在bean根标签内，两种写法都可以，用逗号隔开或者直接用共同的上层目录都可以</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-comment">&lt;!--开启组件扫描--&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;context:component-scan base-package=&quot;com.C4n.spring5.dao,com.C4n.spring5.service&quot;&gt;&lt;/context:component-scan&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.C4n.spring5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="创建类并添加注解"><a href="#创建类并添加注解" class="headerlink" title="创建类并添加注解"></a>创建类并添加注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注解中的value值不写的话，默认就是类名称，但首字母变为小写</span><br><span class="hljs-meta">@Component(value = &quot;userService&quot;)</span> <span class="hljs-comment">//&lt;bean id=userService&gt;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;adding...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testService</span><span class="hljs-params">()</span><br>&#123;<br>    ApplicationContext context= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    UserService userService=context.getBean(<span class="hljs-string">&quot;userService&quot;</span>,UserService.class);<br>    userService.add();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="组件扫描的精细化"><a href="#组件扫描的精细化" class="headerlink" title="组件扫描的精细化"></a>组件扫描的精细化</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  </span><br><span class="hljs-comment">    use-default-filters=&quot;false&quot; 表示不使用默认filter，自己配置filter</span><br><span class="hljs-comment">    context:include-filter 设置只扫描哪些内容，下面配置代表只扫描Controller注解</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.C4n.spring5&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面是使用include-filter的例子，你也可以使用exclude-filter，这样你连use-default-filters=”false”都不用写，他会先扫描全部内容，然后再剔除掉你在exclude-filter中指定的内容。</p><h1 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h1><ol><li>@Autowired: 根据属性类型进行自动装配</li><li>@Qualifier: 根据属性名称进行注入</li><li>@Resource: 可以根据类型注入，也可以根据名称注入</li><li>@Value: 注入普通类型属性</li></ol><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>第一步：把service和dao对象创建，即在service和dao添加创建对象注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span><br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">adding</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;dao adding...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;adding...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二步：在service中注入dao对象，即在service中定义dao类变量，并在其上面使用注入注解。这里根据类型UserDao进行注入，由于UserDaoImpl的父类是UserDao，所以也会被注入。注意这里不需要用get方法和set方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;adding...&quot;</span>);<br>        userDao.adding();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testService</span><span class="hljs-params">()</span><br>&#123;<br>    ApplicationContext context= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    UserService userService=context.getBean(<span class="hljs-string">&quot;userService&quot;</span>,UserService.class);<br>    userService.add();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h2><p>该注解必须和@Autowired一起使用。</p><p>可以解决的问题：一个UserDao接口可能有多个实现类，那么根据类型自动注入的话，它就不知道要注入哪个，这就是@Qualifier要解决的问题。</p><p>第一步：它需要根据名称进行注入，所以在这里添加一个value属性指定名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository(value = &quot;UserDaoImpl1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span><br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">adding</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;dao adding...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二步：在@Autowired下面添加@Qualifier注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(value = &quot;UserDaoImpl1&quot;)</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;adding...&quot;</span>);<br>        userDao.adding();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h2><p>注：@Resource注解不是spring的内容，而是Java扩展包里的内容。Java11移除了@Resource注解。</p><p>这样是根据类型注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span><br>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;adding...&quot;</span>);<br>        userDao.adding();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样是根据名称注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span><br>&#123;<br>    <span class="hljs-meta">@Resource(name = &quot;UserDaoImpl1&quot;)</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;adding...&quot;</span>);<br>        userDao.adding();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(value=&quot;abc&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br></code></pre></td></tr></table></figure><h1 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h1><p>也就是完全不使用xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.C4n.spring5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p>↑以上xml语句相当于↓</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">// 作为配置类，替代xml文件</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.C4n.spring5&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span><br>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写测试文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testService</span><span class="hljs-params">()</span><br>&#123;<br>    ApplicationContext context= <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>    UserService userService=context.getBean(<span class="hljs-string">&quot;userService&quot;</span>,UserService.class);<br>    userService.add();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.Bean管理之XML</title>
    <link href="/2022/12/16/Spring/3.Bean%E7%AE%A1%E7%90%86%E4%B9%8BXML/"/>
    <url>/2022/12/16/Spring/3.Bean%E7%AE%A1%E7%90%86%E4%B9%8BXML/</url>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Bean管理有两个操作，一个是创建对象（无参构造），另一个是注入属性（有参构造方法和Set方法）。而实现这两个操作都有两种方式，一个是基于xml配置文件实现，另一个是基于注解方式实现。<br></code></pre></td></tr></table></figure><h1 id="xml-方式"><a href="#xml-方式" class="headerlink" title="xml 方式"></a>xml 方式</h1><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>加载配置文件时就会调用无参构造方式创建对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置User对象创建--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>id 属性：唯一标识</p><p>class属性：类全路径</p><p>name属性：和id作用一样，但是可以加特殊符号 (很少用name属性)</p><h2 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h2><h3 id="set方法注入属性"><a href="#set方法注入属性" class="headerlink" title="set方法注入属性"></a>set方法注入属性</h3><p>新建类Book，一定要实现 set 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span><br>&#123;<br>    <span class="hljs-keyword">private</span> String bname;<br>    <span class="hljs-keyword">private</span> String bauthor;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBname</span><span class="hljs-params">(String bname)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.bname = bname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBauthor</span><span class="hljs-params">(String bauthor)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.bauthor = bauthor;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Book&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;bname=&#x27;&quot;</span> + bname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, bauthor=&#x27;&quot;</span> + bauthor + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--set方法注入属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.Book&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--使用property完成属性注入</span><br><span class="hljs-comment">        name：类里面属性名称</span><br><span class="hljs-comment">        value：向属性注入的值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;易筋经&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bauthor&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;达摩老祖&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBook</span><span class="hljs-params">()</span><br>    &#123;<br><span class="hljs-comment">//        1.加载配置文件</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br><span class="hljs-comment">//        2.获取配置创建的对象</span><br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;book&quot;</span>, Book.class);<br>        <br>        System.out.println(book);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="有参构造方法注入"><a href="#有参构造方法注入" class="headerlink" title="有参构造方法注入"></a>有参构造方法注入</h3><p>新建类Orders，一定要实现有参构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span><br>&#123;<br>    <span class="hljs-keyword">private</span> String bname;<br>    <span class="hljs-keyword">private</span> String bauthor;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBname</span><span class="hljs-params">(String bname)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.bname = bname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBauthor</span><span class="hljs-params">(String bauthor)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.bauthor = bauthor;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Book&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;bname=&#x27;&quot;</span> + bname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, bauthor=&#x27;&quot;</span> + bauthor + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写配置文件，如果有参构造函数有多个参数，可以使用 index 属性进行注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--有参构造注入属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.Orders&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;电脑&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;China&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOrders</span><span class="hljs-params">()</span><br>    &#123;<br><span class="hljs-comment">//        1.加载配置文件</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br><span class="hljs-comment">//        2.获取配置创建的对象</span><br>        Orders orders= context.getBean(<span class="hljs-string">&quot;orders&quot;</span>,Orders.class);<br><br>        System.out.println(orders);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="注入外部Bean"><a href="#注入外部Bean" class="headerlink" title="注入外部Bean"></a>注入外部Bean</h3><p>也就是通过 ref 属性引用外部的bean对象</p><p>新建类UserDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5.dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span><br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;update...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>新建类UserService，一定要实现set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5.service;<br><br><span class="hljs-keyword">import</span> com.C4n.spring5.dao.UserDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span><br>&#123;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;adding...&quot;</span>);<br>        userDao.update();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--service和dao对象创建--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.service.UserService&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--注入userDao对象</span><br><span class="hljs-comment">           name属性：UserService类里面的变量名</span><br><span class="hljs-comment">           ref属性：创建userDao对象时bean标签里的id值</span><br><span class="hljs-comment">       --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.dao.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写测试文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd</span><span class="hljs-params">()</span><br>&#123;<br>    ApplicationContext context= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    UserService userService=context.getBean(<span class="hljs-string">&quot;userService&quot;</span>,UserService.class);<br>    userService.add();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="级联赋值"><a href="#级联赋值" class="headerlink" title="级联赋值"></a>级联赋值</h3><p>第一种方法是在外部bean里面用set方法注入，再使用ref引入就是级联赋值</p><p>也就是把配置文件改成大概这样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--service和dao对象创建--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.service.UserService&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--注入userDao对象</span><br><span class="hljs-comment">           name属性：UserService类里面的变量名</span><br><span class="hljs-comment">           ref属性：创建userDao对象时bean标签里的id值</span><br><span class="hljs-comment">       --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.dao.UserDaoImpl&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;巴拉巴拉&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;啦啦啦&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二种方法</p> <img src="/2022/12/16/Spring/3.Bean%E7%AE%A1%E7%90%86%E4%B9%8BXML/image-20221216123421237.png" alt="image-20221216123421237" style="zoom:50%;"><p>这种方法需要在Dept类中实现get方法，因为他需要反射get获取dname，然后再用反射set进行赋值。</p><h3 id="注入集合类型属性"><a href="#注入集合类型属性" class="headerlink" title="注入集合类型属性"></a>注入集合类型属性</h3><p>新建类Stu，自行生成set方法和tostring方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5.collectiontype;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Stu</span><br>&#123;<br>    <span class="hljs-keyword">private</span> String[] course;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list;<br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; map;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCourse</span><span class="hljs-params">(String[] course)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.course = course;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setList</span><span class="hljs-params">(List&lt;String&gt; list)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMap</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.map = map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--集合类型属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.collectiontype.Stu&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--数组类型注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;course&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>语文<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>数学<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--list类型注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>小三<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--map类型注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;JAVA&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;PHP&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="工厂Bean"><a href="#工厂Bean" class="headerlink" title="工厂Bean"></a>工厂Bean</h2><p>普通Bean是定义什么类型就返回什么，而工厂Bean则不是。</p><h3 id="创建当实例对象"><a href="#创建当实例对象" class="headerlink" title="创建当实例对象"></a>创建当实例对象</h3><p>首先，创建MyBean类，实现FactoryBean接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5.factorybean;<br><br><span class="hljs-keyword">import</span> com.C4n.spring5.Book;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.FactoryBean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;Book&gt;<br>&#123;<br><span class="hljs-comment">//    定义返回Bean</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>        book.setBname(<span class="hljs-string">&quot;易筋经&quot;</span>);<br>        book.setBauthor(<span class="hljs-string">&quot;达摩老祖&quot;</span>);<br>        <span class="hljs-keyword">return</span> book;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType()<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> FactoryBean.<span class="hljs-built_in">super</span>.isSingleton();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写xml。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.factorybean.MyBean&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写测试代码，注意返回类型。默认是单实例对象，也就是每次加载配置文件时都是获取同一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>    ApplicationContext context= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    Book book=context.getBean(<span class="hljs-string">&quot;myBean&quot;</span>,Book.class);<br>    System.out.println(book);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建多实例对象"><a href="#创建多实例对象" class="headerlink" title="创建多实例对象"></a>创建多实例对象</h3><p>在xml文件中增加属性scope</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.factorybean.MyBean&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>    ApplicationContext context= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    Book book1=context.getBean(<span class="hljs-string">&quot;myBean&quot;</span>,Book.class);<br>    Book book2=context.getBean(<span class="hljs-string">&quot;myBean&quot;</span>,Book.class);<br>    System.out.println(book1.hashCode());<br>    System.out.println(book2.hashCode());<br>&#125;<br></code></pre></td></tr></table></figure><p>注：prototype和singletype还有一个区别。prototype是在getBean时才创建对象，而singletype是在加载配置文件的时候就创建对象。</p><h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><p>新建类Dept，并设置set方法和toString方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5.autowire;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dept</span><br>&#123;<br>    <span class="hljs-keyword">private</span> String dname;<br>&#125;<br></code></pre></td></tr></table></figure><p>新建类Emp，并设置set方法和toString方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5.autowire;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span><br>&#123;<br>    <span class="hljs-keyword">private</span> Dept dept;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写xml文件的两种方式"><a href="#编写xml文件的两种方式" class="headerlink" title="编写xml文件的两种方式"></a>编写xml文件的两种方式</h3><p>byName 方式</p><p>注意下面 id=”dept” 这个地方的id值要和 上面 private Dept dept 的变量名一样。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-comment">&lt;!--实现自动装配</span><br><span class="hljs-comment">            bean标签属性autowire，配置自动装配autowire屠性常用两个值:</span><br><span class="hljs-comment">            byName根据属性名称注入 ，注入值bean的id值和类属性名称一样</span><br><span class="hljs-comment">   byType根据属性类型注入</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.autowire.Emp&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.autowire.Dept&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;国防部&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>byType 方式</p><p>此时 id值可以与变量名不同，因为它根据class进行匹配，但要注意同一 Type 只能有一个，不然它就不知道要装配哪一个。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">    &lt;bean id=&quot;emp&quot; class=&quot;com.C4n.spring5.autowire.Emp&quot; autowire=&quot;byType&quot;&gt;<br>&lt;!--        &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;<br>    &lt;/bean&gt;<br>    &lt;bean id=&quot;dept&quot; class=&quot;com.C4n.spring5.autowire.Dept&quot;&gt;<br>        &lt;property name=&quot;dname&quot; value=&quot;国防部&quot;&gt;&lt;/property&gt;<br>    &lt;/bean&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.IOC容器底层原理</title>
    <link href="/2022/12/16/Spring/2.IOC%E5%AE%B9%E5%99%A8%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <url>/2022/12/16/Spring/2.IOC%E5%AE%B9%E5%99%A8%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">框架 = 注解 + 反射 + 设计模式，而IOC = xml解析 + 反射 + 工厂模式<br></code></pre></td></tr></table></figure><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>使用工厂前，如果 UserDao 的构造器改了，那么很多地方都得跟着改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span>()<br>&#123;<br>    excute()<br>    &#123;<br>     UserDao dao=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDao</span>();<br>        dao.add();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span>()<br>&#123;<br>    add()<br>    &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用工厂后，如果 UserDao 的构造器改了，那么只需要更改工厂方法 UserFactory.getDao() 里面的代码。此时，我们就说 UserDao 和 UserService 间实现了解耦合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span>()<br>&#123;<br>    excute()<br>    &#123;<br>     UserDao dao=UserFactory.getDao();<br>        dao.add();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span>()<br>&#123;<br>    add()<br>    &#123;<br>        ...<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserFactory</span>()<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserDao <span class="hljs-title function_">getDao</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDao</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>先配置xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Dao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.UserDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后通过xml解析获得全限定类名，再利用反射方法 forname 获取 class 对象，然后通过 newInstance 构造器获取 UserDao 类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserFactory</span>()<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserDao <span class="hljs-title function_">getDao</span><span class="hljs-params">()</span><br>    &#123;<br>        String classValue=class属性值; <span class="hljs-comment">//通过xml解析获得</span><br>        Class cl=Class.forName(classValue) <br>        <span class="hljs-keyword">return</span> (UserDao)cl.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，如果你更改了 UserDao 类的路径，那么只需要在xml文件中作修改，进一步降低了耦合度</p><h1 id="xml解析"><a href="#xml解析" class="headerlink" title="xml解析"></a>xml解析</h1><p>Spring 提供 IOC容器实现两种方式(两个接口)：</p><ol><li>BeanFactory: 低级接口，Spring内部使用的接口，也就是开发Spring人员使用的。</li><li>ApplicationContext: 高级接口，BeanFactory接口的子接口，功能更强大，也就是提供给开发人员使用的。</li></ol><h2 id="ApplicationContext接口的两个具体实现类"><a href="#ApplicationContext接口的两个具体实现类" class="headerlink" title="ApplicationContext接口的两个具体实现类"></a>ApplicationContext接口的两个具体实现类</h2><p><img src="/2022/12/16/Spring/2.IOC%E5%AE%B9%E5%99%A8%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20221216000044454.png" alt="image-20221216000044454"></p><p>ClassPathXmlApplicationContext ：读取 src 目录下的配置文件路径。</p><p>FileSystemXmlApplicationContext ：读取系统文件路径。</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.通过配置文件创建对象</title>
    <link href="/2022/12/15/Spring/1.%E9%80%9A%E8%BF%87%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/12/15/Spring/1.%E9%80%9A%E8%BF%87%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">通过“新的创建对象方式”开始接触Spring5<br></code></pre></td></tr></table></figure><p>开始前要导入这五个jar包</p><p><img src="/2022/12/15/Spring/1.%E9%80%9A%E8%BF%87%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/image-20221215223445558.png" alt="image-20221215223445558"></p><p>1.首先，在 com.C4n.spring5 中创建类 User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;adding...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2.完成 bean1.xml 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置User对象创建--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里其实只创建了下面这一行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置User对象创建--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5.testdemo;<br><br><span class="hljs-keyword">import</span> com.C4n.spring5.User;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSpring5</span><br>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd</span><span class="hljs-params">()</span><br>    &#123;<br><span class="hljs-comment">//           1.加载配置文件</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br><span class="hljs-comment">//        2.获取配置创建的对象（id,类型转换）</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br><br>        System.out.println(user);<br>        user.add();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MYSQL 必知必会笔记</title>
    <link href="/2022/12/13/Mysql/MYSQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/12/13/Mysql/MYSQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>使用小提示：可以搜索’注’来查看需要注意的地方，防止在开始工作后触碰到危险，此时，你便在使用数据库操作的数据过滤。</p><p>注：</p><ol><li>空字符串：’’    和    空：NULL    不同</li><li>sql不区分大小写，包括表内数据</li></ol><h1 id="常用命令行语句"><a href="#常用命令行语句" class="headerlink" title="常用命令行语句"></a>常用命令行语句</h1><p>net start/stop mysql（需要管理员打开cmd）开启或关闭mysql服务</p><p>mysql -u root -p populate 使用root登录，并使用数据库populate</p><h1 id="操作整个查询结果"><a href="#操作整个查询结果" class="headerlink" title="操作整个查询结果"></a>操作整个查询结果</h1><h2 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a>Distinct</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> vend_id <br><span class="hljs-keyword">from</span> products;<br></code></pre></td></tr></table></figure><h2 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> products <br>limit <span class="hljs-number">1</span>,<span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>从第1行开始查，查10个记录。（这种写法是mysql特有的快捷方式）</p><p>标准sql语句为 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> products <br>limit <span class="hljs-number">10</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h2 id="Order-by"><a href="#Order-by" class="headerlink" title="Order by"></a>Order by</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_price,prod_name <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_price,prod_name <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><p>注：</p><ol><li><p>order by 必须是最后出现的子句。</p></li><li><p>如若未使用ORDER BY子句，查询结果的顺序是插入数据的顺序，但这个顺序会因为增删改查导致混乱，一般认为该顺序没有任何意义。</p></li></ol><p>desc代表按降序排列，如果未指定顺序，则默认按升序排列</p><p>上面语句等同于下面语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_price,prod_name <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><p>2和3是指select时写的顺序</p><h1 id="数据过滤"><a href="#数据过滤" class="headerlink" title="数据过滤"></a>数据过滤</h1><h2 id="普通数据过滤"><a href="#普通数据过滤" class="headerlink" title="普通数据过滤"></a>普通数据过滤</h2><h3 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_name,prod_price <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">where</span> prod_price<span class="hljs-operator">=</span><span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><table><thead><tr><th>操作符</th><th>说明</th><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于</td><td>&gt;</td><td>大于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td><td>&gt;=</td><td>大于等于</td></tr><tr><td>!=</td><td>不等于</td><td>!&gt;</td><td>不大于</td></tr><tr><td>&lt;</td><td>小于</td><td>between and</td><td>在指定的两个值之间</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>is null</td><td>为null值</td></tr><tr><td>!&lt;</td><td>不小于</td><td></td><td></td></tr></tbody></table><h3 id="And"><a href="#And" class="headerlink" title="And"></a>And</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_price,prod_name <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">where</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1001</span> <span class="hljs-keyword">and</span> prod_price<span class="hljs-operator">&lt;=</span><span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h3 id="Or"><a href="#Or" class="headerlink" title="Or"></a>Or</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_price,prod_name <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">where</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1001</span> <span class="hljs-keyword">or</span> prod_id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;tnt2&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="In"><a href="#In" class="headerlink" title="In"></a>In</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_price,prod_name <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">where</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1001</span> <span class="hljs-keyword">or</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1002</span>;<br></code></pre></td></tr></table></figure><p>↑↓两种写法结果相同，但 in 子句的可读性更高，且搜索速度更快，所以更推荐使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_price,prod_name <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">where</span> vend_id <span class="hljs-keyword">in</span> (<span class="hljs-number">1001</span>,<span class="hljs-number">1002</span>);<br></code></pre></td></tr></table></figure><h3 id="Not"><a href="#Not" class="headerlink" title="Not"></a>Not</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1001</span> <span class="hljs-keyword">or</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1002</span>;<br></code></pre></td></tr></table></figure><p>not 子句会否定紧接其后的条件子句，即 vend_id=1001</p><h2 id="通配符过滤"><a href="#通配符过滤" class="headerlink" title="通配符过滤"></a>通配符过滤</h2><p>注：通配符搜索一般比其他操作都要耗时很多，所以尽量不使用。</p><h3 id><a href="#" class="headerlink" title="%"></a>%</h3><p>贪婪模式，会尽可能匹配多的字符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;J%&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title="_"></a>_</h3><p>专一模式，只匹配一个字符</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> prod_id,prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;TNT%k_&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h1><p>格式化数据。该操作一般可以在客户端完成，但在数据库服务器上完成这些操作比在客户端中完成要快得多。</p><h2 id="Concat"><a href="#Concat" class="headerlink" title="Concat"></a>Concat</h2><p>拼接字段。其他数据库并不是使用concat（）函数来完成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> CONCAT(vend_name,<span class="hljs-string">&#x27;(&#x27;</span>,vend_country,<span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">FROM</span> vendors<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name;<br></code></pre></td></tr></table></figure><h2 id="Rtrim"><a href="#Rtrim" class="headerlink" title="Rtrim"></a>Rtrim</h2><p>去除值右边所有的空格。然后这里并看不出不一样的效果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> CONCAT(vend_name,<span class="hljs-string">&#x27;(&#x27;</span>,RTRIM(vend_country),<span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">FROM</span> vendors<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name;<br></code></pre></td></tr></table></figure><h2 id="As"><a href="#As" class="headerlink" title="As"></a>As</h2><p>取别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> CONCAT(vend_name,<span class="hljs-string">&#x27;(&#x27;</span>,RTRIM(vend_country),<span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">AS</span> vend_title<br><span class="hljs-keyword">FROM</span> vendors<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name;<br></code></pre></td></tr></table></figure><h2 id="执行算术运算"><a href="#执行算术运算" class="headerlink" title="执行算术运算"></a>执行算术运算</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_id,<br> quantity,<br> item_price,<br> quantity<span class="hljs-operator">*</span>item_price <span class="hljs-keyword">as</span> expanded_price<br><span class="hljs-keyword">FROM</span> orderitems<br><span class="hljs-keyword">WHERE</span> order_num<span class="hljs-operator">=</span><span class="hljs-number">20009</span><br></code></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_name,<span class="hljs-built_in">UPPER</span>(vend_name) <span class="hljs-keyword">AS</span> vend_name_upcase<br><span class="hljs-keyword">FROM</span> vendors<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name;<br></code></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>LEFT(str,len)</td><td>返回字符串左边的字符</td></tr><tr><td>LENGTH()</td><td>返回字符串长度</td></tr><tr><td>LOWER()</td><td>将字符串转换为小写</td></tr><tr><td>LTRIM()</td><td>去掉字符串左边的空格</td></tr><tr><td>RIGHT()</td><td>返回字符串右边的空格</td></tr><tr><td>RTRIM()</td><td>去掉字符串右边的空格</td></tr><tr><td>SUBSTR(str FROM pos FOR len)</td><td>提取字符串的组成部分</td></tr><tr><td>SOUNDEX()</td><td>返回字符串的SOUNDEX值</td></tr><tr><td>UPPER()</td><td>将字符串转换为大写</td></tr></tbody></table><h2 id="日期处理函数"><a href="#日期处理函数" class="headerlink" title="日期处理函数"></a>日期处理函数</h2><h3 id="Extract"><a href="#Extract" class="headerlink" title="Extract"></a>Extract</h3><p>返回日期中的一部分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">EXTRACT</span>(<span class="hljs-keyword">month</span> <span class="hljs-keyword">FROM</span> order_date)<span class="hljs-operator">=</span><span class="hljs-number">9</span>;<br></code></pre></td></tr></table></figure><h3 id="To-days"><a href="#To-days" class="headerlink" title="To_days"></a>To_days</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">WHERE</span> TO_DAYS(order_date) <span class="hljs-keyword">BETWEEN</span> TO_DAYS(<span class="hljs-string">&#x27;2005-09-01&#x27;</span>) <span class="hljs-keyword">AND</span> TO_DAYS(<span class="hljs-string">&#x27;2005-10-01&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>ABS()</td><td>返回一个数的绝对值</td></tr><tr><td>COS()</td><td>返回一个角度的余弦</td></tr><tr><td>EXP()</td><td>返回一个数的指数值</td></tr><tr><td>PI()</td><td>返回圆周率的值</td></tr><tr><td>SIN()</td><td>返回一个角度的正弦</td></tr><tr><td>SQRT()</td><td>返回一个数的平方根</td></tr><tr><td>TAN()</td><td>返回一个角度的正切</td></tr></tbody></table><h2 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h2><h3 id="Avg"><a href="#Avg" class="headerlink" title="Avg"></a>Avg</h3><p>注：总是忽略NULL值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(prod_price) <span class="hljs-keyword">AS</span> avg_price<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1001</span>;<br></code></pre></td></tr></table></figure><h3 id="Count"><a href="#Count" class="headerlink" title="Count"></a>Count</h3><p>注：</p><p>使用COUNT(*) 时，不忽略NULL</p><p>使用COUNT(column)对特定列进行计数时，忽略NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> num_cust<br><span class="hljs-keyword">FROM</span> customers;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(cust_email) <span class="hljs-keyword">AS</span> num_cust<br><span class="hljs-keyword">FROM</span> customers;<br></code></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>AVG()</td><td>返回某列的平均值</td></tr><tr><td>COUNT()</td><td>返回某列的行数</td></tr><tr><td>MAX()</td><td>返回某列的最大值</td></tr><tr><td>MIN()</td><td>返回某列的最小值</td></tr><tr><td>SUM()</td><td>返回某列值之和</td></tr></tbody></table><p>以上五个函数均可使用 ALL 和 DISTINCT ，默认为 ALL；但要注意，count(*) 不能使用DISTINCT()</p><h1 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h1><h2 id="Group-by"><a href="#Group-by" class="headerlink" title="Group by"></a>Group by</h2><p>计算聚集时进行分组</p><p>注：</p><ol><li>GROUP BY 子句必须出现在WHERE子句之后，ORDER BY之前</li><li>不能在 GROUP BY 后使用别名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_id,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> num_prods<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> vend_id;<br></code></pre></td></tr></table></figure><h2 id="Having"><a href="#Having" class="headerlink" title="Having"></a>Having</h2><p>过滤分组</p><p>很明显，执行顺序是先 GROUP BY 进行分组，再对每一个分组进行 Having 过滤</p><p>注：WHERE 在数据分组前进行过滤，Having 在数据分组后进行过滤</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_id <span class="hljs-keyword">AS</span> id,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> num_prods<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> vend_id<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&lt;=</span> <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><h2 id="在过滤字段中使用子查询"><a href="#在过滤字段中使用子查询" class="headerlink" title="在过滤字段中使用子查询"></a>在过滤字段中使用子查询</h2><p>如果要查询下了 prod=‘FB’ 这些订单的顾客 的 cust_id。可以分为两步进行</p><p>第一步：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> order_num<br><span class="hljs-keyword">FROM</span> orderitems<br><span class="hljs-keyword">WHERE</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;FB&#x27;</span>;<br></code></pre></td></tr></table></figure><p>第一步执行完会返回 order_num 值 20005,20009</p><p>第二步：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_id <br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">WHERE</span> order_num <span class="hljs-keyword">IN</span> (<span class="hljs-number">20005</span>,<span class="hljs-number">20009</span>);<br></code></pre></td></tr></table></figure><p>然后我们把这两步嵌套起来，就是所谓的子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_id <br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">WHERE</span> order_num <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> order_num<br>   <span class="hljs-keyword">FROM</span> orderitems<br>   <span class="hljs-keyword">WHERE</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;FB&#x27;</span>);<br></code></pre></td></tr></table></figure><p>如果还要进一步查找这些顾客的信息，就可以再嵌套一层</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name,cust_contact<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_id <span class="hljs-keyword">IN</span>(<span class="hljs-keyword">SELECT</span> cust_id <br>                 <span class="hljs-keyword">FROM</span> orders<br>                 <span class="hljs-keyword">WHERE</span> order_num <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> order_num<br>                                     <span class="hljs-keyword">FROM</span> orderitems<br>                                     <span class="hljs-keyword">WHERE</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;FB&#x27;</span>));<br></code></pre></td></tr></table></figure><p>注：子查询子句结果只能有单个列，否则将会报错。</p><h2 id="在计算字段中使用子查询"><a href="#在计算字段中使用子查询" class="headerlink" title="在计算字段中使用子查询"></a>在计算字段中使用子查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> orders<br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">WHERE</span> cust_id<span class="hljs-operator">=</span><span class="hljs-number">10001</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name,cust_state,(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br>                             <span class="hljs-keyword">FROM</span> orders<br>                             <span class="hljs-keyword">WHERE</span> orders.cust_id<span class="hljs-operator">=</span>customers.cust_id) <span class="hljs-keyword">AS</span> orders<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> cust_name;<br></code></pre></td></tr></table></figure><h1 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h1><h2 id="等值联结"><a href="#等值联结" class="headerlink" title="等值联结"></a>等值联结</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_name,prod_name,prod_price<br><span class="hljs-keyword">FROM</span> vendors,products<br><span class="hljs-keyword">WHERE</span> vendors.vend_id<span class="hljs-operator">=</span>products.vend_id;<br></code></pre></td></tr></table></figure><p>过程是这样的，数据库会固定vendors第一行，然后从头扫描products每一行，看看有没有 vendors.vend_id=products.vend_id 的，然后固定 vendors 第二行，继续从头扫描products…</p><p>也就是说，如果没又 WHERE  子句，返回的将会是全连接图，也就是笛卡尔积。</p><h2 id="内联结"><a href="#内联结" class="headerlink" title="内联结"></a>内联结</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_name,prod_name,prod_price<br><span class="hljs-keyword">FROM</span> vendors<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> products<br><span class="hljs-keyword">ON</span> vendors.vend_id<span class="hljs-operator">=</span>products.vend_id;<br></code></pre></td></tr></table></figure><p>结果和上面的等值联结相同。</p><h2 id="多表联结"><a href="#多表联结" class="headerlink" title="多表联结"></a>多表联结</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> cust_name,cust_contact<br><span class="hljs-keyword">FROM</span> customers,orders,orderItems<br><span class="hljs-keyword">WHERE</span> customers.cust_id<span class="hljs-operator">=</span>orders.cust_id<br><span class="hljs-keyword">AND</span> orderItems.order_num<span class="hljs-operator">=</span>orders.order_num<br><span class="hljs-keyword">AND</span> prod_id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;FB&#x27;</span>;<br></code></pre></td></tr></table></figure><p>该查询结果和下面的子查询结果相同。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name,cust_contact<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_id <span class="hljs-keyword">IN</span>(<span class="hljs-keyword">SELECT</span> cust_id <br>                 <span class="hljs-keyword">FROM</span> orders<br>                 <span class="hljs-keyword">WHERE</span> order_num <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> order_num<br>                                     <span class="hljs-keyword">FROM</span> orderitems<br>                                     <span class="hljs-keyword">WHERE</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;FB&#x27;</span>));<br></code></pre></td></tr></table></figure><h1 id="高级联结"><a href="#高级联结" class="headerlink" title="高级联结"></a>高级联结</h1><h2 id="表别名"><a href="#表别名" class="headerlink" title="表别名"></a>表别名</h2><p>使用表别名主要的优点是：运行在一条 SELECT 语句中多次使用相同的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> cust_name,cust_contact<br><span class="hljs-keyword">FROM</span> customers <span class="hljs-keyword">AS</span> C,orders <span class="hljs-keyword">AS</span> O,orderItems <span class="hljs-keyword">AS</span> OI<br><span class="hljs-keyword">WHERE</span> C.cust_id<span class="hljs-operator">=</span>O.cust_id<br><span class="hljs-keyword">AND</span> OI.order_num<span class="hljs-operator">=</span>O.order_num<br><span class="hljs-keyword">AND</span> prod_id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;FB&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a>自联结</h2><p>先插入一行数据，以便于后面演示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> customers<br><span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">10006</span>,<span class="hljs-string">&#x27;Wascals&#x27;</span>,<span class="hljs-string">&#x27;829 Riverside Drive&#x27;</span>,<span class="hljs-string">&#x27;Phoenix&#x27;</span>,<span class="hljs-string">&#x27;AZ&#x27;</span>,<span class="hljs-number">88889</span>,<span class="hljs-string">&#x27;USA&#x27;</span>,<span class="hljs-string">&#x27;Y Sam&#x27;</span>,<span class="hljs-string">&#x27;sam@yosemite.com&#x27;</span>);<br></code></pre></td></tr></table></figure><p>题目是：假如要给与Jim Jones同一公司的所有顾客发送一封信件。这个查询要求首先找出Jim Jones工作的公司，然后找出在该公司工作的顾客。下面是解决此问题的一种方法。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> c1.cust_id,c1.cust_name,c1.cust_contact<br><span class="hljs-keyword">FROM</span> customers <span class="hljs-keyword">as</span> c1,customers <span class="hljs-keyword">as</span> c2<br><span class="hljs-keyword">WHERE</span> c1.cust_name<span class="hljs-operator">=</span>c2.cust_name<br><span class="hljs-keyword">AND</span> c2.cust_contact<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Jim Jones&#x27;</span>;<br></code></pre></td></tr></table></figure><p>使用 c1 和 c2 作为 customers 的别名，就可以在同一 SELECT 中使用多次 customers </p><h2 id="外联结"><a href="#外联结" class="headerlink" title="外联结"></a>外联结</h2><p>外联结包含了那些在相关表中没有关联行的行。</p><p>如列出所有产品以及订购数量，包含没有人订购的产品。</p><p>我们先给出一个内联结</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> customers.cust_id,orders.order_num<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> orders <span class="hljs-keyword">ON</span> customers.cust_id<span class="hljs-operator">=</span>orders.cust_id;<br></code></pre></td></tr></table></figure><p>然后再给出一个左外联结</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> customers.cust_id,orders.order_num<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> orders <span class="hljs-keyword">ON</span> customers.cust_id<span class="hljs-operator">=</span>orders.cust_id;<br></code></pre></td></tr></table></figure><p>比较他们的查询结果可以发现，内联结没有null项，而外联结有。</p><p>而 LEFT 和 RIGHT 是用来指定包含所有行的表。</p><p>上面外查询语句由于使用了 LEFT ，所有出现的 null 项都是 OUTER JOIN 左边的表，也就是 customers 表的。</p><p>从结果来看，cust_id 为 10002 出现了 null 项，证明 customers 表中有cust_id 为 10002 的项，而 orders 表中没有。</p><h1 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h1><h2 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h2><p>UNION 操作符可以将多条 SELECT 语句组合成一个结果集</p><p>注：</p><ol><li>UNION 左右两边查询结果列数应该相同</li><li>UNION 默认去除重复行，可以使用 UNION ALL 来取消去重效果，这是 WHERE 子句不能够完成的。</li><li>只能使用一条 ORDER BY 子句</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name,cust_contact,cust_email<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_state <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;IL&#x27;</span>,<span class="hljs-string">&#x27;IN&#x27;</span>,<span class="hljs-string">&#x27;MI&#x27;</span>)<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> cust_name,cust_contact,cust_email<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Wascals&#x27;</span>;<br></code></pre></td></tr></table></figure><p>以上查询语句相当于↓</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name,cust_contact,cust_email<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_state <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;IL&#x27;</span>,<span class="hljs-string">&#x27;IN&#x27;</span>,<span class="hljs-string">&#x27;MI&#x27;</span>) <span class="hljs-keyword">OR</span> cust_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Wascals&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><h2 id="普通数据插入"><a href="#普通数据插入" class="headerlink" title="普通数据插入"></a>普通数据插入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> customers<br><span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">10007</span>,<span class="hljs-string">&#x27;Wascals&#x27;</span>,<span class="hljs-string">&#x27;829 Riverside Drive&#x27;</span>,<span class="hljs-string">&#x27;Phoenix&#x27;</span>,<span class="hljs-string">&#x27;AZ&#x27;</span>,<span class="hljs-number">88889</span>,<span class="hljs-string">&#x27;USA&#x27;</span>,<span class="hljs-string">&#x27;Y Sam&#x27;</span>,<span class="hljs-string">&#x27;sam@yosemite.com&#x27;</span>),<br>(<span class="hljs-number">10008</span>,<span class="hljs-string">&#x27;Wascals&#x27;</span>,<span class="hljs-string">&#x27;829 Riverside Drive&#x27;</span>,<span class="hljs-string">&#x27;Phoenix&#x27;</span>,<span class="hljs-string">&#x27;AZ&#x27;</span>,<span class="hljs-number">88889</span>,<span class="hljs-string">&#x27;USA&#x27;</span>,<span class="hljs-string">&#x27;Y Sam&#x27;</span>,<span class="hljs-string">&#x27;sam@yosemite.com&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> customers(列名<span class="hljs-number">1</span>,列名<span class="hljs-number">2</span>,...)#此处列名可以省略不写，但给出列名的话，可以用不同的列的顺序给出记录，也可以省略某些列<br><span class="hljs-keyword">VALUES</span><br>(列<span class="hljs-number">1</span>,列<span class="hljs-number">2</span>,...),#用逗号隔开多条记录<br>(列<span class="hljs-number">1</span>,列<span class="hljs-number">2</span>,...<br></code></pre></td></tr></table></figure><p>注：省略的列要求允许NULL值或者有默认值。</p><h2 id="插入检索出的数据"><a href="#插入检索出的数据" class="headerlink" title="插入检索出的数据"></a>插入检索出的数据</h2><p>注:  INSERT 和 SELECT 子句中的列位置要相同，因为 DBMS 是使用列的位置作为填充依据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> customers (cust_id,<br>                        cust_name,<br>                        cust_address,<br>                        cust_city,<br>                        cust_state,<br>                        cust_zip,<br>                        cust_country,<br>                        cust_contact,<br>                        cust_email)<br><span class="hljs-keyword">SELECT</span> cust_id,<br>        cust_name,<br>        cust_address,<br>        cust_city,<br>        cust_state,<br>        cust_zip,<br>        cust_country,<br>        cust_contact,<br>        cust_email<br><span class="hljs-keyword">FROM</span> custnew;<br></code></pre></td></tr></table></figure><p>由于列名很多，最好先执行下面语句获取表头</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> columns <span class="hljs-keyword">from</span> customers;<br></code></pre></td></tr></table></figure><h2 id="从一个表复制到另外一个表"><a href="#从一个表复制到另外一个表" class="headerlink" title="从一个表复制到另外一个表"></a>从一个表复制到另外一个表</h2><p>下列语句在不同数据库中可能写法不同</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> custcopy <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> customers;<br></code></pre></td></tr></table></figure><h1 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h1><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> customers<br><span class="hljs-keyword">SET</span> cust_email<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10086@qq.com&#x27;</span>,<br>cust_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Michel&#x27;</span><br><span class="hljs-keyword">WHERE</span> cust_id<span class="hljs-operator">=</span><span class="hljs-number">10006</span>;<br></code></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_id<span class="hljs-operator">=</span><span class="hljs-number">10006</span>;<br></code></pre></td></tr></table></figure><h1 id="创建和操纵表"><a href="#创建和操纵表" class="headerlink" title="创建和操纵表"></a>创建和操纵表</h1><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> products<br>(<br>  prod_id    <span class="hljs-type">char</span>(<span class="hljs-number">10</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  vend_id    <span class="hljs-type">int</span>           <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>  prod_name  <span class="hljs-type">char</span>(<span class="hljs-number">255</span>)     <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>  prod_price <span class="hljs-type">decimal</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>  prod_desc  text          <span class="hljs-keyword">NULL</span> ,<br>  <span class="hljs-keyword">PRIMARY</span> KEY(prod_id)<br>);<br></code></pre></td></tr></table></figure><p>创建表还有很多可选项，如果默认值，默认日期。对了，最常用的莫过于你可以让性别为一个枚举型，只能在男女中选一个。</p><h2 id="更新表"><a href="#更新表" class="headerlink" title="更新表"></a>更新表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> vendors<br><span class="hljs-keyword">ADD</span> vend_phone <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> custcopy;<br></code></pre></td></tr></table></figure><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>视图是虚拟的表，存储的是查询结果。</p><p>它可以用来简化复杂数据的处理，例如你经常需要使用某一个格式化后的结果，也就是使用例如了CONCAT() 函数后的结果，那么最好就是创建一个视图，使用它即可。</p><h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> ProductCustomers <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> cust_name,cust_contact,prod_id<br><span class="hljs-keyword">FROM</span> customers,orders,orderitems<br><span class="hljs-keyword">WHERE</span> customers.cust_id<span class="hljs-operator">=</span>orders.cust_id<br><span class="hljs-keyword">AND</span> orderitems.order_num<span class="hljs-operator">=</span>orders.order_num;<br></code></pre></td></tr></table></figure><h2 id="使用视图进行查询"><a href="#使用视图进行查询" class="headerlink" title="使用视图进行查询"></a>使用视图进行查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name,cust_contact<br><span class="hljs-keyword">FROM</span> productcustomers<br><span class="hljs-keyword">WHERE</span> prod_id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;FB&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>防火墙实现访问控制</title>
    <link href="/2022/11/01/Shell/%E9%98%B2%E7%81%AB%E5%A2%99%E5%AE%9E%E7%8E%B0%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/"/>
    <url>/2022/11/01/Shell/%E9%98%B2%E7%81%AB%E5%A2%99%E5%AE%9E%E7%8E%B0%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="init-sh-文件"><a href="#init-sh-文件" class="headerlink" title="init.sh 文件"></a>init.sh 文件</h1><p>该文件用于初始化服务，创建完全部文件后，只需要将全部文件放在同一个文件夹，然后运行 init.sh ，即可开始使用 firectl 服务。</p><p>该服务使用起来很简单，你可以在任一目录的命令行模式下输入 firectl ，即可调出操作菜单，其余操作都在操作菜单中进行选择就会自动执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">授予shell文件执行权限</span><br>chmod +x $(cd `dirname $0`; pwd)/firectl_main.sh<br>chmod +x $(cd `dirname $0`; pwd)/firectl<br><span class="hljs-meta prompt_"># </span><span class="language-bash">以递归形式新建文件夹</span><br>mkdir -p /firectl_dir<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将当前目录的文件移动到特定位置</span><br>mv $(cd `dirname $0`; pwd)/firectl /bin/<br>mv $(cd `dirname $0`; pwd)/firectl_main.sh /firectl_dir/<br>mv $(cd `dirname $0`; pwd)/firectl.service /etc/systemd/system/<br>mv $(cd `dirname $0`; pwd)/firectl.conf /firectl_dir/<br>mv $(cd `dirname $0`; pwd)/main.py /firectl_dir/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启防火墙的ftp端口</span><br>firewall-cmd --permanent --add-port=21/tcp &gt;/dev/null 2&gt;&amp;1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">自动安装vsftpd 如果只使用vsftpd服务，则可以把下面的代码注释给取消掉，vsftpd是一个不对称服务，所以比较常用防火墙来进行拦截</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">tmp=`systemctl status vsftpd |grep <span class="hljs-string">&quot;Active:&quot;</span> |awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>` &amp;&gt;/dev/null</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$tmp</span> != active &amp;&amp; <span class="hljs-variable">$tmp</span> != inactive ]];<span class="hljs-keyword">then</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    yum install -y vsftpd</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">fi</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl restart vsftpd</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">自动安装python3 如果python3不存在，则自动安装</span><br>if ! type pip3 &gt;/dev/null 2&gt;&amp;1; then<br>    echo &#x27;python3 is not installed.&#x27;<br>    echo &#x27;Please wait while it is being installed for you.&#x27;<br>    yum -y install python3;<br>    echo &#x27;python3 is installed.&#x27;<br>fi<br><br>echo &#x27;初始化完成&#x27;<br>echo &#x27;如果python3没安装成功，请自行输入 yum -y install python3 进行安装&#x27;<br>echo &#x27;祝您使用愉快&#x27;<br>rm -f $0<br></code></pre></td></tr></table></figure><h1 id="firectl-conf-配置文件"><a href="#firectl-conf-配置文件" class="headerlink" title="firectl.conf 配置文件"></a>firectl.conf 配置文件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">service_name=vsftpd,httpd</span><br>[vsftpd]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">允许访问或者拒绝访问的时间段</span><br>open_time=2022-11-05 09:32-09:33<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定的地址池，可以添加多个地址，用逗号分隔</span><br>ip_pool=172.24.27.0/24,172.24.28.0/24<br><span class="hljs-meta prompt_"># </span><span class="language-bash">access为<span class="hljs-built_in">yes</span>则代表地址池内的ip是在时间段内允许访问，access为no则代表地址池内的ip是在时间段内拒绝访问</span><br>access=yes<br><span class="hljs-meta prompt_">#</span><span class="language-bash">可自行添加其他服务</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[httpd]</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">open_time=2022-11-03 09:32-09:33</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ip_pool=172.24.27.0/24,172.24.28.0/24</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">access=<span class="hljs-built_in">yes</span></span><br></code></pre></td></tr></table></figure><h1 id="firectl-文件"><a href="#firectl-文件" class="headerlink" title="firectl 文件"></a>firectl 文件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">字体颜色</span><br>red=&#x27;\e[91m&#x27;<br>green=&#x27;\e[92m&#x27;<br>yellow=&#x27;\e[93m&#x27;<br>magenta=&#x27;\e[95m&#x27;<br>none=&#x27;\e[0m&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取firectl_main.sh进程的pid</span><br>firectl_pid=$(pgrep firectl_main.sh)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果该pid存在，证明该程序有在运行</span><br>if [ $firectl_pid ];then<br>    firectl_status=&quot;$green正在运行$none&quot;<br>else<br>    firectl_status=&quot;$red未在运行$none&quot;<br>fi<br><span class="hljs-meta prompt_"># </span><span class="language-bash">该函数用于控制firectl的服务程序</span><br>firectl_service()&#123;<br>    while :; do<br>    echo<br>    echo -e &quot;$yellow 1. $none启动 firectl&quot;<br>    echo<br>    echo -e &quot;$yellow 2. $none停止 firectl&quot;<br>    echo<br>    echo -e &quot;$yellow 3. $none重启 firectl&quot;<br>    echo<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将获取到数字放在_opt变量中</span><br>    read -p &quot;$(echo -e &quot;请选择 [$&#123;magenta&#125;1-3$none]:&quot;)&quot; _opt<br>    if [[ -z $_opt ]]; then<br>        error<br>    else<br>        case $_opt in<br>        1)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果选项为1，则start服务</span><br>            systemctl start firectl.service<br>            break<br>            ;;<br>        2)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果选项为2，则stop服务，并且使用python3 /firectl_dir/main.py stop命令来清空allow和deny中增加的内容</span><br>            systemctl stop firectl.service<br>cd /firectl_dir/<br>python3 /firectl_dir/main.py stop<br>            break<br>            ;;<br>        3)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果选项为3，则restart服务</span><br>            systemctl restart firectl.service<br>            break<br>            ;;<br>        *)<br>            error<br>            ;;<br>        esac<br>    fi<br>    done<br>&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">该函数用于卸载程序</span><br>firectl_uninstall()&#123;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除文件</span><br>rm -f /firectl_dir/firectl_main.sh<br>rm -f /etc/systemd/system/firectl.service<br>rm -f /firectl_dir/firectl.conf<br>rm -f /firectl_dir/main.py<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除目录</span><br>rmdir /firectl_dir<br>echo &quot;卸载完成&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除本脚本程序</span><br>rm -f $0<br>&#125;<br>menu() &#123;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">清屏</span><br>clear<br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出主菜单</span><br>while :; do<br>echo<br>echo &quot;.................... firectl 管理脚本 ...................&quot;<br>echo<br>echo -e &quot;## firectl 状态: $firectl_status ##&quot;<br>        echo<br>echo -e &quot;$yellow  1. $none查看 firectl 配置&quot;<br>echo<br>echo -e &quot;$yellow  2. $none修改 firectl 配置&quot;<br>echo<br>echo -e &quot;$yellow  3. $none启动 / 停止 / 重启&quot;<br>echo<br>echo -e &quot;$yellow  4. $none卸载 firectl&quot;<br>echo<br>echo -e &quot;温馨提示:  如果你不想执行选项   按$yellow Ctrl + C $none即可退出&quot;<br>echo<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将获取到数字放在choose变量中</span><br>read -p &quot;$(echo -e &quot;请选择菜单 [$&#123;magenta&#125;1-4$none]:&quot;)&quot; choose<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果choose为空，则退出</span><br>if [[ -z $choose ]]; then<br>exit 1<br>else<br>case $choose in<br>1)<br># 如果选项为1，则将配置文件的内容cat出来<br>cat /firectl_dir/firectl.conf<br>break<br>;;<br>2)<br># 如果选项为2，则vim配置文件<br>vim /firectl_dir/firectl.conf<br>break<br>;;<br>3)<br># 如果选项为3，则调用函数firectl_service<br>firectl_service<br>break<br>;;<br>4)<br># 如果选项为4，则调用函数firectl_uninstall<br>firectl_uninstall<br>break<br>;;<br>*)<br>error<br>;;<br>esac<br>fi<br>done<br>&#125;<br>menu<br></code></pre></td></tr></table></figure><h1 id="firectl-main-sh-文件"><a href="#firectl-main-sh-文件" class="headerlink" title="firectl_main.sh 文件"></a>firectl_main.sh 文件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">死循环，确保程序能一直挂在后台执行</span><br>while true<br>do<br>    # 需要先cd进脚本所在文件夹才能用python3来执行python程序<br>    cd `dirname $0`<br>    python3 main.py<br>    # 执行完后重启防火墙<br>    systemctl restart firewalld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">每三秒执行一次</span><br>sleep 3<br>done<br></code></pre></td></tr></table></figure><h1 id="main-py-文件"><a href="#main-py-文件" class="headerlink" title="main.py 文件"></a>main.py 文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> configparser<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># 获取输入的参数，比如执行python3 main.py stop时，参数就为stop</span><br>args = sys.argv[<span class="hljs-number">1</span>:]<br><span class="hljs-comment"># 如果args为空，则置0，这样做的好处是使得arg[0]有值，防止后面读取args[0]的时候索引超出范围</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> args:<br>    args = [<span class="hljs-number">0</span>]<br><br><br><span class="hljs-comment"># 预处理</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess</span>(<span class="hljs-params">ip_pool, open_time</span>):<br>    <span class="hljs-comment"># 用逗号分割多个地址</span><br>    ip_pool = re.split(<span class="hljs-string">&#x27;,&#x27;</span>, ip_pool)<br>    <span class="hljs-comment"># 用空格分割日期和时间</span><br>    open_time = re.split(<span class="hljs-string">&#x27; &#x27;</span>, open_time)<br>    <span class="hljs-comment"># 用-分割开始时间和结束时间</span><br>    tmp_time = re.split(<span class="hljs-string">&#x27;-&#x27;</span>, open_time[<span class="hljs-number">1</span>])<br>    <span class="hljs-comment"># 日期加时间，也就是start_time和stop_time都变成2022-08-08 14:00这样的格式</span><br>    start_time = open_time[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27; &#x27;</span> + tmp_time[<span class="hljs-number">0</span>]<br>    stop_time = open_time[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27; &#x27;</span> + tmp_time[<span class="hljs-number">1</span>]<br>    <span class="hljs-comment"># 将字符串类型转换为time类型，方便后面直接进行大小比较</span><br>    start_time = time.strptime(start_time, <span class="hljs-string">&quot;%Y-%m-%d %H:%M&quot;</span>)<br>    stop_time = time.strptime(stop_time, <span class="hljs-string">&quot;%Y-%m-%d %H:%M&quot;</span>)<br>    <span class="hljs-keyword">return</span> ip_pool, start_time, stop_time<br><br><br><span class="hljs-comment"># 读取配置文件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getConfig</span>(<span class="hljs-params">filename, section, option</span>):<br>    <span class="hljs-comment"># 获取当前程序所在的绝对路径</span><br>    proDir = os.path.split(os.path.realpath(__file__))[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># 将绝对路径和配置文件名加起来</span><br>    configPath = os.path.join(proDir, filename)<br><br>    <span class="hljs-comment"># 使用configparser库来读取配置文件内容</span><br>    conf = configparser.ConfigParser()<br><br>    conf.read(configPath, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>)<br>    config = conf.get(section, option)<br>    <span class="hljs-keyword">return</span> config<br><br><br><span class="hljs-comment"># 插入ip_pool</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">file_path, service, ip_pool</span>):<br>    <span class="hljs-comment"># data为读到的文本内容</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        data = file.read()<br>    <span class="hljs-comment"># 追加的形式打开文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;a+&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-comment"># 如果data内不含有地址池内的地址，则追加上去</span><br>        <span class="hljs-keyword">for</span> tmp <span class="hljs-keyword">in</span> ip_pool:<br>            str_tmp = <span class="hljs-string">&#x27;\n&#x27;</span> + service + <span class="hljs-string">&#x27;:&#x27;</span> + tmp<br>            <span class="hljs-keyword">if</span> str_tmp <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> data:<br>                f.write(<span class="hljs-string">&#x27;\n&#x27;</span> + service + <span class="hljs-string">&#x27;:&#x27;</span> + tmp)<br><br><br><span class="hljs-comment"># 删除ip_pool</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">file_path, service, ip_pool</span>):<br>    <span class="hljs-comment"># data为读到的文本内容</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read()<br>        <span class="hljs-comment"># 直接将data内 服务：地址（如 ftp（服务）：172.16.30.1（地址）） 的内容替换为空</span><br>        <span class="hljs-keyword">for</span> tmp <span class="hljs-keyword">in</span> ip_pool:<br>            data = data.replace(<span class="hljs-string">&#x27;\n&#x27;</span> + service + <span class="hljs-string">&#x27;:&#x27;</span> + tmp, <span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>            file.write(data)<br><br><br><span class="hljs-comment"># 执行函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">control</span>(<span class="hljs-params">ip_pool, start_time, stop_time, access, service</span>):<br>    <span class="hljs-comment"># 获取本地时间</span><br>    localtime = time.localtime()<br>    <span class="hljs-comment"># 如果在时间段内</span><br>    <span class="hljs-keyword">if</span> start_time &lt; localtime &lt; stop_time:<br>        <span class="hljs-comment"># 如果该地址池为允许访问的地址池，将地址池内容插入到/etc/hosts.allow中，并从/etc/hosts.deny中删掉</span><br>        <span class="hljs-keyword">if</span> access == <span class="hljs-string">&#x27;yes&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;地址池为允许池&#x27;</span>)<br>            insert(<span class="hljs-string">&#x27;/etc/hosts.allow&#x27;</span>, service, ip_pool)<br>            delete(<span class="hljs-string">&#x27;/etc/hosts.deny&#x27;</span>, service, ip_pool)<br>        <span class="hljs-comment"># 如果该地址池为拒绝访问的地址池，相反操作</span><br>        <span class="hljs-keyword">if</span> access == <span class="hljs-string">&#x27;no&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;地址池为拒绝池&#x27;</span>)<br>            insert(<span class="hljs-string">&#x27;/etc/hosts.deny&#x27;</span>, service, ip_pool)<br>            delete(<span class="hljs-string">&#x27;/etc/hosts.allow&#x27;</span>, service, ip_pool)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 时间段外为相反操作，就是时间段内允许的现在变成了拒绝，时间段内拒绝的现在变成了允许</span><br>        <span class="hljs-keyword">if</span> access == <span class="hljs-string">&#x27;yes&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;已超出时间段&#x27;</span>)<br>            insert(<span class="hljs-string">&#x27;/etc/hosts.deny&#x27;</span>, service, ip_pool)<br>            delete(<span class="hljs-string">&#x27;/etc/hosts.allow&#x27;</span>, service, ip_pool)<br>        <span class="hljs-keyword">if</span> access == <span class="hljs-string">&#x27;no&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;已超出时间段&#x27;</span>)<br>            insert(<span class="hljs-string">&#x27;/etc/hosts.allow&#x27;</span>, service, ip_pool)<br>            delete(<span class="hljs-string">&#x27;/etc/hosts.deny&#x27;</span>, service, ip_pool)<br><br><br><span class="hljs-comment"># 程序入口</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># configparser是读取配置文件的库</span><br>    cf = configparser.ConfigParser()<br>    cf.read(<span class="hljs-string">&quot;firectl.conf&quot;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>)<br>    <span class="hljs-comment"># service_list为配置文件内所有的session，也就是服务名的集合，便于拓展多个服务</span><br>    service_list = cf.sections()<br>    <span class="hljs-comment"># 遍历service_list</span><br>    <span class="hljs-keyword">for</span> tmpt <span class="hljs-keyword">in</span> service_list:<br>        <span class="hljs-comment"># 尝试读取配置文件内容</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># getConfig函数用于获取配置文件的内容，获取后用其转换为str字符串格式</span><br>            <span class="hljs-comment"># getConfig(配置文件名，服务名，字段值)</span><br>            open_time = <span class="hljs-built_in">str</span>(getConfig(<span class="hljs-string">&quot;firectl.conf&quot;</span>, tmpt, <span class="hljs-string">&#x27;open_time&#x27;</span>))<br>            ip_pool = <span class="hljs-built_in">str</span>(getConfig(<span class="hljs-string">&quot;firectl.conf&quot;</span>, tmpt, <span class="hljs-string">&#x27;ip_pool&#x27;</span>))<br>            access = <span class="hljs-built_in">str</span>(getConfig(<span class="hljs-string">&quot;firectl.conf&quot;</span>, tmpt, <span class="hljs-string">&#x27;access&#x27;</span>))<br>            <span class="hljs-comment"># 预处理</span><br>            ip_pool, start_time, stop_time = preprocess(ip_pool, open_time)<br>            <span class="hljs-comment"># python3 main.py stop 这个命令是服务停止后执行的命令，它可以恢复文件的状态，也就是删掉allow和deny文件里面的 服务：地址</span><br>            <span class="hljs-keyword">if</span> args[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;stop&#x27;</span>:<br>                <span class="hljs-comment"># 恢复allow和deny文件的状态</span><br>                delete(<span class="hljs-string">&#x27;/etc/hosts.allow&#x27;</span>, tmpt, ip_pool)<br>                delete(<span class="hljs-string">&#x27;/etc/hosts.deny&#x27;</span>, tmpt, ip_pool)<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-comment"># 如果没有执行stop命令，则执行control函数</span><br>            control(ip_pool, start_time, stop_time, access, tmpt)<br>        <span class="hljs-comment"># 读取失败则抛出错误信息</span><br>        <span class="hljs-keyword">except</span> configparser.NoOptionError:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请检查配置文件格式是否正确&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Shell</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写int数组快排</title>
    <link href="/2022/10/30/C++/%E6%89%8B%E5%86%99int%E6%95%B0%E7%BB%84%E5%BF%AB%E6%8E%92/"/>
    <url>/2022/10/30/C++/%E6%89%8B%E5%86%99int%E6%95%B0%E7%BB%84%E5%BF%AB%E6%8E%92/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//手写int数组快排函数 </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> *a,<span class="hljs-type">int</span> *b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_sqrt</span><span class="hljs-params">(<span class="hljs-type">int</span> list[],<span class="hljs-type">const</span> <span class="hljs-type">int</span> length,<span class="hljs-type">bool</span> (*cmp)(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>))</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> list[],<span class="hljs-type">const</span> <span class="hljs-type">int</span> length)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span> <span class="hljs-title">list_length</span><span class="hljs-params">(<span class="hljs-number">6</span>)</span></span>;<br><span class="hljs-type">int</span> a[list_length]&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-built_in">my_sqrt</span>(a,list_length,cmp);<br><span class="hljs-built_in">show</span>(a,list_length);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//比较函数 </span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-keyword">return</span> a&lt;b;<br>&#125;<br><span class="hljs-comment">//交换函数 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> *a,<span class="hljs-type">int</span> *b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> tmpt;<br>tmpt=*a;<br>*a=*b;<br>*b=tmpt;<br>&#125;<br><span class="hljs-comment">//快排函数 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_sqrt</span><span class="hljs-params">(<span class="hljs-type">int</span> list[],<span class="hljs-type">int</span> length,<span class="hljs-type">bool</span> (*cmp)(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>))</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">l</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">tmpt</span><span class="hljs-params">(list[l])</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">right</span><span class="hljs-params">(length<span class="hljs-number">-1</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">r</span><span class="hljs-params">(length<span class="hljs-number">-1</span>)</span></span>;<br><span class="hljs-keyword">if</span>(l&gt;=r)<span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">while</span>(l!=r)<br>&#123;<br><span class="hljs-comment">//找第一个小于tmpt ，即当tmpt小于list[r]时则循环 </span><br><span class="hljs-keyword">while</span>(l&lt;r&amp;&amp;(((*cmp)(tmpt,list[r]))||list[r]==tmpt))<br>&#123;<br>r--;<br>&#125;<br><span class="hljs-comment">//找第一个大于tmpt ，即当list[l]小于tmpt时则循环 </span><br><span class="hljs-keyword">while</span>(l&lt;r&amp;&amp;(((*cmp)(list[l],tmpt))||list[l]==tmpt))<br>&#123;<br>l++;<br>&#125;<br><span class="hljs-comment">//把右边小于tmpt的和左边大于tmpt的交换 </span><br><span class="hljs-keyword">if</span>(l&lt;r)<span class="hljs-built_in">swap</span>(list+l,list+r);<br>&#125;<br><span class="hljs-comment">//交换list[l]和基准tmpt </span><br>*list=list[l];<br>list[l]=tmpt;<br><span class="hljs-comment">//递归 </span><br><span class="hljs-built_in">my_sqrt</span>(list,l+<span class="hljs-number">1</span>,cmp);<br><span class="hljs-built_in">my_sqrt</span>(list+l+<span class="hljs-number">1</span>,right-l,cmp);<br>&#125;<br><span class="hljs-comment">//展示函数 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> list[],<span class="hljs-type">const</span> <span class="hljs-type">int</span> length)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)<br>&#123;<br>cout&lt;&lt;list[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//手写数组快排函数 </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(T a,T b)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(T *a,T *b)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_sqrt</span><span class="hljs-params">(T list[],<span class="hljs-type">const</span> <span class="hljs-type">int</span> length,<span class="hljs-type">bool</span> (*cmp)(T,T))</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> T list[],<span class="hljs-type">const</span> <span class="hljs-type">int</span> length)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span> <span class="hljs-title">list_length</span><span class="hljs-params">(<span class="hljs-number">6</span>)</span></span>;<br><span class="hljs-type">int</span> a[list_length]&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">float</span> b[list_length]&#123;<span class="hljs-number">5.0</span>,<span class="hljs-number">7.0</span>,<span class="hljs-number">4.0</span>,<span class="hljs-number">3.3</span>,<span class="hljs-number">3.2</span>,<span class="hljs-number">9.9</span>&#125;;<br><span class="hljs-built_in">my_sqrt</span>(a,list_length,cmp);<br><span class="hljs-built_in">show</span>(a,list_length);<br><span class="hljs-built_in">my_sqrt</span>(b,list_length,cmp);<br><span class="hljs-built_in">show</span>(b,list_length);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//比较函数 </span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(T a,T b)</span></span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-keyword">return</span> a&lt;b;<br>&#125;<br><span class="hljs-comment">//交换函数 </span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(T *a,T *b)</span></span><br><span class="hljs-function"></span>&#123;<br>T tmpt;<br>tmpt=*a;<br>*a=*b;<br>*b=tmpt;<br>&#125;<br><span class="hljs-comment">//快排函数 </span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_sqrt</span><span class="hljs-params">(T list[],<span class="hljs-type">int</span> length,<span class="hljs-type">bool</span> (*cmp)(T,T))</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">l</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-function">T <span class="hljs-title">tmpt</span><span class="hljs-params">(list[l])</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">right</span><span class="hljs-params">(length<span class="hljs-number">-1</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">r</span><span class="hljs-params">(length<span class="hljs-number">-1</span>)</span></span>;<br><span class="hljs-keyword">if</span>(l&gt;=r)<span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">while</span>(l!=r)<br>&#123;<br><span class="hljs-comment">//找第一个小于tmpt ，即当tmpt小于list[r]时则循环 </span><br><span class="hljs-keyword">while</span>(l&lt;r&amp;&amp;(((*cmp)(tmpt,list[r]))||list[r]==tmpt))<br>&#123;<br>r--;<br>&#125;<br><span class="hljs-comment">//找第一个大于tmpt ，即当list[l]小于tmpt时则循环 </span><br><span class="hljs-keyword">while</span>(l&lt;r&amp;&amp;(((*cmp)(list[l],tmpt))||list[l]==tmpt))<br>&#123;<br>l++;<br>&#125;<br><span class="hljs-comment">//把右边小于tmpt的和左边大于tmpt的交换 </span><br><span class="hljs-keyword">if</span>(l&lt;r)<span class="hljs-built_in">swap</span>(list+l,list+r);<br>&#125;<br><span class="hljs-comment">//交换list[l]和基准tmpt </span><br>*list=list[l];<br>list[l]=tmpt;<br><span class="hljs-comment">//递归 </span><br><span class="hljs-built_in">my_sqrt</span>(list,l+<span class="hljs-number">1</span>,cmp);<br><span class="hljs-built_in">my_sqrt</span>(list+l+<span class="hljs-number">1</span>,right-l,cmp);<br>&#125;<br><span class="hljs-comment">//展示函数 </span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> T list[],<span class="hljs-type">const</span> <span class="hljs-type">int</span> length)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)<br>&#123;<br>cout&lt;&lt;list[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>array的两种函数传参方式比较</title>
    <link href="/2022/10/29/C++/array%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83/"/>
    <url>/2022/10/29/C++/array%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span> <span class="hljs-title">array_size</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fill</span><span class="hljs-params">(array&lt;<span class="hljs-type">int</span>,array_size&gt; *a)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(array&lt;<span class="hljs-type">int</span>,array_size&gt; a)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show2</span><span class="hljs-params">(<span class="hljs-type">const</span> array&lt;<span class="hljs-type">int</span>,array_size&gt; *a)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>array&lt;<span class="hljs-type">int</span>,array_size&gt; a;<br><span class="hljs-built_in">fill</span>(&amp;a);<br><span class="hljs-built_in">show</span>(a);<br><span class="hljs-built_in">show2</span>(&amp;a);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fill</span><span class="hljs-params">(array&lt;<span class="hljs-type">int</span>,array_size&gt; *a)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;array_size;i++)<br>&#123;<br>(*a)[i]=i;<br>&#125;<br>&#125; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(array&lt;<span class="hljs-type">int</span>,array_size&gt; a)</span><span class="hljs-comment">//该函数将传入的array对象的复制了一份副本，这样会导致效率很低 </span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;array_size;i++)<br>&#123;<br>cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show2</span><span class="hljs-params">(<span class="hljs-type">const</span> array&lt;<span class="hljs-type">int</span>,array_size&gt; *a)</span><span class="hljs-comment">//这种方法则效率比较高，因为传入的是一个指针 </span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;array_size;i++)<br>&#123;<br>cout&lt;&lt;(*a)[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>检测输入了非法数据的例子</title>
    <link href="/2022/10/29/C++/%E6%A3%80%E6%B5%8B%E8%BE%93%E5%85%A5%E4%BA%86%E9%9D%9E%E6%B3%95%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BE%8B%E5%AD%90/"/>
    <url>/2022/10/29/C++/%E6%A3%80%E6%B5%8B%E8%BE%93%E5%85%A5%E4%BA%86%E9%9D%9E%E6%B3%95%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BE%8B%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fill_array</span><span class="hljs-params">(<span class="hljs-type">double</span> ar[],<span class="hljs-type">int</span> limit)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">double</span> array[<span class="hljs-number">25</span>];<br>cout&lt;&lt;<span class="hljs-built_in">fill_array</span>(array,<span class="hljs-number">25</span>);<br>&#125; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fill_array</span><span class="hljs-params">(<span class="hljs-type">double</span> ar[],<span class="hljs-type">int</span> limit)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">double</span> temp;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;limit;i++)<br>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Enter value #&quot;</span>&lt;&lt;(i+<span class="hljs-number">1</span>)&lt;&lt;<span class="hljs-string">&quot;:&quot;</span>;<br>cin&gt;&gt;temp;<br><span class="hljs-keyword">if</span>(!cin)<br>&#123;<br>cin.<span class="hljs-built_in">clear</span>();<span class="hljs-comment">//清除输入标志位 </span><br><span class="hljs-keyword">while</span>(cin.<span class="hljs-built_in">get</span>()!=<span class="hljs-string">&#x27;\n&#x27;</span>)<span class="hljs-comment">//清除输入队列内容 </span><br><span class="hljs-keyword">continue</span>;<br>cout&lt;&lt;<span class="hljs-string">&quot;Bad input; input process terminated. \n&quot;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(temp&lt;<span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br>ar[i]=temp;<br>&#125; <br><span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整理文件夹</title>
    <link href="/2022/10/27/Python/%E6%95%B4%E7%90%86%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <url>/2022/10/27/Python/%E6%95%B4%E7%90%86%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>写这个脚本的初衷是学校有一个专业实习，但由于疫情原因，我们是线上上课，老师课后会把视频发在QQ群上面，当我想对这些视频和其他文件进行整理时，非常不乐意，为了一劳永逸，我便写下这个脚本，以便于以后应付这类情况。</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 整理文件夹的工具</span><br><span class="hljs-comment"># 1.遍历文件夹和子文件夹（有无递归）</span><br><span class="hljs-comment"># 2.按日、月、年进行整理（传入枚举型变量）</span><br><span class="hljs-comment"># 3.起始时间到结束时间</span><br><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum<br><br><br><span class="hljs-comment"># 枚举类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Accuracy</span>(<span class="hljs-title class_ inherited__">Enum</span>):<br>    year = <span class="hljs-number">0</span><br>    mouth = <span class="hljs-number">1</span><br>    day = <span class="hljs-number">2</span><br>    hour = <span class="hljs-number">3</span><br>    minute = <span class="hljs-number">4</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IsRecursive</span>(<span class="hljs-title class_ inherited__">Enum</span>):<br>    no = <span class="hljs-number">0</span><br>    yes = <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">in_timerange</span>(<span class="hljs-params">file_path, start_time, end_time</span>):<br>    <span class="hljs-comment"># 切割日期</span><br>    start_time, end_time = re.split(<span class="hljs-string">&#x27;-&#x27;</span>, start_time), re.split(<span class="hljs-string">&#x27;-&#x27;</span>, end_time)<br>    <span class="hljs-comment"># 转换类型</span><br>    start_time, end_time = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, start_time)), <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, end_time))<br>    <span class="hljs-comment"># 列表拆解传参（拆包）</span><br>    start_time, end_time = datetime(*start_time), datetime(*end_time)<br>    <span class="hljs-comment"># 转换类型  这里使用了按访问时间来进行分类，getctime就是创建时间，getmtime就是修改时间</span><br>    file_time = time.localtime(os.path.getmtime(file_path))<br>    file_time = datetime.fromtimestamp(time.mktime(file_time))<br>    <span class="hljs-comment"># 作比较</span><br>    <span class="hljs-keyword">if</span> start_time &lt; file_time &lt; end_time:<br>        <span class="hljs-keyword">return</span> file_time<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sort_dir</span>(<span class="hljs-params">dir_path, start_time, end_time, accuracy, isrecursive=IsRecursive.no, save_path=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    @param dir_path: 目录路径</span><br><span class="hljs-string">    @param start_time: 起始时间</span><br><span class="hljs-string">    @param end_time: 结束时间</span><br><span class="hljs-string">    @param accuracy: 精度，也就是分类精确到年月日</span><br><span class="hljs-string">    @param isrecursive: 是否进行递归</span><br><span class="hljs-string">    @param save_path:存储路径，一般会和递归搭配使用</span><br><span class="hljs-string">    @return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 如果文件夹路径不是以&#x27;\&#x27;结尾，则补上</span><br>    <span class="hljs-keyword">if</span> dir_path[-<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;\\&#x27;</span>:<br>        dir_path += <span class="hljs-string">&#x27;\\&#x27;</span><br>    <span class="hljs-comment"># 如果存储路径没有指定，就默认为同级目录,选用递归时一般会指定存储路径</span><br>    <span class="hljs-keyword">if</span> save_path <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        save_path = dir_path<br>    <span class="hljs-keyword">if</span> save_path[-<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;\\&#x27;</span>:<br>        save_path += <span class="hljs-string">&#x27;\\&#x27;</span><br>    <span class="hljs-comment"># dir_list：目录路径</span><br>    dir_list = os.listdir(dir_path)<br>    <span class="hljs-comment"># 遍历目录</span><br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> dir_list:<br>        <span class="hljs-comment"># file_path：文件路径</span><br>        file_path = dir_path + file.title()<br>        <span class="hljs-comment"># 如果选择递归且为文件夹，则进行递归操作</span><br>        <span class="hljs-keyword">if</span> isrecursive:<br>            <span class="hljs-keyword">if</span> os.path.isdir(file_path):<br>                sort_dir(file_path, start_time, end_time, accuracy, isrecursive=IsRecursive.no, save_path=save_path)<br>        <span class="hljs-comment"># tmp：在日期区间内则为创建时间，否则则为0</span><br>        tmp = in_timerange(file_path, start_time, end_time)<br>        <span class="hljs-comment"># 如果tmp在日期区间内，则要移动它到指定文件夹</span><br>        <span class="hljs-keyword">if</span> tmp:<br>            <span class="hljs-comment"># 分割日期字符串，便于操作</span><br>            tmp = re.split(<span class="hljs-string">&#x27;-| |,|:&#x27;</span>, <span class="hljs-built_in">str</span>(tmp))<br>            <span class="hljs-comment"># s：要创建的文件夹名字 年-月-日</span><br>            s = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-comment"># j：为了下面创建的文件夹不要多出一个&#x27;-&#x27;</span><br>            j = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tmp[<span class="hljs-number">0</span>:accuracy.value + <span class="hljs-number">1</span>]:<br>                s += i<br>                <span class="hljs-keyword">if</span> j != accuracy.value:<br>                    s += <span class="hljs-string">&#x27;-&#x27;</span><br>                j += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># make_dir：创建的文件夹路径</span><br>            make_dir = save_path + s<br>            <span class="hljs-comment"># 文件夹不存在则创建</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(make_dir):<br>                os.mkdir(make_dir)<br>            <span class="hljs-comment"># 移动文件到指定文件夹</span><br>            shutil.move(file_path, make_dir)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    sort_dir(<span class="hljs-string">&quot;E:\\2022&quot;</span>, <span class="hljs-string">&quot;2020-10-10&quot;</span>, <span class="hljs-string">&quot;2022-12-30&quot;</span>, Accuracy.day, IsRecursive.yes,save_path=<span class="hljs-string">&quot;E:\\2022&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>存储器扩展</title>
    <link href="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/"/>
    <url>/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h2 id="存储元和存储单元"><a href="#存储元和存储单元" class="headerlink" title="存储元和存储单元"></a>存储元和存储单元</h2><p>在讲位扩展和字扩展之前，我们先来说一下存储元和存储单元。</p><h3 id="存储元"><a href="#存储元" class="headerlink" title="存储元"></a>存储元</h3><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502161450795.png" alt="image-20220502161450795"></p><p>百度百科里介绍到，任何具有两个稳定状态的物理器件都可以用来做存储元。也就是说，既然存储元只有两种状态，我们就可以把它相当于一位二进制数（只有0或1两种状态）。如下图，我们用一个小箱子来表示一个存储单元，它可以输出0或1。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502163628268.png" alt="image-20220502163628268"></p><h3 id="存储单元"><a href="#存储单元" class="headerlink" title="存储单元"></a>存储单元</h3><p>我们买来了四个存储元，将它们输出到一个4位的寄存器上。我们称这样一组输出到同一寄存器上（也就是连接到同一寄存器上）的存储元为一个==存储单元==。而一个存储单元有多少个存储元，我们就说==字长==是多少位。而存储单元输出的一个数据（本例中为一个4位的数据1011），我们称之为==存储字==。而将存储元连接到寄存器MDR上的蓝线我们称之为==数据线==，一个存储单元有多少个存储元就有多少根数据线。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502170228183.png" alt="image-20220502170228183"></p><p>位扩展和字扩展里面的位和字就是这么一回事，要理解好了位和字才能学好后面的位扩展和位扩展。</p><h3 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h3><p>为了存储4个4位的数据，我们买来了4个4位存储单元，或者说买来了16个存储元，然后把它们都输出到MDR上，如下图。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502170244930.png" alt="image-20220502170244930"></p><p>然后我们会发现一个问题，就是MDR寄存器它不知道要听一个存储单元（或者说哪一组存储元）的，第一个存储单元想要输出1011，第二个存储单元想要输出1010，那这种情况要怎么办？答案其实也很简单，只能存4位数据（实际上MDR可以存8位数据，这里为了方便我就用4位来举例）的MDR不可能同时接收多个4位数据。所以我们只能选择接收其中一个存储单元的数据。如下图，我们增加了红色的线来选择要将哪个存储单元的数据输出到MDR上，只有当红色线提供的数据为1时，对应的存储单元数据才会被输出，所以这4根红色线中只能同时有一根线为1。图中只有第一根红线为1，所以只有第一个存储单元的数据会被输出到MDR上。</p><p>然后我们又买来了一个译码器，用来把1或0送到红色线上。输入译码器的紫色线我们称之为==地址线==。如果紫色线为00，就是只有从上往下数第4根红色线为1；如果紫色线为01，第3根红色线为1；如果紫色线是10，则只有第2根红色线为1；如果紫色线是11，则只有第1根红色线为1。我们可以知道，一个地址（图中2根地址线组成的数字00,01那些）就对应一根红色线为1。一个地址是每一位都只能为0或1，所以有2根地址线就有2×2共4种状态，有3根地址线就有2×2×2共8种状态。也就是说，有多少根地址线，输出的地址就有2的多少次方种状态，就可以对应多少个存储单元。</p><p>总容量=存储单元个数（2^地址线根数） * 存储字长（数据线根数）</p><p>如下面要讲的1K×8bit的存储器，就是2的10次方个存储单元，10根地址线，存储字长为8bit，数据线有8根。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502171857968.png" alt="image-20220502171857968"></p><h2 id="位扩展和字扩展"><a href="#位扩展和字扩展" class="headerlink" title="位扩展和字扩展"></a>位扩展和字扩展</h2><p>进入本文正题，位扩展和字扩展。</p><h3 id="位扩展（增加存储字长）"><a href="#位扩展（增加存储字长）" class="headerlink" title="位扩展（增加存储字长）"></a>位扩展（增加存储字长）</h3><p>问题：用（2）片 1K×4位 存储芯片组成 1K×8位的存储器（10根地址线，8根数据线）</p><p>由于增加的是存储字长，也是就是说增加一个字的位数。我们可以这样设计：拿一片1K×4位 存储芯片作为高4位，再拿一片1K×4位 存储芯片作为低4位，这样我们的存储字长就从4位增加到了8位。</p><p>D7~D0为8根数据线，对应8位数据。我们先将两个1K×4位的存储芯片分别接到数据线的高四位和低四位。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502175558181.png" alt="image-20220502175558181"></p><p>然后我们将两个1K×4位的存储芯片接到同样的地址线上面，表示他们同时工作。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502180336275-16516428803801.png" alt="image-20220502180336275"></p><p>然后我们再将两个1K×4位的存储芯片接到同样的片选线CS和读写控制线WE上，同样表示他们同时进行工作。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502181545575.png" alt="image-20220502181545575"></p><h3 id="字扩展-增加存储字的数量"><a href="#字扩展-增加存储字的数量" class="headerlink" title="字扩展(增加存储字的数量)"></a>字扩展(增加存储字的数量)</h3><p>问题：用（2）片 1K×8位存储芯片组成2K×8位的存储器。（11根地址线，8根数据线）</p><p>由于增加的是存储字的数量，也是就是说增加存储单元的数量。我们可以这样设计：1片1K×8位存储芯片有2^10个存储单元，一个2K×8位的存储器的2^11个存储单元，所以我们直接拿两片1K×8位存储芯片就可以达到目的，功德圆满。</p><p> 我们先把两片1K×8位存储芯片接到同样的地址线上，但由于这两片芯片不能同时工作（一个地址怎么能对应多户人家（数据）呢），我们得再增加一位地址，来表示是使用了哪一片1K×8位的存储芯片，这也是片选线的意义所在（如下下图所示）。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502182512174.png" alt="image-20220502182512174"></p><p>如下图，我们增加了一位地址A10，并将两片1K×8位存储芯片的片选线接到上面，然后增加了一个取反器。这样一来第一个1K×8位存储芯片的地址为0xxxxxxxxxx，而第二个1K×8位存储芯片的地址为1xxxxxxxxxx。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502183403715.png" alt="image-20220502183403715"></p><p>然后将数据线和读写控制线都给接上</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502184054987.png" alt="image-20220502184054987"></p><h3 id="字位同时扩展"><a href="#字位同时扩展" class="headerlink" title="字位同时扩展"></a>字位同时扩展</h3><p>问题：用（8）片 1K×4位的存储芯片组成4K×8位的存储器。（12根地址线，8根数据线）</p><p>我们先进行位扩展，也就是用2片1K×4位的存储芯片将位数扩展到8位。然后进行字扩展，我们可以把前面2片1K×4位的存储芯片看为1组1K×8位的存储芯片，然后我们需要4组1K×8位的存储芯片才能扩展为4K×8位的存储器，也就是4×2片1K×4位的存储芯片。</p><p>我们先将每两片1K×4位的存储芯片作为1组接到数据线上，一共4组。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502185536432.png" alt="image-20220502185536432"></p><p>再将这四组存储芯片接到同样的地址线上，但由于这四组存储芯片不能同时工作，我们需要增加地址，来表示选择哪一组存储芯片（下下图）。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502190534482.png" alt="image-20220502190534482"></p><p>我们为这四组存储芯片都加了片选线（如下图），同一组芯片是同时工作的，所以他们需要接收到同样的片选信号。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502191047467.png" alt="image-20220502191047467"></p><p>再将读写控制线接上，功德圆满。</p><p><img src="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/image-20220502191404221.png" alt="image-20220502191404221"></p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
