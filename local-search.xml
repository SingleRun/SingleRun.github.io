<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>9.拦截器</title>
    <link href="/2022/12/29/SpringMVC/9.%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <url>/2022/12/29/SpringMVC/9.%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>在Spring MVC中，处理请求的流程大致如下：</strong></p><ol><li>用户在浏览器地址栏输入网址并发送请求。</li><li>服务器接收到请求后，会先经过过滤器的过滤。</li><li>过滤器通过后，请求会被前端控制器（DispatcherServlet）接收。</li><li>前端控制器根据请求的URL将请求转发到对应的控制器方法。</li><li>控制器方法处理完请求后，会返回一个视图名称，用于告知前端控制器要跳转到哪个视图。</li><li>前端控制器根据视图名称调用视图解析器，并将视图解析成实际的HTML、JSP等文件。</li><li>最后，前端控制器将解析出的视图发送给浏览器，浏览器渲染视图并呈现给用户。</li></ol><p>在上述流程中，拦截器最早会在前端控制器之前进行拦截。</p><p><strong>拦截器的执行流程大致如下：</strong></p><ol><li>前端控制器接收到请求后，会依次调用所有拦截器的preHandle方法进行预处理。</li><li>如果所有拦截器的preHandle方法都返回true，则会执行控制器方法。</li><li>控制器方法处理完请求后，会依次调用所有拦截器的applyPostHandle方法进行后置处理。</li><li>最后，前端控制器会调用视图解析器，将视图解析成实际的HTML、JSP等文件，并发送给浏览器。</li><li>当浏览器接收到响应后，前端控制器会依次调用所有拦截器的triggerAfterCompletion方法进行资源清理。</li></ol><h1 id="创建拦截器"><a href="#创建拦截器" class="headerlink" title="创建拦截器"></a>创建拦截器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FirstInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span><br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;FirstInterceptor---&gt;preHandle&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;FirstInterceptor---&gt;postHandle&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;FirstInterceptor---&gt;afterCompletion&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h1><h2 id="直接配置"><a href="#直接配置" class="headerlink" title="直接配置"></a>直接配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置拦截器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.c4n.demo.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后就可以进行测试了</p><h2 id="ref标签"><a href="#ref标签" class="headerlink" title="ref标签"></a>ref标签</h2><p>我们将类FirstInterceptor标识为普通bean组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FirstInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>然后在springMVC.xml中用ref标签将其引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置拦截器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="mvc-interceptor标签"><a href="#mvc-interceptor标签" class="headerlink" title="mvc:interceptor标签"></a>mvc:interceptor标签</h2><p>这个标签可以设置拦截规则</p><h3 id="配置拦截器-1"><a href="#配置拦截器-1" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><p>我们尝试不拦截首页，而拦截其他全部页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置拦截器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/*&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="创建index-html"><a href="#创建index-html" class="headerlink" title="创建index.html"></a>创建index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testInterceptor&#125;&quot;</span>&gt;</span>测试拦截器<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="创建控制器"><a href="#创建控制器" class="headerlink" title="创建控制器"></a>创建控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span><br>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/**/testInterceptor&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testInterceptor</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>我们访问<a href="http://localhost:8081/springMVC_demo06%EF%BC%8C%E5%8F%91%E7%8E%B0%E9%A6%96%E9%A1%B5%E6%B2%A1%E6%9C%89%E8%A2%AB%E6%8B%A6%E6%88%AA">http://localhost:8081/springMVC_demo06，发现首页没有被拦截</a><br>然后我们访问<a href="http://localhost:8081/springMVC_demo06/testInterceptor%EF%BC%8C%E5%8F%91%E7%8E%B0%E8%A2%AB%E6%8B%A6%E6%88%AA%E4%BA%86">http://localhost:8081/springMVC_demo06/testInterceptor，发现被拦截了</a><br>然后我们再访问<a href="http://localhost:8081/springMVC_demo06/a/testInterceptor%EF%BC%8C%E5%8F%91%E7%8E%B0%E6%B2%A1%E6%9C%89%E8%A2%AB%E6%8B%A6%E6%88%AA">http://localhost:8081/springMVC_demo06/a/testInterceptor，发现没有被拦截</a></p><h3 id="修改拦截器"><a href="#修改拦截器" class="headerlink" title="修改拦截器"></a>修改拦截器</h3><p>根据测试结果，说明配置拦截器时 path=”/*” 只能拦截一层目录，如果想要拦截除首页外所有页面的话，得这样配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置拦截器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="多个拦截器的执行顺序"><a href="#多个拦截器的执行顺序" class="headerlink" title="多个拦截器的执行顺序"></a>多个拦截器的执行顺序</h1><p>preHandle会按我们配置的顺序执行，而postHandle和afterCompletion则是按配置顺序的逆序执行</p><p>其实这是通过查看源码获取的信息，我们需要在这几行打上断点，代码很简单，自己追进去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">531</span> <span class="hljs-keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response))<br><span class="hljs-number">541</span> mappedHandler.applyPostHandle(processedRequest, response, mv);<br><span class="hljs-number">558</span> mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);<br></code></pre></td></tr></table></figure><h1 id="preHandle返回false时"><a href="#preHandle返回false时" class="headerlink" title="preHandle返回false时"></a>preHandle返回false时</h1><p>我们让第二个拦截器的preHandle返回false：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception<br>&#123;<br>    System.out.println(<span class="hljs-string">&quot;SecondInterceptor---&gt;preHandle&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们会发现输出是这样的：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">FirstInterceptor---&gt;preHandle<br>SecondInterceptor---&gt;preHandle<br>FirstInterceptor---&gt;afterCompletion<br></code></pre></td></tr></table></figure><p>在拦截器preHandle返回false之前的拦截器的afterCompletion都会执行。</p><p>我们可以观察applyPreHandle源码得到这个结论，这下面空间比较多就写下代码哈哈：</p><p>先看到72行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">applyPreHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.interceptorList.size(); <span class="hljs-built_in">this</span>.interceptorIndex = i++) &#123;<br>        <span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> (HandlerInterceptor)<span class="hljs-built_in">this</span>.interceptorList.get(i);<br>        <span class="hljs-keyword">if</span> (!interceptor.preHandle(request, response, <span class="hljs-built_in">this</span>.handler)) &#123;<br>            <span class="hljs-built_in">this</span>.triggerAfterCompletion(request, response, (Exception)<span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们先让interceptorIndex=i，然后再让i++，也就是说，此时的interceptorIndex其实是上一个拦截器的索引。</p><p>然后观察if条件语句里面的代码，发现我们会调用triggerAfterCompletion(request, response, (Exception)null)函数，</p><p>我们再点进这个函数的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">triggerAfterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, <span class="hljs-meta">@Nullable</span> Exception ex)</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.interceptorIndex; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>        <span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> (HandlerInterceptor)<span class="hljs-built_in">this</span>.interceptorList.get(i);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            interceptor.afterCompletion(request, response, <span class="hljs-built_in">this</span>.handler, ex);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable var7) &#123;<br>            logger.error(<span class="hljs-string">&quot;HandlerInterceptor.afterCompletion threw exception&quot;</span>, var7);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，我们让i初值为上一个拦截器的索引，对于索引为i以及前面的拦截器，我们都在try里去调用interceptor.afterCompletion()方法。</p><p>然后我们再回来看下DispatcherServlet.class的531行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>他调用了applyPreHandle，而applyPreHandle里面如果preHandle为false就会返回false所以这里531行的if语句就会为true。</p><p>所以就return了，后面的代码就都不会执行了，所以postHandle()方法就都不会执行。</p>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8.文件上传和下载</title>
    <link href="/2022/12/29/SpringMVC/8.%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/"/>
    <url>/2022/12/29/SpringMVC/8.%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="下载功能"><a href="#下载功能" class="headerlink" title="下载功能"></a>下载功能</h1><p>ResponseEntity实现下载功能</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>导入图片<code>src/main/webapp/static/img/test.jpg</code></p><p>开放静态资源访问权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/file&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testDown&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="hljs-keyword">throws</span> IOException<br>&#123;<br>    <span class="hljs-comment">//获取ServletContext对象</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    <span class="hljs-comment">//获取服务器中文件的真实路径,也就是部署到Tomcat服务器中的路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> servletContext.getRealPath(<span class="hljs-string">&quot;/static/img/test.jpg&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;部署路径：&quot;</span>+realPath);<br>    <span class="hljs-comment">//创建输入流</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(realPath);<br>    <span class="hljs-comment">//创建字节数组</span><br>    <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[is.available()];<br>    <span class="hljs-comment">//将流读到字节数组中</span><br>    is.read(bytes);<br>    <span class="hljs-comment">//创建HttpHeaders对象设置响应头信息</span><br>    MultiValueMap&lt;String, String&gt; headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>    <span class="hljs-comment">//设置要下载方式以及下载文件的名字</span><br>    headers.add(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=test.jpg&quot;</span>);<br>    <span class="hljs-comment">//设置响应状态码</span><br>    <span class="hljs-type">HttpStatus</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> HttpStatus.OK;<br>    <span class="hljs-comment">//创建ResponseEntity对象</span><br>    ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; responseEntity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(bytes, headers,<br>            statusCode);<br>    <span class="hljs-comment">//关闭输入流</span><br>    is.close();<br>    <span class="hljs-keyword">return</span> responseEntity;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编写file-html"><a href="#编写file-html" class="headerlink" title="编写file.html"></a>编写file.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试文件上传和下载<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testDown&#125;&quot;</span>&gt;</span>下载test.jpg图片<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后运行maven的怕package命令重新打包，把静态资源打包到target里面就可以测试了。</p><h1 id="上传功能"><a href="#上传功能" class="headerlink" title="上传功能"></a>上传功能</h1><h2 id="编写file-html-1"><a href="#编写file-html-1" class="headerlink" title="编写file.html"></a>编写file.html</h2><p>其中<code>enctype=&quot;multipart/form-data&quot;</code>代表表单数据是二进制编码格式，并可以同时上传多个文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/testUp&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    头像：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;photo&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="配置文件解析器"><a href="#配置文件解析器" class="headerlink" title="配置文件解析器"></a>配置文件解析器</h2><p>注意springMVC是通过id获取的，得填入id，并且id值为”multipartResolver”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="编写控制器-1"><a href="#编写控制器-1" class="headerlink" title="编写控制器"></a>编写控制器</h2><p>先尝试编写这样的控制器，试试是否能正常获取到MultipartFile对象</p><p>photo.getName()是表单提交时的属性名，photo.getOriginalFilename()是上传的文件名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/testUp&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testUp</span><span class="hljs-params">(MultipartFile photo)</span><br>&#123;<br>    System.out.println(photo.getName());<br>    System.out.println(photo.getOriginalFilename());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后实现上传功能，这里把用户上传的文件保存到我们Tomcat服务器的”/photo”目录下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/testUp&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testUp</span><span class="hljs-params">(MultipartFile photo, HttpSession session)</span> <span class="hljs-keyword">throws</span> IOException<br>&#123;<br>    String filename=photo.getOriginalFilename();<br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.;<br>    String photoPath=servletContext.getRealPath(<span class="hljs-string">&quot;photo&quot;</span>);<br>    String finalPath=photoPath+File.separator+filename;<br>    photo.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(finalPath));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，这里你不必通过session来获取context，但你也不能直接在形参列表写入一个ServletContext，你可以在类中创建一个servletContext，然后使用@Autowired注解进行自动注入。</p><p>Web容器在启动Web应用时，会创建一个ServletContext对象，并将其注入到Web应用中。Spring看到@Autowired就会把这个对象(org.apache.catalina.core.ApplicationContextFacade)注入到servletContext中。</p><h2 id="保存目录不存在问题"><a href="#保存目录不存在问题" class="headerlink" title="保存目录不存在问题"></a>保存目录不存在问题</h2><p>但由于我们的”/photo”目录可能并不存在，所以我们此时就需要新建一个目录，或者我们也可能通过file.exist()进行判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//判断保存目录是否存在</span><br>File file=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(photoPath);<br><span class="hljs-keyword">if</span> (!file.exists())<br>&#123;<br>    file.mkdir();<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就可以重新部署对上传功能进行测试了，上传的文件会保存在target目录下，如果我们有自己的文件上传服务器的话，就不用放在Tomcat下，可以放在文件上传服务器下。</p><h2 id="文件重名问题"><a href="#文件重名问题" class="headerlink" title="文件重名问题"></a>文件重名问题</h2><p>使用UUID处理文件重名问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取上传的文件的文件名</span><br>String filename=photo.getOriginalFilename();<br><span class="hljs-comment">//获取上传的文件的后缀名</span><br>String suffixName=filename.substring(filename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><span class="hljs-comment">//将UUID作为文件名</span><br>String uuid= UUID.randomUUID().toString();<br><span class="hljs-comment">//将uuid和后缀名拼接后的结果作为最终的文件名</span><br>filename=uuid+suffixName;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7.HttpMessageConverter</title>
    <link href="/2022/12/28/SpringMVC/7.HttpMessageConverter/"/>
    <url>/2022/12/28/SpringMVC/7.HttpMessageConverter/</url>
    
    <content type="html"><![CDATA[<p>HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文 </p><p>HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody， RequestEntity， ResponseEntity</p><h1 id="RequestBody注解"><a href="#RequestBody注解" class="headerlink" title="@RequestBody注解"></a>@RequestBody注解</h1><p>@RequestBody注解用于获取请求体信息</p><h2 id="创建表单"><a href="#创建表单" class="headerlink" title="创建表单"></a>创建表单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/testRequestBody&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;测试@RequestBody&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="创建控制器"><a href="#创建控制器" class="headerlink" title="创建控制器"></a>创建控制器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpController</span><br>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/testRequestBody&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestBody</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String requestBody)</span><br>    &#123;<br>        System.out.println(requestBody);<span class="hljs-comment">// username=aaa%40163.com&amp;password=dsa</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="RequestEntity类型"><a href="#RequestEntity类型" class="headerlink" title="RequestEntity类型"></a>RequestEntity类型</h1><h2 id="创建表单-1"><a href="#创建表单-1" class="headerlink" title="创建表单"></a>创建表单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/testRequestEntity&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;测试RequestEntity&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="创建控制器-1"><a href="#创建控制器-1" class="headerlink" title="创建控制器"></a>创建控制器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestEntity</span><span class="hljs-params">(RequestEntity&lt;String&gt; requestEntity)</span><br>&#123;<br>    System.out.println(requestEntity.getHeaders());<br>    System.out.println(requestEntity.getBody());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="ResponseBody注解"><a href="#ResponseBody注解" class="headerlink" title="@ResponseBody注解"></a>@ResponseBody注解</h1><p>直接在返回值中设置响应体的内容</p><h2 id="响应一个字符串"><a href="#响应一个字符串" class="headerlink" title="响应一个字符串"></a>响应一个字符串</h2><h3 id="创建超链接"><a href="#创建超链接" class="headerlink" title="创建超链接"></a>创建超链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testResponseBody&#125;&quot;</span>&gt;</span>测试ResponseBody<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="创建控制器-2"><a href="#创建控制器-2" class="headerlink" title="创建控制器"></a>创建控制器</h3><p>由于 @ResponseBody 注解直接将方法的返回值作为 HTTP 响应的正文返回，因此，它并不需要使用视图解析器来解析视图以生成响应页面，自然也就不会经过过滤器的处理。</p><p>记住，由于web.xml 文件是用来配置 Servlet 应用程序的，如果你使用视图解析器来解析视图并生成响应页面，那么这个响应页面就是一个 Servlet生成的页面，在这种情况下，你可以在 web.xml 中配置过滤器来对这个响应页面进行过滤。</p><p>回到正题，我们得设置一下UTF-8编码，也就是<code>produces=&quot;text/plain;charset=UTF-8&quot;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/testResponseBody&quot;,produces=&quot;text/plain;charset=UTF-8&quot;)</span><br><span class="hljs-meta">@ResponseBody()</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testResponseBody</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;测试ResponseBody&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码到这里就结束了，可以尝试部署看一下效果</p><h2 id="响应一个对象"><a href="#响应一个对象" class="headerlink" title="响应一个对象"></a>响应一个对象</h2><p>注意，直接使用@ResponseBody是不能响应一个对象的。</p><p>我们可以尝试这样一个场景，我们拥有这样一个类，并创建了有参构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span><br>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String sex;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建一个控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/testUser&quot;)</span><br><span class="hljs-meta">@ResponseBody()</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">testUser</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><p> 编写超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testUser&#125;&quot;</span>&gt;</span>测试User<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后我们会发现请求到的响应页面报错了，其实我们可以使用json作为一个中介来实现这个功能。</p><h3 id="导入Jackson-databind"><a href="#导入Jackson-databind" class="headerlink" title="导入Jackson-databind"></a>导入Jackson-databind</h3><p>Jackson提供了用于序列化和反序列化 Java 对象的功能。它可以将 Java 对象转换成 JSON 格式的字符串，也可以将 JSON 格式的字符串转换成 Java 对象。</p><p>jackson-databind 模块是 Jackson 库的核心模块，提供了将 Java 对象序列化成 JSON 字符串、反序列化成 Java 对象的功能。jackson-core 模块则提供了底层的 JSON 解析功能， 常用于将 Java 对象转换成 JSON 格式的字符串，并使用 @ResponseBody 注解将 JSON 格式的字符串作为 HTTP 响应的正文返回。</p><p>如果你在 Maven 项目中使用了 jackson-databind 模块，则该模块会自动包含 jackson-core 模块。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.13.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：如果你希望使用 Jackson-core 库将 Java 对象序列化成 JSON 格式的字符串，则需要满足一些要求：</p><ol><li>需要序列化的 Java 类需要有一个无参的构造方法。Jackson-core 库在序列化对象时，会先通过无参的构造方法创建一个新的对象，然后将属性的值写入新对象中。</li><li>需要序列化的 Java 类的属性需要有对应的 getter 和 setter 方法。Jackson-core 库在序列化对象时，会调用属性的 getter 方法获取属性值，并将属性值写入 JSON 格式的字符串中。</li></ol><h3 id="启用对-Jackson-库的支持"><a href="#启用对-Jackson-库的支持" class="headerlink" title="启用对 Jackson 库的支持"></a>启用对 Jackson 库的支持</h3><p>下面这个标签除了开启mvc的注解驱动外，其实还有其他功能，比如启用对 Jackson 库的支持。当你在项目中引入了 Jackson 库后，Spring MVC 就会自动使用 Jackson 库来解析和生成 JSON 格式的数据。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>如果你希望使用自定义的方式来解析和生成 JSON 格式的数据，或者不希望使用 HTTP 请求参数和返回值的自动绑定功能，则可以不使用 &lt;mvc:annotation-driven /&gt; 标签。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>到这里就结束了，我们重新部署，刷新页面，会发现响应页面输出了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;aa&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">15</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;sex&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="处理ajax"><a href="#处理ajax" class="headerlink" title="处理ajax"></a>处理ajax</h2><p>对于ajax请求，我们需要使用能处理json的依赖，也就是上面的操作流程，导入Jackson-databind</p><h3 id="添加js库"><a href="#添加js库" class="headerlink" title="添加js库"></a>添加js库</h3><p>在<head>标签中加入两个js库。<br>其中axios是一个用于发送Ajax请求的库</head></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="创建超链接-1"><a href="#创建超链接-1" class="headerlink" title="创建超链接"></a>创建超链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;testAxios&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testAxios&#125;&quot;</span>&gt;</span>SpringMVC处理ajax<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="发送ajax请求"><a href="#发送ajax请求" class="headerlink" title="发送ajax请求"></a>发送ajax请求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">testAxios</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">axios</span>(&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">method</span>:<span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">url</span>:event.<span class="hljs-property">target</span>.<span class="hljs-property">href</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">params</span>:&#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">username</span>:<span class="hljs-string">&quot;admin&quot;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">password</span>:<span class="hljs-string">&quot;123456&quot;</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-title function_">alert</span>(response.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">                &#125;);</span><br><span class="language-javascript">                event.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h3><p>由于ajax请求不会跳转页面，所以表现是在一个弹窗内显示”hello,ajax”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testAxios&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testAxios</span><span class="hljs-params">(String username, String password)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot;,password:&quot;</span>+password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello,ajax&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6.RESTFul</title>
    <link href="/2022/12/28/SpringMVC/6.RESTFul/"/>
    <url>/2022/12/28/SpringMVC/6.RESTFul/</url>
    
    <content type="html"><![CDATA[<p>REST（Representational State Transfer 表述性状态转移）是一种软件架构风格。</p><p>RESTFul 是一种实现 REST 架构风格的方式，其中的 “Ful” 指的是 “Full”，意思是完全地实现了 REST 架构风格。</p><h1 id="RESTFul模拟增删改查"><a href="#RESTFul模拟增删改查" class="headerlink" title="RESTFul模拟增删改查"></a>RESTFul模拟增删改查</h1><p>也就是HTTP协议里面的四种基本操作：GET用来获取资源，POST用来新建资源，PUT用来更新资源，DELETE用来删除资源。</p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p><table><thead><tr><th>操作</th><th>传统方式</th><th>REST风格</th></tr></thead><tbody><tr><td>查询操作</td><td>getUserByld?id=1</td><td>user/1–&gt;get请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user–&gt;post请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id=1</td><td>user/1–&gt;delete请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user–&gt;put请求方式</td></tr></tbody></table><h2 id="GET、POST"><a href="#GET、POST" class="headerlink" title="GET、POST"></a>GET、POST</h2><p>由于PUT和DELETE需要用到过滤器，我们放到待会再说，现在模拟GET、POST请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span><br>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用RESTFul模拟增删改查</span><br><span class="hljs-comment">     * /user    GET     查询所有用户信息</span><br><span class="hljs-comment">     * /user/1  GET     根据用户id查询用户信息</span><br><span class="hljs-comment">     * /user    POST    添加用户信息</span><br><span class="hljs-comment">     * /user/1  DELETE  修改用户信息</span><br><span class="hljs-comment">     * /user    PUT     修改用户信息</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAllUser</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;查询所有用户信息&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;,method = RequestMethod.GET)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span><br>    &#123;<br>        System.out.printf(<span class="hljs-string">&quot;查询id为%d的用户信息\n&quot;</span>,id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;,method =RequestMethod.POST)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">insertUser</span><span class="hljs-params">(String username,String password)</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;添加用户信息：[username: &quot;</span>+username+<span class="hljs-string">&quot; password: &quot;</span>+password+<span class="hljs-string">&quot;]&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/user&#125;&quot;</span>&gt;</span>查询所有用户信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/user/1&#125;&quot;</span>&gt;</span>查询特定用户信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/user&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="PUT、DELETE"><a href="#PUT、DELETE" class="headerlink" title="PUT、DELETE"></a>PUT、DELETE</h2><p>编写控制器代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;,method =RequestMethod.PUT)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateUser</span><span class="hljs-params">(String username,String password)</span><br>&#123;<br>    System.out.println(<span class="hljs-string">&quot;修改用户信息：[username: &quot;</span>+username+<span class="hljs-string">&quot; password: &quot;</span>+password+<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>尝试直接更改表单提交的方法为put</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/user&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;put&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;修改&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后我们会发现调用到的其实是查询所有用户信息的控制器，而不是修改用户信息的控制器。<br>这是因为method中没有put，所以就是默认为get请求。</p><p>要想实现put请求，得编写一个隐藏域过滤器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--配置HiddenHttpMethodFilter，如果发现乱码，只需将该过滤器放在编码过滤器下面或者设置优先级即可--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们查看HiddenHttpMethodFilter的代码，发现我们需要请求方式为POST，并且还需要传送一个参数_method，其值为PUT或者DELETE。所以我们需要修改html的代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/user&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;put&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;修改&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样我们就写好了PUT的代码，而DELETE我们通常是通过一个value为”删除”的超链接来进行跳转，而我们超链接又只能使用GET方式，所以应该让超链接绑定一个事件跳转到表单再进行提交。或者你可以直接通过from表单来模拟：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/user&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;DELETE&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>删除用户<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="RESTFul案例"><a href="#RESTFul案例" class="headerlink" title="RESTFul案例"></a>RESTFul案例</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span><br>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String lastName;<br><br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-comment">//1 male, 0 female</span><br>    <span class="hljs-keyword">private</span> Integer gender;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLastName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> lastName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLastName</span><span class="hljs-params">(String lastName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.lastName = lastName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(Integer gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(Integer id, String lastName, String email, Integer gender)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.lastName = lastName;<br>        <span class="hljs-built_in">this</span>.email = email;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建dao模拟数据"><a href="#创建dao模拟数据" class="headerlink" title="创建dao模拟数据"></a>创建dao模拟数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeDao</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        employees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Employee&gt;();<br><br>        employees.put(<span class="hljs-number">1001</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;E-AA&quot;</span>, <span class="hljs-string">&quot;aa@163.com&quot;</span>, <span class="hljs-number">1</span>));<br>        employees.put(<span class="hljs-number">1002</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1002</span>, <span class="hljs-string">&quot;E-BB&quot;</span>, <span class="hljs-string">&quot;bb@163.com&quot;</span>, <span class="hljs-number">1</span>));<br>        employees.put(<span class="hljs-number">1003</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1003</span>, <span class="hljs-string">&quot;E-CC&quot;</span>, <span class="hljs-string">&quot;cc@163.com&quot;</span>, <span class="hljs-number">0</span>));<br>        employees.put(<span class="hljs-number">1004</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1004</span>, <span class="hljs-string">&quot;E-DD&quot;</span>, <span class="hljs-string">&quot;dd@163.com&quot;</span>, <span class="hljs-number">0</span>));<br>        employees.put(<span class="hljs-number">1005</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1005</span>, <span class="hljs-string">&quot;E-EE&quot;</span>, <span class="hljs-string">&quot;ee@163.com&quot;</span>, <span class="hljs-number">1</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">initId</span> <span class="hljs-operator">=</span> <span class="hljs-number">1006</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Employee employee)</span>&#123;<br>        <span class="hljs-keyword">if</span>(employee.getId() == <span class="hljs-literal">null</span>)&#123;<br>            employee.setId(initId++);<br>        &#125;<br>        employees.put(employee.getId(), employee);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Collection&lt;Employee&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> employees.values();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">get</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> employees.get(id);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>&#123;<br>        employees.remove(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查询功能"><a href="#查询功能" class="headerlink" title="查询功能"></a>查询功能</h2><h3 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> EmployeeDao employeeDao;<br><span class="hljs-meta">@GetMapping(&quot;/employee&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">getAllEmployee</span><span class="hljs-params">(ModelAndView modelAndView)</span><br>&#123;<br>    Collection&lt;Employee&gt; employeeList = employeeDao.getAll();<br>    modelAndView.addObject(<span class="hljs-string">&quot;employeeList&quot;</span>,employeeList);<br>    modelAndView.setViewName(<span class="hljs-string">&quot;employee_list&quot;</span>);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写index-html"><a href="#编写index-html" class="headerlink" title="编写index.html"></a>编写index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/employee&#125;&quot;</span>&gt;</span>查看员工信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编写employee-list-html"><a href="#编写employee-list-html" class="headerlink" title="编写employee_list.html"></a>编写employee_list.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:</span></span><br><span class="hljs-string"><span class="hljs-tag">center;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataTable&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>Employee Info<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>lastName<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>email<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>gender<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>options<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;employee : $&#123;employeeList&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h2><h3 id="编写employee-list-html-1"><a href="#编写employee-list-html-1" class="headerlink" title="编写employee_list.html"></a>编写employee_list.html</h3><p>在delete的a标签中增加超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/employee/&#125;+$&#123;employee.id&#125;&quot;</span>&gt;</span>delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>因为我们实现delete功能需要用post提交，并且得传过去一个<code>_method</code>，所以我们得新建一个表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteFrom&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;delete&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后我们需要使用vue.js来绑定超链接和表单，首先在<head>标签内添加:</head></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果你不是通过cdn使用vue.js，而是静态资源的话，记得使用maven的package命令重新打包，把静态资源打包进去。然后还要在springMVC.xml中开放对静态资源的访问权限。</p><p>编写vue代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vue=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#dataTable&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">deleteEmployee</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 获取隐藏域表单</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> deleteFrom=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;deleteForm&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-comment">// 修改隐藏域表单提交路径</span></span><br><span class="language-javascript">                deleteFrom.<span class="hljs-property">action</span>=event.<span class="hljs-property">target</span>.<span class="hljs-property">href</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// 提交表单</span></span><br><span class="language-javascript">                deleteFrom.<span class="hljs-title function_">submit</span>();</span><br><span class="language-javascript">                <span class="hljs-comment">//阻止超链接跳转，不是jQuery的return false</span></span><br><span class="language-javascript">                event.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">                <span class="hljs-comment">//return false;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>绑定点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deleteEmployee&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/employee/&#125;+$&#123;employee.id&#125;&quot;</span>&gt;</span>delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编写控制器-1"><a href="#编写控制器-1" class="headerlink" title="编写控制器"></a>编写控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;/employee/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteEmployee</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span><br>&#123;<br>    employeeDao.delete(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/employee&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="添加功能"><a href="#添加功能" class="headerlink" title="添加功能"></a>添加功能</h2><h3 id="编写employee-list-html-2"><a href="#编写employee-list-html-2" class="headerlink" title="编写employee_list.html"></a>编写employee_list.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>options(<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/toAdd&#125;&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编写SpringMVC-html"><a href="#编写SpringMVC-html" class="headerlink" title="编写SpringMVC.html"></a>编写SpringMVC.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/toAdd&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;employee_add&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编写employee-add-html"><a href="#编写employee-add-html" class="headerlink" title="编写employee_add.html"></a>编写employee_add.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/employee&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    lastName：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    email：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    gender：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>male<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>female<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编写控制器-2"><a href="#编写控制器-2" class="headerlink" title="编写控制器"></a>编写控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/employee&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">addEmployee</span><span class="hljs-params">(Employee employee)</span><br>&#123;<br>    employeeDao.save(employee);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/employee&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现回显功能"><a href="#实现回显功能" class="headerlink" title="实现回显功能"></a>实现回显功能</h2><p>目的其实是实现修改功能，但是我们要实现修改功能的话，需要将要修改的用户信息回显给用户</p><h3 id="编写employee-list-html-3"><a href="#编写employee-list-html-3" class="headerlink" title="编写employee_list.html"></a>编写employee_list.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/employee/&#125;+$&#123;employee.id&#125;&quot;</span>&gt;</span>update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编写控制器-3"><a href="#编写控制器-3" class="headerlink" title="编写控制器"></a>编写控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/employee/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">getEmployeeById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id,ModelAndView modelAndView)</span><br>&#123;<br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> employeeDao.get(id);<br>    modelAndView.addObject(<span class="hljs-string">&quot;employee&quot;</span>,employee);<br>    modelAndView.setViewName(<span class="hljs-string">&quot;employee_update&quot;</span>);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写employee-update-html"><a href="#编写employee-update-html" class="headerlink" title="编写employee_update.html"></a>编写employee_update.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/employee&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;put&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;&quot;</span><span class="hljs-attr">employee.id</span>&quot;&#125;&quot;&gt;</span><br>    lastName：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastName&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    email：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    gender：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">1</span> <span class="hljs-attr">th:checked</span>=<span class="hljs-string">&quot;$&#123;employee.gender==1&#125;&quot;</span>&gt;</span>male<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">th:checked</span>=<span class="hljs-string">&quot;$&#123;employee.gender==0&#125;&quot;</span>&gt;</span>female<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="实现修改功能"><a href="#实现修改功能" class="headerlink" title="实现修改功能"></a>实现修改功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PutMapping(&quot;/employee&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateEmployee</span><span class="hljs-params">(Employee employee)</span>&#123;<br>    employeeDao.save(employee);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/employee&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5.SpringMVC视图</title>
    <link href="/2022/12/27/SpringMVC/5.SpringMVC%E8%A7%86%E5%9B%BE/"/>
    <url>/2022/12/27/SpringMVC/5.SpringMVC%E8%A7%86%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="ThymeleafView"><a href="#ThymeleafView" class="headerlink" title="ThymeleafView"></a>ThymeleafView</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testThymeleafView&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testThymeleafView</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于我们配置了thymeleaf视图解析器，像这种视图名称没有加前缀的就是默认给thymeleaf解析，如果你是创建别的视图解析器，就是默认用别的视图解析器进行解析。</p><p>当SpringMVC发现该视图没有前缀时，会将其交给thymeleaf视图解析器解析，并在thymeleaf视图解析器中加上前缀(prefix)和后缀(suffix)，构成一个完整的地址。</p><h1 id="InternalResourceView"><a href="#InternalResourceView" class="headerlink" title="InternalResourceView"></a>InternalResourceView</h1><p>这是一种转发视图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testForward&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testForward</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/testThymeleafView&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testForward&#125;&quot;</span>&gt;</span>测试InternalResourceView<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p>SpringMVC发现返回的视图名称有forward前缀，那么 Spring MVC 会将请求转发到另一个控制器方法，而不是渲染视图。也就是先创建了一个InternalResourceView类对象，然后这个类对象会创建一个ThymeleafView，以实现转发。</p><p>毕竟<code>/testThymeleafView</code>是一个thymeleaf视图，只有thymeleaf视图解析器才能对其进行解析，所以要对其进行请求转发。</p><h1 id="RediectView"><a href="#RediectView" class="headerlink" title="RediectView"></a>RediectView</h1><p>这是一种重定向视图</p><p>重定向发了两次请求，所以会有两次request，所以不能共享request域的内容。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRedirect&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRedirect</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/testThymeleafView&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRedirect&#125;&quot;</span>&gt;</span>测试RedirectView<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="视图控制器"><a href="#视图控制器" class="headerlink" title="视图控制器"></a>视图控制器</h1><p>当我们的控制器里面没有业务处理时，我们可以使用视图控制器离开实现转发到某个视图。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toIndex</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上代码，我们可以将其设置为视图控制器的形式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但如果我们用了以上配置，我们会发现页面中的全部超链接都会失效，所以我们还需要再加上这条：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启MVC注解驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4.域对象</title>
    <link href="/2022/12/27/SpringMVC/4.%E5%9F%9F%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/12/27/SpringMVC/4.%E5%9F%9F%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<p>各种域对象的生命周期如下所示：</p><ul><li>ServletContext 对象：ServletContext 对象的生命周期是整个 Web 应用的生命周期。ServletContext 对象在 Web 应用启动时初始化，在 Web 应用终止时销毁。也就是说和服务器中Web应用的启动关闭有关。</li><li>HttpSession 对象：HttpSession 对象的生命周期是用户会话的生命周期。HttpSession 对象在用户第一次访问 Web 应用时创建，在用户会话结束时销毁。用户会话结束的时间点可以通过 session.setMaxInactiveInterval() 方法设置。</li><li>HttpServletRequest 对象：HttpServletRequest 对象的生命周期是用户请求的生命周期。HttpServletRequest 对象在用户发送请求时创建，在请求处理完毕后销毁</li></ul><p>注意，当用户关闭浏览器时，浏览器会清空所有的 cookie，包括 JSESSIONID。下次用户再访问 Web 应用时，服务器就会发现这个 JSESSIONID 是新的，因此会创建新的 HttpSession 对象。但是，如果用户在浏览器中设置了“在浏览器退出时保留 cookie”的选项，则 cookie 会被保留下来，下次用户访问 Web 应用时会发送给服务器，服务器就可以通过这个 JSESSIONID 找到对应的 HttpSession 对象。</p><p>然后我们还得注意两个超时时间，一个是会话超时时间，一个是session有效时间。前者是用户与服务器之间的交互间隔的最长时间，而后者是 HttpSession 对象在服务器上保存的最长时间。</p><p>会话超时时间指的是用户与服务器之间的交互间隔的最长时间，如果在这段时间内用户没有与服务器进行交互，那么就会视为会话超时，服务器就会将用户的 HttpSession 对象钝化。钝化表示 HttpSession 对象暂时不再活跃，服务器会将 HttpSession 对象的状态保存到硬盘或数据库中，以便在下次用户再次与服务器交互时能够快速恢复 HttpSession 对象。</p><p>而 HttpSession 对象的有效时间指的是 HttpSession 对象在服务器上保存的最长时间，如果 HttpSession 对象在服务器上保存的时间超过了这个时间，那么服务器就会将这个 HttpSession 对象清除。</p><p>需要注意的是，当 HttpSession 对象被钝化时，它不会立即被清除，而是会等待服务器的定期清除线程来扫描并清除过期的 HttpSession 对象。</p><h1 id="通过ServletAPI共享Request域对象"><a href="#通过ServletAPI共享Request域对象" class="headerlink" title="通过ServletAPI共享Request域对象"></a>通过ServletAPI共享Request域对象</h1><p>转发是将请求转发到另一个页面的过程，这意味着浏览器的地址栏不会改变，并且用户无法看到转发的过程。 转发的过程在服务器端进行，浏览器并不知道发生了什么。 转发的好处是速度快，因为它不需要浏览器重新加载页面。</p><p>重定向是在服务器端将请求重定向到另一个页面的过程。 这意味着浏览器的地址栏会改变，并且用户会看到浏览器重新加载页面的过程。 重定向的过程比转发慢，因为它需要浏览器重新加载页面。</p><p>并且他们有一个<strong>重要</strong>的区别：转发允许共享request域，而重定向不允许。</p><h2 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h2><p>这里的<code>return &quot;success&quot;</code>就是转发操作，所以转发到的success.html可以共享到request域的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScopeController</span><br>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/testRequestByServletAPI&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestByServletAPI</span><span class="hljs-params">(HttpServletRequest request)</span><br>    &#123;<br>        request.setAttribute(<span class="hljs-string">&quot;testRequestScope&quot;</span>,<span class="hljs-string">&quot;Hello,ServletAPI!&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编写success-html"><a href="#编写success-html" class="headerlink" title="编写success.html"></a>编写success.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;testRequestScope&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="编写index-html"><a href="#编写index-html" class="headerlink" title="编写index.html"></a>编写index.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRequestByServletAPI&#125;&quot;</span>&gt;</span>测试通过ServletAPI共享Request域对象<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="通过SpringMVC共享Request域对象"><a href="#通过SpringMVC共享Request域对象" class="headerlink" title="通过SpringMVC共享Request域对象"></a>通过SpringMVC共享Request域对象</h1><h2 id="通过ModelAndView共享"><a href="#通过ModelAndView共享" class="headerlink" title="通过ModelAndView共享"></a>通过ModelAndView共享</h2><p>非常重要，不管是用什么方式，最终都要封装到这个类对象之中。ServerAPI只能封装一个view进来，也就是return的值。</p><h3 id="编写控制器-1"><a href="#编写控制器-1" class="headerlink" title="编写控制器"></a>编写控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@RequestMapping(&quot;/testModelAndView&quot;)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">testModelAndView</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br><span class="hljs-comment">//        向模型中添加数据，其实就是要在Request域内共享的数据</span><br>        modelAndView.addObject(<span class="hljs-string">&quot;testRequestScope&quot;</span>,<span class="hljs-string">&quot;Hello,ModelAndView!&quot;</span>);<br><span class="hljs-comment">//        设置视图名称，也可以在构造函数中进行设置</span><br>        modelAndView.setViewName(<span class="hljs-string">&quot;success&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写index-html-1"><a href="#编写index-html-1" class="headerlink" title="编写index.html"></a>编写index.html</h3><p>success.html的代码不用改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testModelAndView&#125;&quot;</span>&gt;</span>测试通过ModelAndView共享Request域对象<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="通过Mode共享"><a href="#通过Mode共享" class="headerlink" title="通过Mode共享"></a>通过Mode共享</h2><h3 id="编写控制器-2"><a href="#编写控制器-2" class="headerlink" title="编写控制器"></a>编写控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModel&quot;)</span><br><span class="hljs-comment">// 如果需要获取请求参数的话，直接在形参列表加上@RequestParam和形参名就行，Model它无所谓的。</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModel</span><span class="hljs-params">(Model model)</span><br>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;testRequestScope&quot;</span>,<span class="hljs-string">&quot;Hello,Model!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写index-html-2"><a href="#编写index-html-2" class="headerlink" title="编写index.html"></a>编写index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testModel&#125;&quot;</span>&gt;</span>测试通过Model共享Request域对象<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="通过Map共享"><a href="#通过Map共享" class="headerlink" title="通过Map共享"></a>通过Map共享</h2><h3 id="编写控制器-3"><a href="#编写控制器-3" class="headerlink" title="编写控制器"></a>编写控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testMap&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testMap</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span><br>&#123;<br>    map.put(<span class="hljs-string">&quot;testRequestScope&quot;</span>,<span class="hljs-string">&quot;Hello,Map!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写index-html-3"><a href="#编写index-html-3" class="headerlink" title="编写index.html"></a>编写index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testMap&#125;&quot;</span>&gt;</span>测试通过Map共享Request域对象<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="通过ModelMap共享"><a href="#通过ModelMap共享" class="headerlink" title="通过ModelMap共享"></a>通过ModelMap共享</h2><h3 id="编写控制器-4"><a href="#编写控制器-4" class="headerlink" title="编写控制器"></a>编写控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModelMap&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModel</span><span class="hljs-params">(ModelMap modelMap)</span><br>&#123;<br>    <span class="hljs-comment">//底层其实也是Map，addAttribute会调用put方法，所以你要用put其实也可以</span><br>    modelMap.addAttribute(<span class="hljs-string">&quot;testRequestScope&quot;</span>,<span class="hljs-string">&quot;Hello,ModelMap!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写index-html-4"><a href="#编写index-html-4" class="headerlink" title="编写index.html"></a>编写index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testModelMap&#125;&quot;</span>&gt;</span>测试通过ModelMap共享Request域对象<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Model、ModelMap和Map之间的关系"><a href="#Model、ModelMap和Map之间的关系" class="headerlink" title="Model、ModelMap和Map之间的关系"></a>Model、ModelMap和Map之间的关系</h2><p>SpringMVC在注入这三个形参时，使用的都是同一个类对象进行注入，都是BindingAwareModelMap。</p><p>Model是一个原始接口<br>Map就是jdk里的Map接口<br>ModelMap继承了LinkedHashMap，所以它是Map的实现类</p><p>然后我们来通过ModelMap的源代码，发现如下继承关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BindingAwareModelMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ExtendedModelMap</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtendedModelMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ModelMap</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Model</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>通过上面的代码，我们可以知道，BindingAwareModelMap可以实例化ModelMap，还可以实例化Model。</p><p>还不止这样，由于ModelMap继承了LinkedHashMap，LinkedHashMap实现了Map，所以它还可以实例化Map。</p><h1 id="通过ServletAPI共享Session域对象"><a href="#通过ServletAPI共享Session域对象" class="headerlink" title="通过ServletAPI共享Session域对象"></a>通过ServletAPI共享Session域对象</h1><h2 id="编写控制器-5"><a href="#编写控制器-5" class="headerlink" title="编写控制器"></a>编写控制器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testSession&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testSession</span><span class="hljs-params">(HttpSession session)</span><br>&#123;<br>    session.setAttribute(<span class="hljs-string">&quot;testSessionScope&quot;</span>,<span class="hljs-string">&quot;Hello,Session!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编写success-html-1"><a href="#编写success-html-1" class="headerlink" title="编写success.html"></a>编写success.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;session.testSessionScope&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="编写index-html-5"><a href="#编写index-html-5" class="headerlink" title="编写index.html"></a>编写index.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testSession&#125;&quot;</span>&gt;</span>测试通过ServletAPI共享Session域对象<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="通过ServletAPI共享Application域对象"><a href="#通过ServletAPI共享Application域对象" class="headerlink" title="通过ServletAPI共享Application域对象"></a>通过ServletAPI共享Application域对象</h1><p>Application其实就是ServletContext。它和Session域很像，但session是单个用户在不同页面指尖可以共享数据，而Application域是可以共享不同用户的数据，通常会被用来做统计在线人数。</p><h2 id="编写控制器-6"><a href="#编写控制器-6" class="headerlink" title="编写控制器"></a>编写控制器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testApplication&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testApplication</span><span class="hljs-params">(HttpSession session)</span><br>&#123;<br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    servletContext.setAttribute(<span class="hljs-string">&quot;testApplicationScope&quot;</span>,<span class="hljs-string">&quot;Hello,Application!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编写success-html-2"><a href="#编写success-html-2" class="headerlink" title="编写success.html"></a>编写success.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;application.testApplicationScope&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="编写index-html-6"><a href="#编写index-html-6" class="headerlink" title="编写index.html"></a>编写index.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testApplication&#125;&quot;</span>&gt;</span>通过ServletAPI共享Session域对象<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.获取请求信息</title>
    <link href="/2022/12/26/SpringMVC/3.%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E4%BF%A1%E6%81%AF/"/>
    <url>/2022/12/26/SpringMVC/3.%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h1><h2 id="通过ServletAPI获取请求参数"><a href="#通过ServletAPI获取请求参数" class="headerlink" title="通过ServletAPI获取请求参数"></a>通过ServletAPI获取请求参数</h2><p>创建<code>test_param.html</code>文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试请求参数<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testServletAPI(username=&#x27;admin&#x27;,password=123)&#125;&quot;</span>&gt;</span>测试servletAPI获取请求参数<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在index.html增加这条a标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/param&#125;&quot;</span>&gt;</span>param<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>TestController</code>类中映射<code>/param</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span><br>&#123;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toIndex</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/param&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toParam</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test_param&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建<code>ParamController</code>类，通过ServletAPI处理请求参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParamController</span><br>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/testServletAPI&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getParams</span><span class="hljs-params">(HttpServletRequest request)</span><br>    &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot; password:&quot;</span>+password);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可能你不理解为什么只写了形参，没有new没有传参也没有注入，为什么就有对象了？其实过程是这样的：</p><p>HttpServletRequest 对象是由 Servlet 容器创建的，并由 Servlet 容器将其作为参数传递给 Servlet 的 service() 方法。</p><p>在 Spring MVC 中，DispatcherServlet 就是一个 Servlet，它的作用是接收用户的请求并将请求分发给相应的处理器。当 DispatcherServlet 接收到请求后，它会调用父类 HttpServlet 的 service() 方法来处理请求。在 service() 方法中，会根据请求的 HTTP 方法调用 doGet()、doPost() 等方法来处理请求。在这些方法中，HttpServletRequest 对象会被创建并作为参数传递给方法。</p><p>总之，如果你使用了 @RequestMapping 注解的方法，并且方法的形参中包含 HttpServletRequest 类型的变量，那么该变量会被自动注入。这个注入过程是由 Spring MVC 框架自动完成的。</p><p>ServletAPI在SpringMVC中很少使用，SpringMVC中有更好的方法来处理请求参数。</p><h2 id="通过控制器形参获取请求参数"><a href="#通过控制器形参获取请求参数" class="headerlink" title="通过控制器形参获取请求参数"></a>通过控制器形参获取请求参数</h2><p>在param.html中增加这条a记录</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123)&#125;&quot;</span>&gt;</span>测试控制器形参获取请求参数<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写控制器，这里只要保持形参名和请求参数名一样，SpringMVC就会自动进行注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toParam</span><span class="hljs-params">(String username,Integer password)</span><br>&#123;<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot; password:&quot;</span>+password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果是有多个同名参数，你可以用一个String类型或者一个String数组来接收返回值</p><p>例如你写了一个这样的html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/testParam&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    &amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    &amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp爱好：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span>a<br>                             <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span>b<br>                             <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span>c<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;测试控制器形参获取请求参数&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么你的控制器可以写为这样，这样的话，SpringMVC会在字符串中使用逗号来拼接多个同名参数值。当然，你也可以用String[]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jaVA"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toParam</span><span class="hljs-params">(String username,Integer password,String hobby)</span><br>&#123;<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot; password:&quot;</span>+password+<span class="hljs-string">&quot; hobby:&quot;</span>+hobby);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="RequestParam注解"><a href="#RequestParam注解" class="headerlink" title="@RequestParam注解"></a>@RequestParam注解</h2><p>在以上例子中，我们总是可以通过请求参数名来获取参数值，但一旦我们更改了前端的请求参数名，那么我们就得修改后端代码的变量名才能获取到正确的参数值，更改变量名会让我们更改大量的代码，所以这样做耦合度就太高了。</p><p>这是<code>@RequestParam</code>注解的定义，可以看到它有四个可选参数，其中<code>name</code>和<code>value</code>是一样的，代表请求参数名。<code>required</code>为<code>true</code>则代表该请求参数不能为空，否则则反。<code>defaultValue</code>代表默认值，如果请求参数为空，则默认形参为这个值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.PARAMETER&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RequestParam &#123;<br>    <span class="hljs-meta">@AliasFor(&quot;name&quot;)</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-meta">@AliasFor(&quot;value&quot;)</span><br>    String <span class="hljs-title function_">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">required</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br><br>    String <span class="hljs-title function_">defaultValue</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;\n\t\t\n\t\t\n\ue000\ue001\ue002\n\t\t\t\t\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下为一个使用例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;username&quot;,required = false,defaultValue = &quot;呵呵&quot;)</span> String username,Integer password, String hobby)</span><br>&#123;<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot; password:&quot;</span>+password+<span class="hljs-string">&quot; hobby:&quot;</span>+hobby);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="获取请求头信息"><a href="#获取请求头信息" class="headerlink" title="获取请求头信息"></a>获取请求头信息</h1><p>可使用<code>@RequestHeader</code>注解来获取请求头信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toParam</span><span class="hljs-params">(String username,</span><br><span class="hljs-params">                      String password,</span><br><span class="hljs-params">                      String hobby,</span><br><span class="hljs-params">                      <span class="hljs-meta">@RequestHeader(&quot;Host&quot;)</span> String host)</span><br>&#123;<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot; password:&quot;</span>+password+<span class="hljs-string">&quot; hobby:&quot;</span>+hobby);<br>    System.out.println(<span class="hljs-string">&quot;host:&quot;</span>+host);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="获取Cookie信息"><a href="#获取Cookie信息" class="headerlink" title="获取Cookie信息"></a>获取Cookie信息</h1><p>可使用<code>@CookieValue</code>注解获取Cookie信息</p><p>由于第一次访问Web应用程序时，并不会产生Cookie，而是需要获取到Session后才能在响应头中设置 Set-Cookie 字段。所以我们先更改Servlet-API的代码，让它可以获取得到一个Session信息。</p><p>使用 Session 的情况下，服务器会自动设置 Set-Cookie 字段，将 Session ID 保存在 Cookie 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testServletAPI&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testServletAPI</span><span class="hljs-params">(HttpServletRequest request)</span><br>&#123;<br>    <span class="hljs-comment">// 如果当前没有 HttpSession 对象，getSession() 方法会自动创建一个新的 HttpSession 对象。</span><br>    <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot; password:&quot;</span>+password);<br>    System.out.println(session);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后再编写toParam控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toParam</span><span class="hljs-params">(String username,</span><br><span class="hljs-params">                      String password,</span><br><span class="hljs-params">                      String hobby,</span><br><span class="hljs-params">                      <span class="hljs-meta">@RequestHeader(&quot;Host&quot;)</span> String host,</span><br><span class="hljs-params">                      <span class="hljs-meta">@CookieValue(&quot;JSESSIONID&quot;)</span> String JSESSIONID)</span><br>&#123;<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot; password:&quot;</span>+password+<span class="hljs-string">&quot; hobby:&quot;</span>+hobby);<br>    System.out.println(<span class="hljs-string">&quot;host:&quot;</span>+host);<br>    System.out.println(<span class="hljs-string">&quot;JSESSIONID:&quot;</span>+JSESSIONID);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们如果在第一次就去访问<code>/testParam</code>，会发现浏览器报出了一个错误信息，其实就是因为我们没有设置<code>Set-Cookie</code>字段，所以我们应该先访问<code>/testServletAPI</code>，再去访问<code>/testParam</code>，这样才能正常获取到Cookie信息。(其实用@SessionAttributes获取Session信息也可以做到)</p><h1 id="使用实体类获取请求参数"><a href="#使用实体类获取请求参数" class="headerlink" title="使用实体类获取请求参数"></a>使用实体类获取请求参数</h1><p>编写param.html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/testBean&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    &amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    &amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp性别：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span>男<br>                             <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    &amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp年龄：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    &amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp邮箱：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;测试实体类获取请求参数&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写实体类User，我们将用它来接收请求参数。它需要实现无参构造方法和set方法。通过反射创建对象一般是使用无参构造方法，而注入属性则是使用set方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span><br>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">public</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> String email;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写控制器代码。SpringMVC会通过set方法注入属性，这里要注意，它并不是通过成员变量名进行属性注入，而是通过方法名进行属性注入，例如你有一个setAge（String age），那么它会根据<code>setAge</code>里面的<code>Age</code>进行属性注入，所以<code>set</code>后面的内容一定要和请求参数名字相同。这样做在一定程度上可以做到解耦合，例如你前端代码中的请求参数变成了<code>virtualAge</code>,那么你并不需要更改变量名，这样就不需要更改大量代码，你只需要更改set方法名为<code>setVirtualAge</code>就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testBean&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testBean</span><span class="hljs-params">(User user)</span><br>&#123;<br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="解决POST请求乱码问题"><a href="#解决POST请求乱码问题" class="headerlink" title="解决POST请求乱码问题"></a>解决POST请求乱码问题</h1><p>如果通过Get请求出现了乱码，那其实是Tomcat造成的，只需更改Tomcat的怕配置文件/conf/server.xml文件就行，所以get的乱码问题是可以一次性解决的。而如果是Post请求的话，则不然。</p><p>我们需要在获取请求参数之前解决编码问题，下面我们先来回顾下Web应用程序中三大组件的加载顺序。</p><p>在Web应用程序启动时，监听器、过滤器和Servlet的加载顺序如下：</p><ol><li>监听器：在Web应用程序启动时，Servlet容器会扫描web.xml文件或注解，并根据配置信息加载监听器。通常情况下，监听器会在其他组件之前被加载，以便能够监听这些组件的特定事件。</li><li>过滤器：在监听器加载完成后，Servlet容器会加载过滤器。过滤器是一种特殊的Java类，用于对用户请求进行过滤，实现请求日志记录、身份验证等功能。</li><li>Servlet：在过滤器加载完成后，Servlet容器会加载Servlet。Servlet是处理客户端请求的组件，负责生成响应给客户端。</li></ol><p>所以想要在Servlet之前，也就是获取客户端请求参数前解决解决编码问题，那我们一般会写在过滤器中。</p><h2 id="注册过滤器"><a href="#注册过滤器" class="headerlink" title="注册过滤器"></a>注册过滤器</h2><p>编写web.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="更改编码"><a href="#更改编码" class="headerlink" title="更改编码"></a>更改编码</h2><p>这个地方最后跟进去源码里面看一下为什么是设置<code>encoding</code>这个属性。源码里大概是说，如果<code>encoding</code>不为空，并且什么或什么就设置请求的编码，并且什么就设置响应的编码(自己进去看)。如果单单只是设置了<code>encoding</code>，那么只会改变请求的编码，而不会改变响应的编码。如果想改变响应的编码，那还得更改<code>forceResponseEncoding</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.RequestMapping</title>
    <link href="/2022/12/25/SpringMVC/2.RequestMapping/"/>
    <url>/2022/12/25/SpringMVC/2.RequestMapping/</url>
    
    <content type="html"><![CDATA[<h1 id="路径层级管理"><a href="#路径层级管理" class="headerlink" title="路径层级管理"></a>路径层级管理</h1><p>@RequestMapping标识一个类: 设置映射请求的请求路径的初始信息，相当于一个文件夹。</p><p>@RequestMapping标识一个方法: 设置映射请求请求路径的具体信息，相当于文件夹内具体文件。</p><p>我们设置了这样一个控制器，注意它在类上面和方法上面都添加了<code>@RequestMapping</code>注解，这时它的访问路径应该是嵌套了的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingController</span><br>&#123;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/testRequestMapping&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">success</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也就是说，它的访问路径应该这样写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/test/testRequestMapping&#125;&quot;</span>&gt;</span>成功页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样一来，我们就可以把所有测试的代码都放在<code>/test</code>下面，这样就更方便管理。</p><h1 id="RequestMapping属性"><a href="#RequestMapping属性" class="headerlink" title="@RequestMapping属性"></a>@RequestMapping属性</h1><h2 id="value属性"><a href="#value属性" class="headerlink" title="value属性"></a>value属性</h2><p>可以用集合来指定多个value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(value = &#123;&quot;/test&quot;,&quot;/&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingController</span><br>&#123;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/testRequestMapping&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">success</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/test/testRequestMapping&#125;&quot;</span>&gt;</span>成功页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>成功页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样就可以通过多个地址来匹配同一个请求</p><h2 id="method属性"><a href="#method属性" class="headerlink" title="method属性"></a>method属性</h2><p>用于设置请求方式，这样要访问到这个资源，单是地址正确还不够，还需要满足请求方式的条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingController</span><br>&#123;<br>    <span class="hljs-comment">//RequestMethod是一个枚举型变量</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/testRequestMapping&quot;,method = RequestMethod.POST)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">success</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>成功页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/testRequestMapping&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;成功页面&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第一个超链接显然是转发不了的，而按钮却是可以转发成功的。</p><hr><p>对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解<br>处理get请求的映射–&gt;@GetMapping<br>处理post请求的映射–&gt;@PostMapping<br>处理put请求的映射–&gt;@PutMapping<br>处理delete请求的映射–&gt;@DeleteMapping</p><p>这样一来，上面的控制器代码可以改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingController</span><br>&#123;<br>    <span class="hljs-meta">@PostMapping(value = &quot;/testRequestMapping&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">success</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="params属性"><a href="#params属性" class="headerlink" title="params属性"></a>params属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value=&quot;/test&quot;,params=&#123;&quot;username&quot;&#125;)</span><span class="hljs-comment">//请求里面一定要有username参数</span><br><span class="hljs-meta">@RequestMapping(value=&quot;/test&quot;,params=&#123;&quot;!username&quot;&#125;)</span><span class="hljs-comment">//请求里面一定不要有username参数</span><br><span class="hljs-meta">@RequestMapping(value=&quot;/test&quot;,params=&#123;&quot;username=admin&quot;&#125;)</span><span class="hljs-comment">//请求里面的username参数一定为admin</span><br><span class="hljs-meta">@RequestMapping(value=&quot;/test&quot;,params=&#123;&quot;username!=admin&quot;&#125;)</span><span class="hljs-comment">//请求里面的username参数一定不为admin</span><br></code></pre></td></tr></table></figure><p>举个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingController</span><br>&#123;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/testRequestMapping&quot;,params = &#123;&quot;username&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">success</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>成功页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-comment">&lt;!--注意这里不是用?，而是用()，还有字符串是用单引号，不是用双引号--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRequestMapping(username=&#x27;admin&#x27;,password=123)&#125;&quot;</span>&gt;</span>成功页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="headers属性"><a href="#headers属性" class="headerlink" title="headers属性"></a>headers属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value=&quot;/test&quot;,headers=&#123;&quot;header&quot;&#125;)</span><span class="hljs-comment">//请求里面一定要携带请求头</span><br><span class="hljs-meta">@RequestMapping(value=&quot;/test&quot;,headers=&#123;&quot;!header&quot;&#125;)</span><span class="hljs-comment">//请求里面一定不要携带请求头</span><br><span class="hljs-meta">@RequestMapping(value=&quot;/test&quot;,headers=&#123;&quot;Host=localhost:8081&quot;&#125;)</span><span class="hljs-comment">//请求里面一定要携带请求头，且Host内容为localhost:8081</span><br><span class="hljs-meta">@RequestMapping(value=&quot;/test&quot;,headers=&#123;&quot;Host!=localhost:8081&quot;&#125;)</span><span class="hljs-comment">//请求里面一定要携带请求头，且Host内容不为localhost:8081</span><br></code></pre></td></tr></table></figure><h1 id="ant风格路径"><a href="#ant风格路径" class="headerlink" title="ant风格路径"></a>ant风格路径</h1><p>SpringMVC支持ant风格路径，他可以帮助你进行模糊匹配</p><p>? : 表示任意的单个字符<br>* : 表示任意的0个或多个字符<br>** : 表示任意的一层或多层目录<br>注意 : 在使用**时，只能使用/**/xxx的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingController</span><br>&#123;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/a?a/testRequestMapping&quot;)</span><br>    <span class="hljs-comment">//@RequestMapping(value = &quot;/**/testRequestMapping&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">success</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可用啊a1a来访问，也可以用a2a来访问</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/a1a/testRequestMapping&#125;&quot;</span>&gt;</span>成功页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/a2a/testRequestMapping&#125;&quot;</span>&gt;</span>成功页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="restful风格路径-重点"><a href="#restful风格路径-重点" class="headerlink" title="restful风格路径(重点)"></a>restful风格路径(重点)</h1><p>原始方式：/testRequestMapping/id=1</p><p>rest方式：/testRequestMapping/1</p><p>举个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>成功页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRequestMapping/admin/123&#125;&quot;</span>&gt;</span>成功页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里可以使用<code>@PathVariable</code>注解来获取传入的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingController</span><br>&#123;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/testRequestMapping/&#123;username&#125;/&#123;password&#125;&quot;)</span><br>    <span class="hljs-comment">// 使用PathVariable来获取传入的参数</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">success</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String username,<span class="hljs-meta">@PathVariable(&quot;password&quot;)</span> Integer password)</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username);<br>        System.out.println(<span class="hljs-string">&quot;password:&quot;</span>+password);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果是使用?方式的话，就得使用<code>@RequestParam</code>注解来获取参数，而不是<code>@PathVariable</code>注解。例如这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingController</span><br>&#123;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/testRequestMapping&quot;,params = &#123;&quot;username&quot;,&quot;password&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">success</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String username,Integer password)</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username);<br>        System.out.println(<span class="hljs-string">&quot;password:&quot;</span>+password);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.HelloWorld</title>
    <link href="/2022/12/25/SpringMVC/1.HelloWorld/"/>
    <url>/2022/12/25/SpringMVC/1.HelloWorld/</url>
    
    <content type="html"><![CDATA[<h1 id="创建Maven工程"><a href="#创建Maven工程" class="headerlink" title="创建Maven工程"></a>创建Maven工程</h1><p>建立Maven项目(不使用构建模块)，pom.xml修改一下部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.C4n<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springMVC-demo01<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--由于是web工程，需要将html那些东西打包进来，所以使用war包。同时这表明这是一个web项目，创建webapp的时候会自动加上小蓝点--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- SpringMVC --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- ServletAPI --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--因为servlet由tomcat服务器提供了，所以打成war包的时候就不打包进去--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在java目录下添加webapp文件夹，并添加web.xml文件，注意修改创建路径<img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-25-15-14-26/image-20221224211835455.png" alt="image-20221224211835455" style="zoom:50%;"><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-25-15-14-26/image-20221224212020282.png" alt="image-20221224212020282" style="zoom:50%;"></p><h1 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h1><h2 id="web-xml的作用"><a href="#web-xml的作用" class="headerlink" title="web.xml的作用"></a>web.xml的作用</h2><p>Java Web 应用程序需要配置<code>web.xml</code>是因为在应用程序运行时，需要有一些额外的信息来指导应用程序的行为。这些信息可以用来控制应用程序的功能，指定应用程序使用的资源，并且可以让应用程序与外部系统进行交互。</p><p><code>web.xml</code> 中的配置信息包括：</p><ul><li>应用程序的名称</li><li>应用程序所依赖的类和资源</li><li>应用程序的过滤器和监听器</li><li>应用程序的 Servlet、JSP 页面以及它们的映射信息</li><li>应用程序的 MIME 类型</li><li>应用程序的安全性设置</li></ul><p>例如：在 Java Web 应用程序中，配置 <code>web.xml</code> 后就能使用 Servlet 是因为，<code>web.xml</code> 中的配置信息告诉 Web 容器（例如 Tomcat）有哪些 Servlet 可供使用，以及这些 Servlet 如何被访问。</p><p>在 <code>web.xml</code> 中，可以使用 <code>&lt;servlet&gt;</code> 和 <code>&lt;servlet-mapping&gt;</code> 标签配置 Servlet。<code>&lt;servlet&gt;</code> 标签用于描述 Servlet 的信息，包括 Servlet 的名称、类名和初始化参数等。<code>&lt;servlet-mapping&gt;</code> 标签用于描述 Servlet 的访问映射信息，即 Servlet 可以被访问的 URL 地址。</p><p>例如，下面的 <code>web.xml</code> 配置文件中，定义了一个名为 “HelloServlet” 的 Servlet，它的类名为 “com.example.HelloServlet”，并且可以通过 “/hello” 这个 URL 地址访问：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.example.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="默认配置方式"><a href="#默认配置方式" class="headerlink" title="默认配置方式"></a>默认配置方式</h2><p>位置默认，名称默认。此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为<code>&lt;servlet-name&gt;-servlet.xml</code>，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVC-servlet.xml。但maven的配置文件是统一放在resoure下，所以会更好一些，扩展配置方式就做到了这点。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置SpringMVC的前端控制器，对浏览器发送的请求进行统一处理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        设置springMvC的核心控制器所能处理的请求的请求路径</span><br><span class="hljs-comment">        ’/‘所匹配的请求可以是/login或.htm1或.js或.css方式的请求路径</span><br><span class="hljs-comment">        但是/不能匹配.jsp请求路径的请求</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为了保护应用的配置文件和资源文件不被直接访问，通常将这些文件放在 WEB-INF 目录下。这样，用户就无法通过 URL 直接访问 WEB-INF 目录下的文件。同时，WEB-INF 目录下的文件也不能被应用的类文件所访问。在应用的类文件中，只能访问 WEB-INF 目录外的文件。这样，就可以保证应用的配置文件和资源文件的安全性。</p><h2 id="扩展配置方式"><a href="#扩展配置方式" class="headerlink" title="扩展配置方式"></a>扩展配置方式</h2><p>在默认配置方式的基础上，在servlet标签内配置SpringMVC配置文件的位置和名称。类路径指明了位置信息，由于我们还没这个文件，所以得在resource目录下创建这个spring配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置SpringMVC配置文件的位置和名称--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br></code></pre></td></tr></table></figure><p>由于我们进行初始化默认是在第一次访问这个页面时,所以会严重影响第一次访问的速度。所以我们需要将它提前到服务器启动时。</p><p><code>&lt;load-on-startup&gt;</code>标签内代表的是加载优先级，越小代表越高</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--将DispatcherServlet前端控制器的初始化提前到服务器启动时--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="创建控制器"><a href="#创建控制器" class="headerlink" title="创建控制器"></a>创建控制器</h1><p>在 MVC 架构中，控制器（Controller）是用于接收用户请求，并将请求转发给对应的模型（Model）进行处理的组件。</p><p>控制器的主要职责如下：</p><ol><li>接收用户请求：控制器负责接收用户的请求，并解析请求中的参数。</li><li>处理用户请求：根据用户的请求，控制器负责调用相应的模型进行处理，并将处理结果返回给用户。</li><li>选择视图：控制器负责根据处理结果选择合适的视图（View）进行展示。</li></ol><p>控制器是 MVC 架构中的重要组件，它起着桥梁作用，将用户的请求与模型的处理结果连接起来。</p><p>在 Spring MVC 中，控制器通常由一个普通的 Java 类实现，使用 @Controller 注解进行标注。通常，控制器会提供一些处理用户请求的方法，使用 @RequestMapping 注解进行标注。</p><h2 id="创建控制器-1"><a href="#创建控制器-1" class="headerlink" title="创建控制器"></a>创建控制器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.mvc.controller;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span><br>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="开启组件扫描"><a href="#开启组件扫描" class="headerlink" title="开启组件扫描"></a>开启组件扫描</h2><p>只加了Controller注解并不会产生任何效果，只有开启了组件扫描，我们才会将Controller注解的类交给IOC容器进行管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--扫描组件(这里用IDEA自动引用了命名空间，引错了后面会报错)--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.C4n.mvc.controller&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h1><h2 id="配置视图解析器"><a href="#配置视图解析器" class="headerlink" title="配置视图解析器"></a>配置视图解析器</h2><p>视图解析器是 MVC 架构中用于解析视图（View）的组件，它负责将模型数据渲染成 HTML 或其他格式的视图，以供用户浏览。</p><p>在 Spring MVC 中，视图解析器通常由一个普通的 Java 类实现，使用 @Bean 注解进行标注。视图解析器提供一些方法用于解析视图，并将模型数据渲染到视图中。这里使用嵌套内部bean的方式注入在一个对象里面注入一个对象里面注入一个对象。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 视图前缀 --&gt;</span><br>                    <span class="hljs-comment">&lt;!--注意这个位置/WEB-INF/templates/，代表我们的视图放在这里--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 视图后缀 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML5&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><center> <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">这里输入题注</div> </center><h1 id="访问首页"><a href="#访问首页" class="headerlink" title="访问首页"></a>访问首页</h1><h2 id="创建视图-1"><a href="#创建视图-1" class="headerlink" title="创建视图"></a>创建视图</h2><p>在<code>/WEB-INF/templates/</code>下创建<code>index.html</code>，由于<code>/WEB-INF/</code>下的内容我们不能直接访问到，重定向也是不能访问到的，我们现在只能通过转发来访问到。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!--要想使用thymeleaf的语法，必须加上这个东西--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>在 Spring MVC 中，控制器可以返回一个字符串来表示视图的名称。例如，如果控制器的方法返回的字符串为 “index”，那么 Spring MVC 就会使用视图解析器解析名为 “index” 的视图，并将渲染结果返回给用户。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span><br>&#123;<br>    <span class="hljs-comment">// &quot;/&quot;--&gt;/WEB-INF/templates/index.html</span><br>    <span class="hljs-comment">// &quot;/&quot;表示的当前工程的上下文路径</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-comment">// 返回视图名称,也就是全路径/WEB-INF/templates/index.html去掉前缀和后缀</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h3> <img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-25-15-14-26/image-20221225141652896.png" alt="image-20221225141652896" style="zoom: 50%;"><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p> <img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-25-15-14-26/image-20221225142553376.png" alt="image-20221225142553376"></p><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-25-15-14-26/image-20221225143238422.png" alt="image-20221225143238422"></p><h1 id="访问a标签内指定页面"><a href="#访问a标签内指定页面" class="headerlink" title="访问a标签内指定页面"></a>访问a标签内指定页面</h1><h2 id="修改index-html"><a href="#修改index-html" class="headerlink" title="修改index.html"></a>修改index.html</h2><p>你也可以在href中写<code>/springMVC/target</code>，但由于工程路径可以改，所以我们一般使用thymeleaf来编写。虽然我试了下，使用相对路径，也就是href里面直接写<code>target</code>也是可以的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!--要想使用thymeleaf的语法，必须加上这个东西--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-comment">&lt;!--绝对路径：/项目名/资源名  相对路径：不以/开头。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/target&#125;&quot;</span>&gt;</span>访问目标页面target.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;target&quot;</span>&gt;</span>访问目标页面target.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/springMVC/target&quot;</span>&gt;</span>访问目标页面target.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="编写target-html"><a href="#编写target-html" class="headerlink" title="编写target.html"></a>编写target.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>HEI~HEI~<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span><br>&#123;<br>    <span class="hljs-comment">// &quot;/&quot;--&gt;/WEB-INF/templates/index.html</span><br>    <span class="hljs-comment">// &quot;/&quot;表示的当前工程的上下文路径</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-comment">// 返回视图名称,也就是全路径/WEB-INF/templates/index.html去掉前缀和后缀</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/target&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toTarget</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理.前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面。</p>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven</title>
    <link href="/2022/12/23/Maven/Maven/"/>
    <url>/2022/12/23/Maven/Maven/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>com.baidu<br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> ueditor echarts<br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="坐标属性"><a href="#坐标属性" class="headerlink" title="坐标属性"></a>坐标属性</h2><p>Maven坐标为各种组件引入了秩序，任何一个组件都必须明确定义自己的坐标。</p><h2 id="groupld"><a href="#groupld" class="headerlink" title="groupld"></a>groupld</h2><p>定义当前Maven项目隶属的实际项目-公司名称。 (iar包所在仓库路径) 由于Maven中模块的概念，因此一个实际项目往往会被划分为很多模块。比如spring是一个实际项目，其对应的Maven模块会有很多，如spring-core,spring-webmvc等</p><h2 id="artifactld"><a href="#artifactld" class="headerlink" title="artifactld"></a>artifactld</h2><p>该元素定义实际项目中的一个Maven模块-项目名，推荐的做法是使用实际项目名称作为artifactld的前缀。比如: spring-bean,spring-webmvc等</p><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><p>该元素定义Maven项目当前所处的版本</p><h1 id="Maven项目目录结构"><a href="#Maven项目目录结构" class="headerlink" title="Maven项目目录结构"></a>Maven项目目录结构</h1><table><thead><tr><th>目录</th><th>目的</th></tr></thead><tbody><tr><td>${basedir}</td><td>存放pom.xml和所有的子目录</td></tr><tr><td>${basedir}/src/main/java</td><td>项目的java源代码，也就是准备上线的代码</td></tr><tr><td>${basedir}/src/main/sources</td><td>项目的资源，比如说property文件</td></tr><tr><td>${basedir}/src/test/java</td><td>项目的测试类，比如说JUnit代码</td></tr><tr><td>${basedir}/src/test/sources</td><td>测试使用的资源，也就是公司内部用来测试的代码</td></tr></tbody></table><h1 id="IDEA配置Maven环境"><a href="#IDEA配置Maven环境" class="headerlink" title="IDEA配置Maven环境"></a>IDEA配置Maven环境</h1><p>文件→新项目设置→新项目的设置→构建、执行、部署→构建工具→Maven→Maven主路径、用户设置文件、本地仓库</p><p>注意这里不是直接点设置，而是点新项目设置，设置只是当前项目的设置，是一种局部设置。</p><h1 id><a href="#" class="headerlink" title></a><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-29-12-26-07/image-20221224012416813.png" alt="image-20221224012416813" style="zoom:50%;"><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-29-12-26-07/image-20221224012936191.png" alt="image-20221224012936191" style="zoom:50%;"></h1><h1 id="创建Java项目"><a href="#创建Java项目" class="headerlink" title="创建Java项目"></a>创建Java项目</h1><p>这里是使用了模块进行构建，当然，你有多模块项目构建需求的话，可以不使用模块进行构建，然后在右键项目添加quickstart模块</p><h1 id="-1"><a href="#-1" class="headerlink" title></a><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-29-12-26-07/image-20221224135130443.png" alt="image-20221224135130443" style="zoom:50%;"><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-29-12-26-07/image-20221224135707183.png" alt="image-20221224135707183" style="zoom:50%;"></h1><p>创建完等待下载完资源就行，然后自动导入仓库</p><p>然后右边会有一个maven窗口，红框里的内容是可视化的maven命令，点击就会执行maven命令<img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-29-12-26-07/image-20221224140049555.png" alt="image-20221224140049555" style="zoom:50%;"></p><p>添加资源目录，测试目录也是一样设置，，，，，，，，，，，，，，，，，，<img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-29-12-26-07/image-20221224140329373.png" alt="image-20221224140329373" style="zoom:50%;"><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-29-12-26-07/image-20221224140544106.png" alt="image-20221224140544106" style="zoom: 80%;"></p><h1 id="编译项目"><a href="#编译项目" class="headerlink" title="编译项目"></a>编译项目</h1><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-29-12-26-07/image-20221224140739421.png" alt="image-20221224140739421"></p><p>这里的名称一般会写命令名，想编译就写compile，想打包就写package</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-29-12-26-07/image-20221224140857531.png" alt="image-20221224140857531"></p><h1 id="创建web项目"><a href="#创建web项目" class="headerlink" title="创建web项目"></a>创建web项目</h1><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-29-12-26-07/image-20221224141253659.png" alt="image-20221224141253659"></p><h2 id="更改pom-xml文件"><a href="#更改pom-xml文件" class="headerlink" title="更改pom.xml文件"></a>更改pom.xml文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  默认1.7，要改为1.8--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置单元测试版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--删除这个标签的全部内容,这个是插件相关的，用不到--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>改完点右上角的这个标志，就会自动下载资源</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-29-12-26-07/image-20221224142108522.png" alt="image-20221224142108522"></p><h2 id="添加Tomcat插件"><a href="#添加Tomcat插件" class="headerlink" title="添加Tomcat插件"></a>添加Tomcat插件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 设置在plugins标签中 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>8081<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span> <span class="hljs-comment">&lt;!-- 启动端口 默认:8080 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span>/test<span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span> <span class="hljs-comment">&lt;!-- 项目的站点名，即对外访问路径 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">uriEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">uriEncoding</span>&gt;</span> <span class="hljs-comment">&lt;!-- 字符集编码 默认：ISO-8859-1 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span>tomcat7<span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span> <span class="hljs-comment">&lt;!-- 服务器名称 --&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="maven仓库的基本概念"><a href="#maven仓库的基本概念" class="headerlink" title="maven仓库的基本概念"></a>maven仓库的基本概念</h1><h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><p>通过修改maven配置文件conf目录下settings.xml来指定仓库路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置到指定目录，注意斜杠不要写反--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>E:/m2/repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="中央仓库"><a href="#中央仓库" class="headerlink" title="中央仓库"></a>中央仓库</h2><p>由于原始的本地仓库是空的，maven必须知道至少一个可用的远程仓库，才能执行maven命令的时候下载到需要的构件。中央仓库就是这样一个默认的远程仓库。<br>maven-model-builder-3.3.9,jar maven自动的 jar 中包含了一个超级POM。定义了默认中央仓库的位置中央仓库包含了2000多个开源项目，接收每天1亿次以上的访问。</p><h2 id="私服仓库"><a href="#私服仓库" class="headerlink" title="私服仓库"></a>私服仓库</h2><p>私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务， 私服代理广域网上的远程仓库，供局 域网内的maven用户使用。 当maven需要下载构件时， 它去私服当中找，如果私服没有， 则从外部远 程仓库下载，并缓存在私服上， 再为maven提供。 </p><p>此外，一些无法从外部仓库下载的构件也能从本地上传到私服提供局域网中其他人使用 配置方式项目pom.xml 配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>public<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Public Repositories<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.0.96:8081/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>getui-nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>           <br><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://mvn.gt.igexin.com/nexus/content/repositories/releases/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br></code></pre></td></tr></table></figure><p>公司内部应该建立私服： </p><ul><li>节省自己的外网带宽 </li><li>加速maven构建 </li><li>部署第三方控件 </li><li>提高稳定性 </li><li>降低中央仓库的负荷</li></ul><h2 id="其他公共库"><a href="#其他公共库" class="headerlink" title="其他公共库"></a>其他公共库</h2><p>常见的阿里云仓库配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="如何配置pom-xml"><a href="#如何配置pom-xml" class="headerlink" title="如何配置pom.xml"></a>如何配置pom.xml</h2><p>在浏览器搜索mvn，进入这个网页里搜索</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-29-12-26-07/image-20221224144043045.png" alt="image-20221224144043045"></p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-29-12-26-07/image-20221224144311367.png" alt="image-20221224144311367"></p><p>复制粘贴到 &lt;dependencies&gt; 里面</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-29-12-26-07/image-20221224144346165.png" alt="image-20221224144346165"></p><h1 id="构建多模块项目"><a href="#构建多模块项目" class="headerlink" title="构建多模块项目"></a>构建多模块项目</h1><p>丢失，不想写，就这样，问题不大</p><h1 id="Maven的打包操作"><a href="#Maven的打包操作" class="headerlink" title="Maven的打包操作"></a>Maven的打包操作</h1><p>先跳过，后面用到再说</p><h1 id="Maven依赖的基本概念"><a href="#Maven依赖的基本概念" class="headerlink" title="Maven依赖的基本概念"></a>Maven依赖的基本概念</h1><h2 id="依赖的基本配置"><a href="#依赖的基本配置" class="headerlink" title="依赖的基本配置"></a>依赖的基本配置</h2><p>根元素project下的dependencies可以包含多个 dependence元素，以声明多个依赖。每个依赖都应 该包含以下元素： </p><ol><li>groupId, artifactId, version : 依赖的基本坐标， 对于任何一个依赖来说，基本坐标是最重要的， Maven根据坐标才能找到需要的依赖。 </li><li>Type： 依赖的类型，大部分情况下不需要声明。 默认值为jar </li><li>Scope： 依赖范围（compile,test,provided,runtime,system )，也就是什么时候使用这个依赖，如编译、测试、运行。<ul><li>compile: 编译依赖范围。<br>如果没有指定，就会默认使用该依赖范围。使用此依赖范围的Maven依赖，对于编译、测 试、运行三种classpath都有效。 </li><li>test: 测试依赖范围。<br>使用此依赖范围的Maven依赖，只对于测试classpath有效，在编译主代码或者运行项目的使用时将无法使用此类依赖。典型的例子就是JUnit，它只有在编译测试代码及运行测试的时候才需要。 </li><li>provided: 已提供依赖范围。<br>使用此依赖范围的Maven依赖，对于编译和测试classpath有效，但在运行时无效。典型的例子是servlet-api，编译和测试项目的时候需要该依赖，但在运行项目的时候，由于Tomcat容器已经提供，就不需要Maven重复地引入一遍(如：servlet-api)。 </li><li>runtime: 运行时依赖范围。<br>使用此依赖范围的Maven依赖，对于测试和运行classpath有效，但在编译主代码时无效。典型的例子是JDBC驱动实现，项目主代码的编译只需要JDK提供的JDBC接口，只有在执行测试或者运行项目的时候才需要实现上述接口的具体JDBC驱动。 </li><li>system: 系统依赖范围。 该依赖与三种classpath的关系，和provided依赖范围完全一致。但是，使用system范围依赖 时必须通过systemPath元素显式地指定依赖文件的路径。由于此类依赖不是通过Maven仓库 解析的，而且往往与本机系统绑定，可能造成构建的不可移植，因此应该谨慎使用。 </li></ul></li><li>Optional：标记依赖是否可选</li><li>Exclusions： 用来排除传递性依赖。</li></ol><h2 id="传递性依赖"><a href="#传递性依赖" class="headerlink" title="传递性依赖"></a>传递性依赖</h2><p>传递依赖机制，Maven会解析各个直接依赖的POM，将那些必要的间接依赖，以传递性依赖的形式引入到当前项目中。也就是说，依赖也有父子关系，子依赖被引入的时候，由于它依赖于父依赖，maven会把父依赖也一并引入。</p><p>但要注意：依赖传递有可能发生冲突。</p><p>冲突场景：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">A--&gt;B---&gt;C (2.0)<br>A--&gt;E---&gt;C (1.0)<br></code></pre></td></tr></table></figure><p>如果A下同时存在两个不同version的C，冲突！！（需要选取同时适合A、B的版本）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>  <br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>              <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超级pom</title>
    <link href="/2022/12/23/Maven/%E8%B6%85%E7%BA%A7pom/"/>
    <url>/2022/12/23/Maven/%E8%B6%85%E7%BA%A7pom/</url>
    
    <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br></pre></td><td class="code"><pre><code class="hljs xml">pom作为项目对象模型。通过xml表示maven项目，使用pom.xml来实现。<br>主要描述了项目：包括配置文件；开发者需要遵循的规则，缺陷管理系统，组织和licenses，项目的url，项目的依赖性，以及其他所有的项目相关因素。<br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>     </span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>     </span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span>     <br>    <span class="hljs-comment">&lt;!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 version。--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--被继承的父项目的构件标识符--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>/&gt;</span>    <br>     <span class="hljs-comment">&lt;!--被继承的父项目的全球唯一标识符--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>/&gt;</span>    <br>     <span class="hljs-comment">&lt;!--被继承的父项目的版本--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span>    <br>     <span class="hljs-comment">&lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项 目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span>    <br> <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <br> <span class="hljs-comment">&lt;!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。--&gt;</span>       <br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>     <br>    <span class="hljs-comment">&lt;!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app--&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>asia.banseon<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>     <br>    <span class="hljs-comment">&lt;!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等。--&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>banseon-maven2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>     <br>    <span class="hljs-comment">&lt;!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型--&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>     <br>    <span class="hljs-comment">&lt;!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号--&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>     <br>    <span class="hljs-comment">&lt;!--项目的名称, Maven产生的文档用--&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>banseon-maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>     <br>    <span class="hljs-comment">&lt;!--项目主页的URL, Maven产生的文档用--&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.baidu.com/banseon<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>     <br>    <span class="hljs-comment">&lt;!-- 项目的详细描述, Maven 产生的文档用。  当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。--&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>A maven project to study maven.<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span>     <br>    <span class="hljs-comment">&lt;!--描述了这个项目构建环境中的前提条件。--&gt;</span>    <br> <span class="hljs-tag">&lt;<span class="hljs-name">prerequisites</span>&gt;</span>    <br>  <span class="hljs-comment">&lt;!--构建该项目或使用该插件所需要的Maven的最低版本--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven</span>/&gt;</span>    <br> <span class="hljs-tag">&lt;/<span class="hljs-name">prerequisites</span>&gt;</span>    <br> <span class="hljs-comment">&lt;!--项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira--&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">issueManagement</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--问题管理系统（例如jira）的名字，--&gt;</span>     <br>        <span class="hljs-tag">&lt;<span class="hljs-name">system</span>&gt;</span>jira<span class="hljs-tag">&lt;/<span class="hljs-name">system</span>&gt;</span>     <br>        <span class="hljs-comment">&lt;!--该项目使用的问题管理系统的URL--&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://jira.baidu.com/banseon<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>     <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">issueManagement</span>&gt;</span>     <br>    <span class="hljs-comment">&lt;!--项目持续集成信息--&gt;</span>    <br> <span class="hljs-tag">&lt;<span class="hljs-name">ciManagement</span>&gt;</span>    <br>  <span class="hljs-comment">&lt;!--持续集成系统的名字，例如continuum--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">system</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告）--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">notifiers</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--配置一种方式，当构建中断时，以该方式通知用户/开发者--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">notifier</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!--传送通知的途径--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--发生错误时是否通知--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">sendOnError</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--构建失败时是否通知--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">sendOnFailure</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--构建成功时是否通知--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">sendOnSuccess</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--发生警告时是否通知--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">sendOnWarning</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--不赞成使用。通知发送到哪里--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">address</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--扩展配置项--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">notifier</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">notifiers</span>&gt;</span>    <br> <span class="hljs-tag">&lt;/<span class="hljs-name">ciManagement</span>&gt;</span>    <br> <span class="hljs-comment">&lt;!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">inceptionYear</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--项目相关邮件列表信息--&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">mailingLists</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。--&gt;</span>     <br>        <span class="hljs-tag">&lt;<span class="hljs-name">mailingList</span>&gt;</span>     <br>         <span class="hljs-comment">&lt;!--邮件的名称--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Demo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建--&gt;</span>     <br>            <span class="hljs-tag">&lt;<span class="hljs-name">post</span>&gt;</span>banseon@126.com<span class="hljs-tag">&lt;/<span class="hljs-name">post</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建--&gt;</span>     <br>            <span class="hljs-tag">&lt;<span class="hljs-name">subscribe</span>&gt;</span>banseon@126.com<span class="hljs-tag">&lt;/<span class="hljs-name">subscribe</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建--&gt;</span>     <br>            <span class="hljs-tag">&lt;<span class="hljs-name">unsubscribe</span>&gt;</span>banseon@126.com<span class="hljs-tag">&lt;/<span class="hljs-name">unsubscribe</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!--你可以浏览邮件信息的URL--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span>http:/hi.baidu.com/banseon/demo/dev/<span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span>     <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mailingList</span>&gt;</span>     <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mailingLists</span>&gt;</span>     <br>    <span class="hljs-comment">&lt;!--项目开发者列表--&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">developers</span>&gt;</span>     <br>     <span class="hljs-comment">&lt;!--某个项目开发者的信息--&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">developer</span>&gt;</span>     <br>         <span class="hljs-comment">&lt;!--SCM里项目开发者的唯一标识符--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>HELLO WORLD<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!--项目开发者的全名--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>banseon<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!--项目开发者的email--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>banseon@126.com<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!--项目开发者的主页的URL--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>/&gt;</span>    <br>            <span class="hljs-comment">&lt;!--项目开发者在项目中扮演的角色，角色元素描述了各种角色--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">roles</span>&gt;</span>     <br>                <span class="hljs-tag">&lt;<span class="hljs-name">role</span>&gt;</span>Project Manager<span class="hljs-tag">&lt;/<span class="hljs-name">role</span>&gt;</span>     <br>                <span class="hljs-tag">&lt;<span class="hljs-name">role</span>&gt;</span>Architect<span class="hljs-tag">&lt;/<span class="hljs-name">role</span>&gt;</span>     <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">roles</span>&gt;</span>    <br>            <span class="hljs-comment">&lt;!--项目开发者所属组织--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">organization</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">organization</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!--项目开发者所属组织的URL--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">organizationUrl</span>&gt;</span>http://hi.baidu.com/banseon<span class="hljs-tag">&lt;/<span class="hljs-name">organizationUrl</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!--项目开发者属性，如即时消息如何处理等--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>     <br>                <span class="hljs-tag">&lt;<span class="hljs-name">dept</span>&gt;</span>No<span class="hljs-tag">&lt;/<span class="hljs-name">dept</span>&gt;</span>     <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <br>            <span class="hljs-comment">&lt;!--项目开发者所在时区， -11到12范围内的整数。--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">timezone</span>&gt;</span>-5<span class="hljs-tag">&lt;/<span class="hljs-name">timezone</span>&gt;</span>     <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">developer</span>&gt;</span>     <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">developers</span>&gt;</span>     <br>    <span class="hljs-comment">&lt;!--项目的其他贡献者列表--&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">contributors</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--项目的其他贡献者。参见developers/developer元素--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">contributor</span>&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">name</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">email</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">url</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">organization</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">organizationUrl</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">roles</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">timezone</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>/&gt;</span>    <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">contributor</span>&gt;</span>         <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">contributors</span>&gt;</span>       <br>    <span class="hljs-comment">&lt;!--该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。--&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">licenses</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。--&gt;</span>     <br>        <span class="hljs-tag">&lt;<span class="hljs-name">license</span>&gt;</span>    <br>         <span class="hljs-comment">&lt;!--license用于法律上的名称--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Apache 2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!--官方的license正文页面的URL--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.baidu.com/banseon/LICENSE-2.0.txt<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!--项目分发的主要方式：    </span><br><span class="hljs-comment">              repo，可以从Maven库下载    </span><br><span class="hljs-comment">              manual， 用户必须手动下载和安装依赖--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">distribution</span>&gt;</span>repo<span class="hljs-tag">&lt;/<span class="hljs-name">distribution</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!--关于license的补充信息--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">comments</span>&gt;</span>A business-friendly OSS license<span class="hljs-tag">&lt;/<span class="hljs-name">comments</span>&gt;</span>     <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">license</span>&gt;</span>     <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">licenses</span>&gt;</span>     <br>    <span class="hljs-comment">&lt;!--SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。--&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">scm</span>&gt;</span>     <br>        <span class="hljs-comment">&lt;!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。--&gt;</span>     <br>        <span class="hljs-tag">&lt;<span class="hljs-name">connection</span>&gt;</span>     <br>            scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)      <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">connection</span>&gt;</span>     <br>        <span class="hljs-comment">&lt;!--给开发者使用的，类似connection元素。即该连接不仅仅只读--&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">developerConnection</span>&gt;</span>     <br>            scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk      <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">developerConnection</span>&gt;</span>    <br>        <span class="hljs-comment">&lt;!--当前代码的标签，在开发阶段默认为HEAD--&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">tag</span>/&gt;</span>           <br>        <span class="hljs-comment">&lt;!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。--&gt;</span>     <br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://svn.baidu.com/banseon<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>     <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">scm</span>&gt;</span>     <br>    <span class="hljs-comment">&lt;!--描述项目所属组织的各种属性。Maven产生的文档用--&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">organization</span>&gt;</span>     <br>     <span class="hljs-comment">&lt;!--组织的全名--&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>     <br>        <span class="hljs-comment">&lt;!--组织主页的URL--&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.baidu.com/banseon<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>     <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">organization</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!--构建项目需要的信息--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">sourceDirectory</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">scriptSourceDirectory</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">testSourceDirectory</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--被编译过的应用程序class文件存放的目录。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--被编译过的测试class文件存放的目录。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">testOutputDirectory</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--使用来自该项目的一系列构建扩展--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--描述使用到的构建扩展。--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">extension</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!--构建扩展的groupId--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--构建扩展的artifactId--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--构建扩展的版本--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">extension</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">extensions</span>&gt;</span>    <br>  <span class="hljs-comment">&lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">defaultGoal</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--这个元素描述了项目相关或测试相关的所有资源路径--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。举个例 子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--描述存放资源的目录，该路径相对POM路径--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--包含的模式列表，例如**/*.xml.--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--排除的模式列表，例如**/*.xml--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>    <br>  <span class="hljs-comment">&lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">testResources</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">testResource</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">testResource</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">testResources</span>&gt;</span>    <br>  <span class="hljs-comment">&lt;!--构建产生的所有文件存放的目录--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--当filtering开关打开时，使用到的过滤器属性文件列表--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">filters</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--使用的插件列表 。--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!--plugin元素包含描述插件所需要的信息。--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--插件在仓库里的group ID--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>/&gt;</span>    <br>     <span class="hljs-comment">&lt;!--插件在仓库里的artifact ID--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>/&gt;</span>    <br>     <span class="hljs-comment">&lt;!--被使用的插件的版本（或版本范围）--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span>    <br>     <span class="hljs-comment">&lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span>/&gt;</span>    <br>     <span class="hljs-comment">&lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span>    <br>      <span class="hljs-comment">&lt;!--execution元素包含了插件执行需要的信息--&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span>    <br>       <span class="hljs-comment">&lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标--&gt;</span>    <br>       <span class="hljs-tag">&lt;<span class="hljs-name">id</span>/&gt;</span>    <br>       <span class="hljs-comment">&lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段--&gt;</span>    <br>       <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>/&gt;</span>    <br>       <span class="hljs-comment">&lt;!--配置的执行目标--&gt;</span>    <br>       <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>/&gt;</span>    <br>       <span class="hljs-comment">&lt;!--配置是否被传播到子POM--&gt;</span>    <br>       <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span>    <br>       <span class="hljs-comment">&lt;!--作为DOM对象的配置--&gt;</span>    <br>       <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span>    <br>      <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span>    <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--项目引入插件所需要的额外依赖--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <br>      <span class="hljs-comment">&lt;!--参见dependencies/dependency元素--&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <br>       ......    <br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>         <br>     <span class="hljs-comment">&lt;!--任何配置是否被传播到子项目--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span>    <br>     <span class="hljs-comment">&lt;!--作为DOM对象的配置--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span>    <br>  <span class="hljs-comment">&lt;!--使用的插件列表--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--参见build/pluginManagement/plugins/plugin元素--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">extensions</span>/&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">phase</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goals</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span>    <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--参见dependencies/dependency元素--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <br>      ......    <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <br> <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>    <br> <span class="hljs-comment">&lt;!--在列的项目构建profile，如果被激活，会修改构建处理--&gt;</span>    <br> <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span>    <br>  <span class="hljs-comment">&lt;!--根据环境参数或命令行参数激活某个构建处理--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">id</span>/&gt;</span>    <br>   <span class="hljs-comment">&lt;!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它    </span><br><span class="hljs-comment">   能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!--profile默认是否激活的标志--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">os</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--激活profile的操作系统的名字--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Windows XP<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--激活profile的操作系统所属家族(如 &#x27;windows&#x27;)--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Windows<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--激活profile的操作系统体系结构 --&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">arch</span>&gt;</span>x86<span class="hljs-tag">&lt;/<span class="hljs-name">arch</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--激活profile的操作系统版本--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.2600<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">os</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!--如果Maven检测到某一个属性（其值可以在POM中通过$&#123;名称&#125;引用），其拥有对应的名称和值，Profile就会被激活。如果值    </span><br><span class="hljs-comment">    字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--激活profile的属性的名称--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mavenVersion<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--激活profile的属性的值--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活    </span><br><span class="hljs-comment">    profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--如果指定的文件存在，则激活profile。--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">exists</span>&gt;</span>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/<span class="hljs-tag">&lt;/<span class="hljs-name">exists</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--如果指定的文件不存在，则激活profile。--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">missing</span>&gt;</span>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/<span class="hljs-tag">&lt;/<span class="hljs-name">missing</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--构建项目所需要的信息。参见build元素--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultGoal</span>/&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span>    <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">testResources</span>&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">testResource</span>&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span>    <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">testResource</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">testResources</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filters</span>/&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>    <br>      <span class="hljs-comment">&lt;!--参见build/pluginManagement/plugins/plugin元素--&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>    <br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">extensions</span>/&gt;</span>    <br>       <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span>    <br>         <span class="hljs-tag">&lt;<span class="hljs-name">id</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">phase</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goals</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span>    <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span>    <br>       <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span>    <br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <br>        <span class="hljs-comment">&lt;!--参见dependencies/dependency元素--&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <br>         ......    <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <br>       <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span>    <br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--参见build/pluginManagement/plugins/plugin元素--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">extensions</span>/&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span>    <br>       <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">phase</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">goals</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span>    <br>       <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span>    <br>      <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <br>       <span class="hljs-comment">&lt;!--参见dependencies/dependency元素--&gt;</span>    <br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <br>        ......    <br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span>    <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>/&gt;</span>    <br>   <span class="hljs-comment">&lt;!--发现依赖和扩展的远程仓库列表。--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!--参见repositories/repository元素--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span>/&gt;</span>    <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span>/&gt;</span>    <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">id</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">url</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">layout</span>/&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--发现插件的远程仓库列表，这些插件用于构建和报表--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepositories</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素--&gt;</span>        <br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepository</span>&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span>/&gt;</span>    <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span>/&gt;</span>    <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">id</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">url</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">layout</span>/&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepository</span>&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepositories</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!--参见dependencies/dependency元素--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <br>     ......    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--不赞成使用. 现在Maven忽略该元素.--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">reports</span>/&gt;</span>       <br>   <span class="hljs-comment">&lt;!--该元素包括使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">reporting</span>&gt;</span>    <br>    ......    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">reporting</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--参见dependencyManagement元素--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--参见dependencies/dependency元素--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <br>      ......    <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--参见distributionManagement元素--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span>    <br>    ......    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--参见properties元素--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>/&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span>    <br> <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span>    <br> <span class="hljs-comment">&lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径--&gt;</span>    <br> <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--发现依赖和扩展的远程仓库列表。--&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span>     <br>     <span class="hljs-comment">&lt;!--包含需要连接到远程仓库的信息--&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span>    <br>         <span class="hljs-comment">&lt;!--如何处理远程仓库里发布版本的下载--&gt;</span>    <br>         <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span>    <br>          <span class="hljs-comment">&lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span>/&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的 策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 --&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span>/&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>banseon-repository-proxy<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>     <br>   <span class="hljs-comment">&lt;!--远程仓库名称--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>banseon-repository-proxy<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!--远程仓库URL，按protocol://hostname/path形式--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.1.169:9999/repository/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然 而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">layout</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span>               <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span>     <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!--发现插件的远程仓库列表，这些插件用于构建和报表--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepositories</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepository</span>&gt;</span>    <br>   ......    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepository</span>&gt;</span>    <br> <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepositories</span>&gt;</span>    <br>       <br>    <span class="hljs-comment">&lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。--&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>     <br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--依赖的group ID--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!--依赖的artifact ID--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-artifact<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应， 尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>    <br>            <span class="hljs-comment">&lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成 JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">classifier</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">classifier</span>&gt;</span>    <br>            <span class="hljs-comment">&lt;!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。    </span><br><span class="hljs-comment">                - compile ：默认范围，用于编译      </span><br><span class="hljs-comment">                - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath      </span><br><span class="hljs-comment">                - runtime: 在执行时需要使用      </span><br><span class="hljs-comment">                - test:    用于test任务时使用      </span><br><span class="hljs-comment">                - system: 需要外在提供相应的元素。通过systemPath来取得      </span><br><span class="hljs-comment">                - systemPath: 仅用于范围为system。提供相应的路径      </span><br><span class="hljs-comment">                - optional:   当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用--&gt;</span>     <br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>       <br>            <span class="hljs-comment">&lt;!--仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如$&#123;java.home&#125;。--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">systemPath</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">systemPath</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>    <br>             <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>     <br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>     <br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>     <br>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>     <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span>       <br>            <span class="hljs-comment">&lt;!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。--&gt;</span>     <br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>    <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!--不赞成使用. 现在Maven忽略该元素.--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">reports</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">reports</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!--该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。--&gt;</span>    <br> <span class="hljs-tag">&lt;<span class="hljs-name">reporting</span>&gt;</span>    <br>  <span class="hljs-comment">&lt;!--true，则，网站不包括默认的报表。这包括“项目信息”菜单中的报表。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">excludeDefaults</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--所有产生的报表存放到哪里。默认值是$&#123;project.build.directory&#125;/site。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--使用的报表插件和他们的配置。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--plugin元素包含描述报表插件需要的信息--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!--报表插件在仓库里的group ID--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--报表插件在仓库里的artifact ID--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--被使用的报表插件的版本（或版本范围）--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--任何配置是否被传播到子项目--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--报表插件的配置--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span>    <br>    <span class="hljs-comment">&lt;!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">reportSets</span>&gt;</span>    <br>     <span class="hljs-comment">&lt;!--表示报表的一个集合，以及产生该集合的配置--&gt;</span>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">reportSet</span>&gt;</span>    <br>      <span class="hljs-comment">&lt;!--报表集合的唯一标识符，POM继承时用到--&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>/&gt;</span>    <br>      <span class="hljs-comment">&lt;!--产生报表集合时，被使用的报表的配置--&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span>    <br>      <span class="hljs-comment">&lt;!--配置是否被继承到子POMs--&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span>    <br>      <span class="hljs-comment">&lt;!--这个集合里使用到哪些报表--&gt;</span>    <br>      <span class="hljs-tag">&lt;<span class="hljs-name">reports</span>/&gt;</span>    <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">reportSet</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">reportSets</span>&gt;</span>    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <br> <span class="hljs-tag">&lt;/<span class="hljs-name">reporting</span>&gt;</span>    <br> <span class="hljs-comment">&lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。--&gt;</span>    <br> <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--参见dependencies/dependency元素--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <br>    ......    <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span>       <br>    <span class="hljs-comment">&lt;!--项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。--&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span>    <br>        <span class="hljs-comment">&lt;!--部署项目产生的构件到远程仓库需要的信息--&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span>    <br>         <span class="hljs-comment">&lt;!--是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">uniqueVersion</span>/&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>banseon-maven2<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>     <br>   <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>banseon maven2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>     <br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>file://$&#123;basedir&#125;/target/deploy<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>     <br>            <span class="hljs-tag">&lt;<span class="hljs-name">layout</span>/&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span>    <br>  <span class="hljs-comment">&lt;!--构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素--&gt;</span>     <br>  <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">uniqueVersion</span>/&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>banseon-maven2<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Banseon-maven2 Snapshot Repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>scp://svn.baidu.com/banseon:/usr/local/maven-snapshot<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>     <br>   <span class="hljs-tag">&lt;<span class="hljs-name">layout</span>/&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span>    <br>  <span class="hljs-comment">&lt;!--部署项目的网站需要的信息--&gt;</span>     <br>        <span class="hljs-tag">&lt;<span class="hljs-name">site</span>&gt;</span>    <br>         <span class="hljs-comment">&lt;!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置--&gt;</span>     <br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>banseon-site<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!--部署位置的名称--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>business api website<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>     <br>            <span class="hljs-comment">&lt;!--部署位置的URL，按protocol://hostname/path形式--&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>     <br>                scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web      <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>     <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">site</span>&gt;</span>    <br>  <span class="hljs-comment">&lt;!--项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">downloadUrl</span>/&gt;</span>    <br>  <span class="hljs-comment">&lt;!--如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">relocation</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--构件新的group ID--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>/&gt;</span>    <br>   <span class="hljs-comment">&lt;!--构件新的artifact ID--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>/&gt;</span>    <br>   <span class="hljs-comment">&lt;!--构件新的版本号--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span>    <br>   <span class="hljs-comment">&lt;!--显示给用户的，关于移动的额外信息，例如原因。--&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">message</span>/&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">relocation</span>&gt;</span>    <br>  <span class="hljs-comment">&lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从 Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部 署），verified（被核实时正确的和最终的）。--&gt;</span>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">status</span>/&gt;</span>           <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!--以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。--&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>/&gt;</span>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7.事务操作</title>
    <link href="/2022/12/23/Spring/7.%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/12/23/Spring/7.%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">由于在 Spring 框架中，编程式事务管理很少使用，所以我们只对 Spring 的声明式事务管理进行详细讲解。<br></code></pre></td></tr></table></figure><p>事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有操作都失败。</p><h1 id="场景介绍-amp-事务引入"><a href="#场景介绍-amp-事务引入" class="headerlink" title="场景介绍&amp;事务引入"></a>场景介绍&amp;事务引入</h1><p>这个例子是一个银行转账的例子，利用事务来实现数据的正确性</p><h2 id="配置xml文件"><a href="#配置xml文件" class="headerlink" title="配置xml文件"></a>配置xml文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置数据库连接池--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/user_db?characterEncoding=UTF-8<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--JdbcTemplate对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入dataSource--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--开启组件扫描--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.C4n.spring5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="插入数据到数据库"><a href="#插入数据到数据库" class="headerlink" title="插入数据到数据库"></a>插入数据到数据库</h2><p>插入以下两条数据到数据库user_db的数据表t_account里面</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-23-16-03-42/image-20221222230558108.png" alt="image-20221222230558108"></p><h2 id="创建类并进行属性注入"><a href="#创建类并进行属性注入" class="headerlink" title="创建类并进行属性注入"></a>创建类并进行属性注入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现转账功能"><a href="#实现转账功能" class="headerlink" title="实现转账功能"></a>实现转账功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br><span class="hljs-comment">//    lucy转账100给mary</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMoney</span><span class="hljs-params">()</span><br>    &#123;<br>        String sql=<span class="hljs-string">&quot;update t_account set money=money-? where username=?&quot;</span>;<br>        jdbcTemplate.update(sql,<span class="hljs-number">100</span>,<span class="hljs-string">&quot;lucy&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduceMoney</span><span class="hljs-params">()</span><br>    &#123;<br>        String sql=<span class="hljs-string">&quot;update t_account set money=money+? where username=?&quot;</span>;<br>        jdbcTemplate.update(sql,<span class="hljs-number">100</span>,<span class="hljs-string">&quot;mary&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accountMoney</span><span class="hljs-params">()</span><br>    &#123;<br>        userDao.reduceMoney();<br>        userDao.addMoney();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAccountMoney</span><span class="hljs-params">()</span><br>&#123;<br>    ApplicationContext context= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    UserService userService=context.getBean(<span class="hljs-string">&quot;userService&quot;</span>,UserService.class);<br>    userService.accountMoney();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="事务引入"><a href="#事务引入" class="headerlink" title="事务引入"></a>事务引入</h2><p>当然，上面的场景在单线程正常情况下是不会发生错误的，但如果在addMoney()后就断电了，没能执行reduceMoney()呢？这时总钱数将不再是2000。不信的话，你可以把加一个 “int i=10/0; “语句在addMoney()和reduceMoney()之间，以模拟异常。</p><p>那我们要怎么解决这个问题呢，我们需要引入事务。以下是一个编程式管理方式实现的事务例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">try</span><br>        &#123;<br><span class="hljs-comment">//            第一步：开启事务</span><br><span class="hljs-comment">//            第二步：进行事务操作</span><br>            userDao.reduceMoney();<br>            <span class="hljs-type">int</span> i=<span class="hljs-number">10</span>/<span class="hljs-number">0</span>;<br>            userDao.addMoney();<br><span class="hljs-comment">//            第三步：没有发生异常，提交事务</span><br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)<br>        &#123;<br><span class="hljs-comment">//            第四步：出现异常，事务回滚</span><br>        &#125;<br></code></pre></td></tr></table></figure><h1 id="声明式事务管理"><a href="#声明式事务管理" class="headerlink" title="声明式事务管理"></a>声明式事务管理</h1><p>在Spring使用声明式事务管理，底层使用AOP原理</p><h2 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h2><p>这里需要先配置让它允许使用注解还有扫描组件</p><h3 id="创建事务管理器并注入数据源"><a href="#创建事务管理器并注入数据源" class="headerlink" title="创建事务管理器并注入数据源"></a>创建事务管理器并注入数据源</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--创建事务管理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入数据源--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="引入名称空间aop和tx"><a href="#引入名称空间aop和tx" class="headerlink" title="引入名称空间aop和tx"></a>引入名称空间aop和tx</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                            http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                            http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                            http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                            &quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="开启事务注解"><a href="#开启事务注解" class="headerlink" title="开启事务注解"></a>开启事务注解</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启事务注解--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tx:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="在Service类上添加事务注解"><a href="#在Service类上添加事务注解" class="headerlink" title="在Service类上添加事务注解"></a>在Service类上添加事务注解</h3><p>可以加到类上面，也可以加到方法上面。加到类上，相当于里面全部方法都使用事务。注意方法内不要自己捕获异常，你自己捕获了的话，事务就捕获不到了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span><br>&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>这样执行后就发现银行里面总金额数不会发生变化，一旦发生了异常，事务就会自动进行回滚</p><h2 id="事务参数"><a href="#事务参数" class="headerlink" title="事务参数"></a>事务参数</h2><h3 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为"></a>传播行为</h3><p>参考 <a href="https://blog.csdn.net/qq_41242680/article/details/118877807?ops_request_misc=%7B%22request_id%22:%22167177259116800186559344%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167177259116800186559344&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-118877807-null-null.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v3&utm_term=spring%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA&spm=1018.2226.3001.4187">Spring事务的7种传播行为_RB_VER的博客-CSDN博客_spring事务传播</a></p><h4 id="REQUIRED"><a href="#REQUIRED" class="headerlink" title="REQUIRED"></a>REQUIRED</h4><p>如果当前有事务在运行，当前的方法就在这个事务内运行，否则，就启动一个新的事务，并在自己的事务内运行。我们考虑这样的场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 单独执行methodB()，因为当前上下文不存在事务，所以就要开启一个新的事务。</span><br><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodB</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// do something</span><br>&#125;<br><br><span class="hljs-comment">// 调用methodA时，因为当前上下文不存在事务，所以会开启一个新的事务。当执行到methodB时，methodB发现当前上下文有事务，因此就加入到当前事务中来。</span><br><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodA</span><span class="hljs-params">()</span> &#123;<br> methodB();<br><span class="hljs-comment">// do something</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="SUPPORT"><a href="#SUPPORT" class="headerlink" title="SUPPORT"></a>SUPPORT</h4><p>如果存在一个事务，支持当前事务。如果没有事务，则非事务的执行。但是对于事务同步的事务管理器，PROPAGATION_SUPPORTS与不使用事务有少许不同。和REQUIED不同的地方只在于单独执行时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 事务属性为SUPPORTS</span><br><span class="hljs-comment">// 如果单独执行methodB()，则以非事务的方式执行</span><br><span class="hljs-meta">@Transactional(propagation = Propagation.SUPPORTS)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodB</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// do something</span><br>&#125;<br><br><span class="hljs-comment">// 调用methodA时，因为当前上下文不存在事务，所以会开启一个新的事务。当执行到methodB时，methodB发现当前上下文有事务，因此就加入到当前事务中来。</span><br><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodA</span><span class="hljs-params">()</span> &#123;<br> methodB();<br><span class="hljs-comment">// do something</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="REQUIRED-NEW"><a href="#REQUIRED-NEW" class="headerlink" title="REQUIRED_NEW"></a>REQUIRED_NEW</h4><p>当前的方法必须启动新事务，并在它自己的事务内运行，如果有事务正在运行，应该将它挂起。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodA</span><span class="hljs-params">()</span> &#123;<br>    doSomeThingA();<br>    methodB();<br>    doSomeThingB();<br>    <span class="hljs-comment">// do something else</span><br>&#125;<br><br><br><span class="hljs-comment">// 事务属性为REQUIRES_NEW</span><br><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodB</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// do something</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">main&#123;  <br>methodA();<br>&#125; <br></code></pre></td></tr></table></figure><p>相当于调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">main()&#123;<br>    <span class="hljs-type">TransactionManager</span> <span class="hljs-variable">tm</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-comment">//获得一个JTA事务管理器</span><br>        tm = getTransactionManager();<br>        tm.begin();<span class="hljs-comment">//开启一个新的事务</span><br>        <span class="hljs-type">Transaction</span> <span class="hljs-variable">ts1</span> <span class="hljs-operator">=</span> tm.getTransaction();<br>        doSomeThing();<br>        tm.suspend();<span class="hljs-comment">//挂起当前事务</span><br>        <span class="hljs-keyword">try</span>&#123;<br>            tm.begin();<span class="hljs-comment">//重新开启第二个事务</span><br>            <span class="hljs-type">Transaction</span> <span class="hljs-variable">ts2</span> <span class="hljs-operator">=</span> tm.getTransaction();<br>            methodB();<br>            ts2.commit();<span class="hljs-comment">//提交第二个事务</span><br>        &#125; Catch(RunTimeException ex) &#123;<br>            ts2.rollback();<span class="hljs-comment">//回滚第二个事务</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//释放资源</span><br>        &#125;<br>        <span class="hljs-comment">//methodB执行完后，恢复第一个事务</span><br>        tm.resume(ts1);<br>        doSomeThingB();<br>        ts1.commit();<span class="hljs-comment">//提交第一个事务</span><br>    &#125; <span class="hljs-keyword">catch</span>(RunTimeException ex) &#123;<br>        ts1.rollback();<span class="hljs-comment">//回滚第一个事务</span><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//释放资源</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，我把ts1称为外层事务，ts2称为内层事务。从上面的代码可以看出，ts2与ts1是两个独立的事务，互不相干。Ts2是否成功并不依赖于 ts1。如果methodA方法在调用methodB方法后的doSomeThingB方法失败了，而methodB方法所做的结果依然被提交。而除了 methodB之外的其它代码导致的结果却被回滚了</p><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><h4 id="事务并发产生的问题"><a href="#事务并发产生的问题" class="headerlink" title="事务并发产生的问题"></a>事务并发产生的问题</h4><h5 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h5><p>事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据。</p><p>比如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">事务B把用户的年龄更新成22岁，但是事务还未提交。此时事务A来读用户的年龄，读到了22岁，然后去做自己的处理。之后事务B把用户的年龄回滚到21岁。这个例子中事务A读到的22岁就是脏数据。<br></code></pre></td></tr></table></figure><h5 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h5><p>事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果不一致。比如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">事务B先把用户的余额更新为100元，事务A来读的时候读到的是100元，然后事务B又把余额更新为90元，此时事务A来读的时候读到的就是90元，也就是事务A读到的数据前后不一致。<br></code></pre></td></tr></table></figure><h5 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h5><p>事务A对表中的数据进行了修改，涉及到表中的全部行。同时，事务B也修改这个表中的数据，向表中插入一行新数据。那么，事务A发现表中还有自己没有修改的行，就好象发生了幻觉一样。</p><p>比如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">A先把所有人的余额清零，同时，B往表中插入了一条余额为100的数据。A提交以后，发现竟然还有100的。就好像发生了幻觉一样，这就叫幻读。<br></code></pre></td></tr></table></figure><h4 id="Spring事务隔离级别"><a href="#Spring事务隔离级别" class="headerlink" title="Spring事务隔离级别"></a>Spring事务隔离级别</h4><p>Mysql默认的事务隔离级别是REPEATABLE_READ。</p><h5 id="DEFAULT"><a href="#DEFAULT" class="headerlink" title="DEFAULT"></a>DEFAULT</h5><p>Spring 中默认的事务隔离级别 ，以连接的数据库的事务隔离级别为准；</p><h5 id="READ-UNCOMMITTED"><a href="#READ-UNCOMMITTED" class="headerlink" title="READ_UNCOMMITTED"></a>READ_UNCOMMITTED</h5><p>读未提交，也叫未提交读，该隔离级别的事务可以看到其他事务中未提交的数据。该隔离级别因为可以读取到其他事务中未提交的数据，而未提交的数据可能会发生回滚，因此我们把该级别读取到的数据称之为脏数据，把这个问题称之为脏读；</p><h5 id="READ-COMMITTED"><a href="#READ-COMMITTED" class="headerlink" title="READ_COMMITTED"></a>READ_COMMITTED</h5><p>读已提交，也叫提交读，该隔离级别的事务能读取到已经提交事务的数据，因此它不会有脏读问题。但由于在事务的执行中可以读取到其他事务提交的结果，所以在不同时间的相同 SQL 查询中，可能会得到不同的结果，这种现象叫做不可重复读；</p><h5 id="REPEATABLE-READ"><a href="#REPEATABLE-READ" class="headerlink" title="REPEATABLE_READ"></a>REPEATABLE_READ</h5><p>可重复读，它能确保同一事务多次查询的结果一致。但也会有新的问题，比如此级别的事务正在执行时，另一个事务成功的插入了某条数据，但因为它每次查询的结果都是一样的，所以会导致查询不到这条数据，自己重复插入时又失败（因为唯一约束的原因）。明明在事务中查询不到这条信息，但自己就是插入不进去，这就叫幻读 （Phantom Read）；</p><h5 id="SERIALIZABLE"><a href="#SERIALIZABLE" class="headerlink" title="SERIALIZABLE"></a>SERIALIZABLE</h5><p>串行化，最高的事务隔离级别，它会强制事务排序，使之不会发生冲突，从而解决了脏读、不可重复读和幻读问题，但因为执行效率低，所以真正使用的场景并不多。</p><table><thead><tr><th>事务隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交(READ_UNCOMMITTED)</td><td>√</td><td>√</td><td>√</td></tr><tr><td>读已提交(READ_COMMITTED)</td><td>×</td><td>√</td><td>√</td></tr><tr><td>可重复读(REPEATABLE_READ)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>串行化(SERIALIZABLE)</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h4 id="设置隔离级别"><a href="#设置隔离级别" class="headerlink" title="设置隔离级别"></a>设置隔离级别</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h3><h4 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h4><p>超时时间</p><ol><li>事务需要在一定时间内进行提交，否则进行回滚</li><li>默认值是-1，表示不会超时，设置时间以秒为单位进行计算</li></ol><h4 id="readOnly"><a href="#readOnly" class="headerlink" title="readOnly"></a>readOnly</h4><p>是否只读</p><ol><li>读：查询操作    写：添加修改删除操作</li><li>readOnly默认值为false，表示可以进行读写</li><li>设置readOnly为true后，则只能进行查询操作</li></ol><h4 id="rollbackFor"><a href="#rollbackFor" class="headerlink" title="rollbackFor"></a>rollbackFor</h4><p>回滚</p><p>设置出现哪些异常进行事务回滚</p><h4 id="noRollbackFor"><a href="#noRollbackFor" class="headerlink" title="noRollbackFor"></a>noRollbackFor</h4><p>设置出现哪些异常不进行回滚</p><h2 id="XML方式"><a href="#XML方式" class="headerlink" title="XML方式"></a>XML方式</h2><h3 id="配置事务管理器"><a href="#配置事务管理器" class="headerlink" title="配置事务管理器"></a>配置事务管理器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                            http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                            http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                            http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                            &quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置数据库连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/user_db?characterEncoding=UTF-8<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--JdbcTemplate对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注入dataSource--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--开启组件扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.C4n.spring5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--创建事务管理器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注入数据源--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置通知"><a href="#配置通知" class="headerlink" title="配置通知"></a>配置通知</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-comment">&lt;!--配置通知--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txadvice&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置事务参数--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--指定哪种规则的方法上面添加事务--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;accountMoney&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;tx:method name=&quot;account*&quot;&gt;&lt;/tx:method&gt; 表示account开头的都添加事物--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置切入点和切面"><a href="#配置切入点和切面" class="headerlink" title="配置切入点和切面"></a>配置切入点和切面</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置切入点和切面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置切入点--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pt&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.C4n.spring5.service.UserService.*(..))&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--配置切面--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txadvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pt&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h2><p>编写配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">// 配置类</span><br><span class="hljs-meta">@ComponentScan(basePackages = &quot;com.C4n.spring5&quot;)</span> <span class="hljs-comment">// 组件扫描</span><br><span class="hljs-meta">@EnableTransactionManagement</span> <span class="hljs-comment">// 开启事务</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TxConfig</span><br>&#123;<br>    <span class="hljs-comment">// 创建数据库连接池</span><br>    <span class="hljs-comment">// 使用Bean注解代表产生一个对象，并交给Spring管理</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title function_">getDataSource</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-comment">//创建数据库连接池，这里也可以通过读取配置文件的方式实现</span><br>        DruidDataSource dataSource=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/user_db?characterEncoding=UTF-8&amp;serverTimezone=UTC&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>    <span class="hljs-comment">// 创建JdbcTemplate对象</span><br>    <span class="hljs-comment">// 这里使用有参方法，Spring会根据类型进行注入，也就是注入上面已经创建的DruidDataSource对象</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">getJdbcTemplate</span><span class="hljs-params">(DataSource dataSource)</span><br>    &#123;<br>        <span class="hljs-comment">//到ioc容器中根据类型找到dataSource</span><br>        JdbcTemplate jdbcTemplate=<span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>();<br>        <span class="hljs-comment">//注入dataSource</span><br>        jdbcTemplate.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> jdbcTemplate;<br>    &#125;<br><br>    <span class="hljs-comment">// 创建事务管理器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSourceTransactionManager <span class="hljs-title function_">getDataSourceTransactionManager</span><span class="hljs-params">(DataSource dataSource)</span><br>    &#123;<br>        DataSourceTransactionManager transactionManager=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>();<br>        transactionManager.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> transactionManager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6.JdbcTemplate</title>
    <link href="/2022/12/22/Spring/6.JdbcTemplate/"/>
    <url>/2022/12/22/Spring/6.JdbcTemplate/</url>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是Spring为简化Jdbc开发而提供的工具，虽然现在鲜少用到，但仍具学习意义。<br></code></pre></td></tr></table></figure><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="先导入这四个jar包"><a href="#先导入这四个jar包" class="headerlink" title="先导入这四个jar包"></a>先导入这四个jar包</h2><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-22-16-16-30/image-20221221200306246.png" alt="image-20221221200306246"></p><h2 id="配置数据库连接池"><a href="#配置数据库连接池" class="headerlink" title="配置数据库连接池"></a>配置数据库连接池</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置数据库连接池--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/populate?characterEncoding=UTF-8<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="创建JdbcTemplate对象并注入属性"><a href="#创建JdbcTemplate对象并注入属性" class="headerlink" title="创建JdbcTemplate对象并注入属性"></a>创建JdbcTemplate对象并注入属性</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--JdbcTemplate对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入dataSource--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="创建Dao对象并注入JdbcTemplate属性"><a href="#创建Dao对象并注入JdbcTemplate属性" class="headerlink" title="创建Dao对象并注入JdbcTemplate属性"></a>创建Dao对象并注入JdbcTemplate属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderitemsDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderitemsDao</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br>&#125;<br></code></pre></td></tr></table></figure><p>service层要用dao层的东西，需要注入dao对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderitemsService</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderitemsDao orderitemsDao;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="增删改记录"><a href="#增删改记录" class="headerlink" title="增删改记录"></a>增删改记录</h1><p>由于增删改记录的操作一样，只是修改一下sql语句，所以这里只演示添加操作</p><h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><p>创建实体类，并添加getter和setter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Orderitems</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> orderNum;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> orderItem;<br>    <span class="hljs-keyword">private</span> String prodId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> quantity;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> itemPrice;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="调用add方法"><a href="#调用add方法" class="headerlink" title="调用add方法"></a>调用add方法</h2><p>在OrderitemsService类中添加addOrderitems方法，并在其中调用dao中add方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOrderitems</span><span class="hljs-params">(Orderitems orderitems)</span><br>&#123;<br>    orderitemsDao.add(orderitems);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现add方法"><a href="#实现add方法" class="headerlink" title="实现add方法"></a>实现add方法</h2><p>在OrderitemsDaoImpl中实现add方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Orderitems orderitems)</span><br>&#123;<br>    <span class="hljs-comment">//创建sql语句</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into orderitems values(?,?,?,?,?)&quot;</span>;<br>    Object[] args = &#123;orderitems.getOrderNum(), orderitems.getOrderItem(), orderitems.getProdId(), orderitems.getQuantity(), orderitems.getItemPrice()&#125;;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, args);<br>    System.out.println(update);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的update方法接受两个参数，第一个参数是sql语句，第二个参数是可变参数(所以也可以传入一个数组)，接受填充占位符(?)的内容。然后update方法会返回一个int类型，他表示受影响的行数。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJdbcTemplate</span><span class="hljs-params">()</span><br>&#123;<br>    ApplicationContext context=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    OrderitemsService orderitemsService=context.getBean(<span class="hljs-string">&quot;orderitemsService&quot;</span>,OrderitemsService.class);<br><br>    Orderitems orderitems=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Orderitems</span>();<br>    orderitems.setOrderNum(<span class="hljs-number">20008</span>);<br>    orderitems.setOrderItem(<span class="hljs-number">5</span>);<br>    orderitems.setProdId(<span class="hljs-string">&quot;ANV02&quot;</span>);<br>    orderitems.setQuantity(<span class="hljs-number">100</span>);<br>    orderitems.setItemPrice(<span class="hljs-number">6.6</span>);<br><br>    orderitemsService.addOrderitems(orderitems);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h1><p>调用方法写在Service中，实现方法写在Dao中</p><h2 id="查询总记录数"><a href="#查询总记录数" class="headerlink" title="查询总记录数"></a>查询总记录数</h2><h3 id="调用selectCount方法"><a href="#调用selectCount方法" class="headerlink" title="调用selectCount方法"></a>调用selectCount方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">selectOrderitemsCount</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> orderitemsDao.selectCount();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现selectCount方法"><a href="#实现selectCount方法" class="headerlink" title="实现selectCount方法"></a>实现selectCount方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">selectCount</span><span class="hljs-params">()</span><br>&#123;<br>    String sql=<span class="hljs-string">&quot;select count(*) from orderitems&quot;</span>;<br>    Integer count=jdbcTemplate.queryForObject(sql,Integer.class);<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的queryForObject方法接受两个参数，第一个参数是sql语句，第二个参数是返回值类型</p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJdbcTemplate</span><span class="hljs-params">()</span><br>&#123;<br>    ApplicationContext context=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    OrderitemsService orderitemsService=context.getBean(<span class="hljs-string">&quot;orderitemsService&quot;</span>,OrderitemsService.class);<br><br>    System.out.println(orderitemsService.selectOrderitemsCount());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查询某一条记录到对象中"><a href="#查询某一条记录到对象中" class="headerlink" title="查询某一条记录到对象中"></a>查询某一条记录到对象中</h2><h3 id="调用selectOne方法"><a href="#调用selectOne方法" class="headerlink" title="调用selectOne方法"></a>调用selectOne方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Orderitems <span class="hljs-title function_">selectOne</span><span class="hljs-params">(<span class="hljs-type">int</span> order_num,String prod_id)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> orderitemsDao.selectOne(order_num,prod_id);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现selectOne方法"><a href="#实现selectOne方法" class="headerlink" title="实现selectOne方法"></a>实现selectOne方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Orderitems <span class="hljs-title function_">selectOne</span><span class="hljs-params">(<span class="hljs-type">int</span> order_num, String prod_id)</span><br>&#123;<br>    String sql=<span class="hljs-string">&quot;select * from orderitems where order_num=? and prod_id=?&quot;</span>;<br>    <span class="hljs-type">Orderitems</span> <span class="hljs-variable">orderitems</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;Orderitems&gt;(Orderitems.class), order_num, prod_id);<br>    <span class="hljs-keyword">return</span> orderitems;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的queryForObject有三个参数啊，第一个参数是sql语句，第二个参数是RowMapper接口实现类，第三个参数是可变参数，接受填充占位符(?)的内容。</p><p>BeanPropertyRowMapper是JDBC给我们封装好的RowMapper接口实现类，直接用就可以。BeanPropertyRowMapper将查询结果注入对象时，是根据查询的表头和属性名一一对应起来。但如果你在Java中用了下划线命名法，在Sql中用了驼峰命名法，那么可以在sql语句中使用别名和实体类进行对应。</p><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJdbcTemplate</span><span class="hljs-params">()</span><br>&#123;<br>    ApplicationContext context=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    OrderitemsService orderitemsService=context.getBean(<span class="hljs-string">&quot;orderitemsService&quot;</span>,OrderitemsService.class);<br><br>    <span class="hljs-type">Orderitems</span> <span class="hljs-variable">orderitems</span> <span class="hljs-operator">=</span> orderitemsService.selectOne(<span class="hljs-number">20009</span>,<span class="hljs-string">&quot;ANV03&quot;</span>);<br>    System.out.println(orderitems);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查询多条记录到集合中"><a href="#查询多条记录到集合中" class="headerlink" title="查询多条记录到集合中"></a>查询多条记录到集合中</h2><h3 id="调用selectAll方法"><a href="#调用selectAll方法" class="headerlink" title="调用selectAll方法"></a>调用selectAll方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Orderitems&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">(<span class="hljs-type">int</span> order_num)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> orderitemsDao.selectAll(order_num);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="调用selectAll方法-1"><a href="#调用selectAll方法-1" class="headerlink" title="调用selectAll方法"></a>调用selectAll方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Orderitems&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">(<span class="hljs-type">int</span> order_num)</span><br>&#123;<br>    String sql=<span class="hljs-string">&quot;select * from orderitems where order_num=?&quot;</span>;<br>    List&lt;Orderitems&gt; orderitemsList = jdbcTemplate.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;Orderitems&gt;(Orderitems.class), order_num);<br>    <span class="hljs-keyword">return</span> orderitemsList;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJdbcTemplate</span><span class="hljs-params">()</span><br>&#123;<br>    ApplicationContext context=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    OrderitemsService orderitemsService=context.getBean(<span class="hljs-string">&quot;orderitemsService&quot;</span>,OrderitemsService.class);<br><br>    List&lt;Orderitems&gt; orderitemsList=orderitemsService.selectAll(<span class="hljs-number">20009</span>);<br>    System.out.println(orderitemsList);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="批量操作中增删改记录"><a href="#批量操作中增删改记录" class="headerlink" title="批量操作中增删改记录"></a>批量操作中增删改记录</h1><p>由于增删改记录的操作一样，只是修改一下sql语句，所以这里只演示添加操作</p><p>使用以下方法即可实现批量添加操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into orderitems values(?,?,?,?,?)&quot;</span>;<br><span class="hljs-type">int</span>[] ints=jdbcTemplate.batchUpdate(sql,batchArgs);<br></code></pre></td></tr></table></figure><p>其中batchArgs是一个List&lt;Object[]&gt;类型，List列表用来存放多条查询语句，Object数组用来存放多个属性，也就是占位符的内容。</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5.AOP</title>
    <link href="/2022/12/17/Spring/5.AOP/"/>
    <url>/2022/12/17/Spring/5.AOP/</url>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">也就是面向切面编程，也就是在不改变源代码的基础上，对方法进行增强或扩展。<br></code></pre></td></tr></table></figure><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p>AOP底层就是用动态代理实现</p><h2 id="编写UserDao类"><a href="#编写UserDao类" class="headerlink" title="编写UserDao类"></a>编写UserDao类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5.dao;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span><br>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;add执行了&quot;</span>);<br>        <span class="hljs-keyword">return</span> a+b;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(String id)</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;update执行了&quot;</span>);<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编写代理类以及测试类"><a href="#编写代理类以及测试类" class="headerlink" title="编写代理类以及测试类"></a>编写代理类以及测试类</h2><p>Proxy.newProxyInstance()有三个参数:</p><ol><li>被代理类的类加载器</li><li>要代理的接口，有些类实现了很多接口，所以这里是用一个Class数组来接收接口</li><li>InvocationHandler实现类。里面实现了invoke方法，代理的工作内容就在这里给出。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKProxy</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        UserDao dao=(UserDao) Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;UserDao.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoProxy</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>()));<br>        System.out.println(dao.add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<br>        System.out.println();<br>        System.out.println(dao.update(<span class="hljs-string">&quot;巴拉巴拉&quot;</span>));<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object obj;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDaoProxy</span><span class="hljs-params">(Object obj)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.obj = obj;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;方法之前执行...&quot;</span>+method.getName()+<span class="hljs-string">&quot; 传递的参数：&quot;</span>+ Arrays.toString(args));<br><span class="hljs-comment">//        执行被增强的方法</span><br>        Object res=method.invoke(obj,args);<br>        System.out.println(<span class="hljs-string">&quot;方法之后执行...&quot;</span>+obj);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="操作术语"><a href="#操作术语" class="headerlink" title="操作术语"></a>操作术语</h1><h2 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h2><p>指类中可以被增强的方法</p><h2 id="切入点"><a href="#切入点" class="headerlink" title="切入点"></a>切入点</h2><p>指实际被增强了的方法</p><h2 id="通知-增强"><a href="#通知-增强" class="headerlink" title="通知(增强)"></a>通知(增强)</h2><p>实际用来做增强的部分就叫通知，也就是新加上去的内容。</p><p>通知有多种类型：</p><ol><li>前置通知</li><li>后置通知(返回通知) ：即目标方法成功执行之后调用通知</li><li>环绕通知</li><li>异常通知</li><li>最终通知</li></ol><h2 id="切面"><a href="#切面" class="headerlink" title="切面"></a>切面</h2><p>切面是一个动作，指把通知应用到切入点的过程。</p><h1 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a>AspectJ</h1><p>AspectJ不是Spring的一部分，但经常放在一起使用。</p><p>首先要导入jar包</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-12-47-14/image-20221217200623687.png" alt="image-20221217200623687"></p><h2 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h2><p>切入点表达式作用：知道对哪个类里面的那个方法进行增强</p><p>execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]))            // *号所有或者默认。修饰符可以不写，返回类型可以用”*“，而参数列表可以用”…”表示。</p><p>如：execution(public int com.C4n.spring5.dao.UserDao.add(int a,int b))</p><h2 id="AOP准备工作"><a href="#AOP准备工作" class="headerlink" title="AOP准备工作"></a>AOP准备工作</h2><p>进行通知的配置</p><ol><li><p>在Spring配置文件中(bean.xml)，开启注解扫描</p></li><li><p>使用注解创建User和UserProxy对象</p></li><li><p>在代理类上面添加注解@Aspect</p></li><li><p>在Spring配置文件中开启生成代理对象</p></li></ol><h3 id="开启注解扫描"><a href="#开启注解扫描" class="headerlink" title="开启注解扫描"></a>开启注解扫描</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--开启组件扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.C4n.spring5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用注解创建对象"><a href="#使用注解创建对象" class="headerlink" title="使用注解创建对象"></a>使用注解创建对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-comment">//被增强的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;adding...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-comment">//增强的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span><br>&#123;<br><span class="hljs-comment">//    前置通知</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;before...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在代理类上面添加-Aspect注解"><a href="#在代理类上面添加-Aspect注解" class="headerlink" title="在代理类上面添加@Aspect注解"></a>在代理类上面添加@Aspect注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-comment">//增强的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span><br>&#123;<br><span class="hljs-comment">//    前置通知</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;before...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在xml中开启生成代理对象"><a href="#在xml中开启生成代理对象" class="headerlink" title="在xml中开启生成代理对象"></a>在xml中开启生成代理对象</h3><p>这行配置的意思就是看到@Aspect注解就生成代理对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启Aspect生成代理对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="AspectJ注解"><a href="#AspectJ注解" class="headerlink" title="AspectJ注解"></a>AspectJ注解</h2><h3 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h3><p>添加前置通知注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//    前置通知</span><br><span class="hljs-meta">@Before(value = &quot;execution(* com.C4n.spring5.dao.User.add(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span><br>&#123;<br>    System.out.println(<span class="hljs-string">&quot;before...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAOP</span><span class="hljs-params">()</span><br>&#123;<br>    ApplicationContext context= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    User user=context.getBean(<span class="hljs-string">&quot;user&quot;</span>,User.class);<br>    user.add();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h3><p>该通知只在方法正常返回后执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  返回通知</span><br><span class="hljs-meta">@AfterReturning(value = &quot;execution(* com.C4n.spring5.dao.User.add(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;afterReturning...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最终通知"><a href="#最终通知" class="headerlink" title="最终通知"></a>最终通知</h3><p>也就是finally，不过有没有异常都会执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  最终通知</span><br><span class="hljs-meta">@After(value = &quot;execution(* com.C4n.spring5.dao.User.add(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span><br>&#123;<br>    System.out.println(<span class="hljs-string">&quot;after...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="异常通知"><a href="#异常通知" class="headerlink" title="异常通知"></a>异常通知</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//  异常通知</span><br>@<span class="hljs-title class_">AfterThrowing</span>(value = <span class="hljs-string">&quot;execution(* com.C4n.spring5.dao.User.add(..))&quot;</span>)<br>public <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span>(<span class="hljs-params"></span>)<br>&#123;<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;afterThrowing...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//    环绕通知</span><br><span class="hljs-meta">@Around(value = &quot;execution(* com.C4n.spring5.dao.User.add(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable<br>&#123;<br>    System.out.println(<span class="hljs-string">&quot;环绕之前...&quot;</span>);<br>    <span class="hljs-comment">//        被增强方法执行</span><br>    proceedingJoinPoint.proceed();<br>    System.out.println(<span class="hljs-string">&quot;环绕之后...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>当有多个相同等级的Aspect注解时，可以加@Order注解设置优先级，数字越小优先级越高。</p><h2 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h2><p>新建配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.C4n.spring5&quot;&#125;)</span>   <span class="hljs-comment">//&lt;context:component-scan base-package=&quot;com.C4n.spring5&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="hljs-meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span>    <span class="hljs-comment">// &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigAop</span><br>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAOP</span><span class="hljs-params">()</span><br>&#123;<br>    ApplicationContext context= <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(ConfigAop.class);<br>    User user=context.getBean(<span class="hljs-string">&quot;user&quot;</span>,User.class);<br>    user.add();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4.Bean管理之注解</title>
    <link href="/2022/12/16/Spring/4.Bean%E7%AE%A1%E7%90%86%E4%B9%8B%E6%B3%A8%E8%A7%A3/"/>
    <url>/2022/12/16/Spring/4.Bean%E7%AE%A1%E7%90%86%E4%B9%8B%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">使用注解的目的是简化xml配置，本文会介绍怎么用注解创建对象并进行属性注入。<br></code></pre></td></tr></table></figure><h1 id="四种注解"><a href="#四种注解" class="headerlink" title="四种注解"></a>四种注解</h1><p>(1)@Component 万能注解<br>(2)@Service 业务层<br>(3)@Controller 控制层<br>(4) @Repository 持久层</p><p>*上面四个注解功能是一样的，都可以用来创建 bean 实例。但通常被放在不同的层中，这是一种约定。</p><h1 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>相比于xml方式，还需要导入 spring-aop-5.3.24.jar</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-02-49-39/image-20221216205313514.png" alt="image-20221216205313514"></p><h2 id="名称空间引入"><a href="#名称空间引入" class="headerlink" title="名称空间引入"></a>名称空间引入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;<br></code></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">xsi:</span>schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span><br></code></pre></td></tr></table></figure><p>组合起来就是这样:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="开启组件扫描"><a href="#开启组件扫描" class="headerlink" title="开启组件扫描"></a>开启组件扫描</h2><p>写在bean根标签内，两种写法都可以，用逗号隔开或者直接用共同的上层目录都可以</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-comment">&lt;!--开启组件扫描--&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;context:component-scan base-package=&quot;com.C4n.spring5.dao,com.C4n.spring5.service&quot;&gt;&lt;/context:component-scan&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.C4n.spring5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="创建类并添加注解"><a href="#创建类并添加注解" class="headerlink" title="创建类并添加注解"></a>创建类并添加注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注解中的value值不写的话，默认就是类名称，但首字母变为小写</span><br><span class="hljs-meta">@Component(value = &quot;userService&quot;)</span> <span class="hljs-comment">//&lt;bean id=userService&gt;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;adding...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testService</span><span class="hljs-params">()</span><br>&#123;<br>    ApplicationContext context= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    UserService userService=context.getBean(<span class="hljs-string">&quot;userService&quot;</span>,UserService.class);<br>    userService.add();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="组件扫描的精细化"><a href="#组件扫描的精细化" class="headerlink" title="组件扫描的精细化"></a>组件扫描的精细化</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  </span><br><span class="hljs-comment">    use-default-filters=&quot;false&quot; 表示不使用默认filter，自己配置filter</span><br><span class="hljs-comment">    context:include-filter 设置只扫描哪些内容，下面配置代表只扫描Controller注解</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.C4n.spring5&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面是使用include-filter的例子，你也可以使用exclude-filter，这样你连use-default-filters=”false”都不用写，他会先扫描全部内容，然后再剔除掉你在exclude-filter中指定的内容。</p><h1 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h1><ol><li>@Autowired: 根据属性类型进行自动装配</li><li>@Qualifier: 根据属性名称进行注入</li><li>@Resource: 可以根据类型注入，也可以根据名称注入</li><li>@Value: 注入普通类型属性</li></ol><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>第一步：把service和dao对象创建，即在service和dao添加创建对象注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span><br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">adding</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;dao adding...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;adding...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二步：在service中注入dao对象，即在service中定义dao类变量，并在其上面使用注入注解。这里根据类型UserDao进行注入，由于UserDaoImpl的父类是UserDao，所以也会被注入。注意这里不需要用get方法和set方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;adding...&quot;</span>);<br>        userDao.adding();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testService</span><span class="hljs-params">()</span><br>&#123;<br>    ApplicationContext context= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    UserService userService=context.getBean(<span class="hljs-string">&quot;userService&quot;</span>,UserService.class);<br>    userService.add();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h2><p>该注解必须和@Autowired一起使用。</p><p>可以解决的问题：一个UserDao接口可能有多个实现类，那么根据类型自动注入的话，它就不知道要注入哪个，这就是@Qualifier要解决的问题。</p><p>第一步：它需要根据名称进行注入，所以在这里添加一个value属性指定名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository(value = &quot;UserDaoImpl1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span><br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">adding</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;dao adding...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二步：在@Autowired下面添加@Qualifier注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(value = &quot;UserDaoImpl1&quot;)</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;adding...&quot;</span>);<br>        userDao.adding();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h2><p>注：@Resource注解不是spring的内容，而是Java扩展包里的内容。Java11移除了@Resource注解。</p><p>这样是根据类型注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span><br>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;adding...&quot;</span>);<br>        userDao.adding();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样是根据名称注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span><br>&#123;<br>    <span class="hljs-meta">@Resource(name = &quot;UserDaoImpl1&quot;)</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;adding...&quot;</span>);<br>        userDao.adding();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(value=&quot;abc&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br></code></pre></td></tr></table></figure><h1 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h1><p>也就是完全不使用xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.C4n.spring5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p>↑以上xml语句相当于↓</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">// 作为配置类，替代xml文件</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.C4n.spring5&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span><br>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写测试文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testService</span><span class="hljs-params">()</span><br>&#123;<br>    ApplicationContext context= <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>    UserService userService=context.getBean(<span class="hljs-string">&quot;userService&quot;</span>,UserService.class);<br>    userService.add();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.Bean管理之XML</title>
    <link href="/2022/12/16/Spring/3.Bean%E7%AE%A1%E7%90%86%E4%B9%8BXML/"/>
    <url>/2022/12/16/Spring/3.Bean%E7%AE%A1%E7%90%86%E4%B9%8BXML/</url>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Bean管理有两个操作，一个是创建对象（无参构造），另一个是注入属性（有参构造方法和Set方法）。而实现这两个操作都有两种方式，一个是基于xml配置文件实现，另一个是基于注解方式实现。<br></code></pre></td></tr></table></figure><h1 id="xml-方式"><a href="#xml-方式" class="headerlink" title="xml 方式"></a>xml 方式</h1><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>加载配置文件时就会调用无参构造方式创建对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置User对象创建--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>id 属性：唯一标识</p><p>class属性：类全路径</p><p>name属性：和id作用一样，但是可以加特殊符号 (很少用name属性)</p><h2 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h2><h3 id="set方法注入属性"><a href="#set方法注入属性" class="headerlink" title="set方法注入属性"></a>set方法注入属性</h3><p>新建类Book，一定要实现 set 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span><br>&#123;<br>    <span class="hljs-keyword">private</span> String bname;<br>    <span class="hljs-keyword">private</span> String bauthor;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBname</span><span class="hljs-params">(String bname)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.bname = bname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBauthor</span><span class="hljs-params">(String bauthor)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.bauthor = bauthor;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Book&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;bname=&#x27;&quot;</span> + bname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, bauthor=&#x27;&quot;</span> + bauthor + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--set方法注入属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.Book&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--使用property完成属性注入</span><br><span class="hljs-comment">        name：类里面属性名称</span><br><span class="hljs-comment">        value：向属性注入的值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;易筋经&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bauthor&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;达摩老祖&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBook</span><span class="hljs-params">()</span><br>    &#123;<br><span class="hljs-comment">//        1.加载配置文件</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br><span class="hljs-comment">//        2.获取配置创建的对象</span><br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;book&quot;</span>, Book.class);<br>        <br>        System.out.println(book);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="有参构造方法注入"><a href="#有参构造方法注入" class="headerlink" title="有参构造方法注入"></a>有参构造方法注入</h3><p>新建类Orders，一定要实现有参构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span><br>&#123;<br>    <span class="hljs-keyword">private</span> String bname;<br>    <span class="hljs-keyword">private</span> String bauthor;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBname</span><span class="hljs-params">(String bname)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.bname = bname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBauthor</span><span class="hljs-params">(String bauthor)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.bauthor = bauthor;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Book&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;bname=&#x27;&quot;</span> + bname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, bauthor=&#x27;&quot;</span> + bauthor + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写配置文件，如果有参构造函数有多个参数，可以使用 index 属性进行注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--有参构造注入属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.Orders&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;电脑&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;China&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOrders</span><span class="hljs-params">()</span><br>    &#123;<br><span class="hljs-comment">//        1.加载配置文件</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br><span class="hljs-comment">//        2.获取配置创建的对象</span><br>        Orders orders= context.getBean(<span class="hljs-string">&quot;orders&quot;</span>,Orders.class);<br><br>        System.out.println(orders);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="注入外部Bean"><a href="#注入外部Bean" class="headerlink" title="注入外部Bean"></a>注入外部Bean</h3><p>也就是通过 ref 属性引用外部的bean对象</p><p>新建类UserDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5.dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span><br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;update...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>新建类UserService，一定要实现set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5.service;<br><br><span class="hljs-keyword">import</span> com.C4n.spring5.dao.UserDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span><br>&#123;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;adding...&quot;</span>);<br>        userDao.update();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--service和dao对象创建--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.service.UserService&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--注入userDao对象</span><br><span class="hljs-comment">           name属性：UserService类里面的变量名</span><br><span class="hljs-comment">           ref属性：创建userDao对象时bean标签里的id值</span><br><span class="hljs-comment">       --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.dao.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写测试文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd</span><span class="hljs-params">()</span><br>&#123;<br>    ApplicationContext context= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    UserService userService=context.getBean(<span class="hljs-string">&quot;userService&quot;</span>,UserService.class);<br>    userService.add();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="级联赋值"><a href="#级联赋值" class="headerlink" title="级联赋值"></a>级联赋值</h3><p>第一种方法是在外部bean里面用set方法注入，再使用ref引入就是级联赋值</p><p>也就是把配置文件改成大概这样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--service和dao对象创建--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.service.UserService&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--注入userDao对象</span><br><span class="hljs-comment">           name属性：UserService类里面的变量名</span><br><span class="hljs-comment">           ref属性：创建userDao对象时bean标签里的id值</span><br><span class="hljs-comment">       --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.dao.UserDaoImpl&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;巴拉巴拉&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;啦啦啦&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二种方法</p> <img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-02-49-24/image-20221216123421237.png" alt="image-20221216123421237" style="zoom:50%;"><p>这种方法需要在Dept类中实现get方法，因为他需要反射get获取dname，然后再用反射set进行赋值。</p><h3 id="注入集合类型属性"><a href="#注入集合类型属性" class="headerlink" title="注入集合类型属性"></a>注入集合类型属性</h3><p>新建类Stu，自行生成set方法和tostring方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5.collectiontype;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Stu</span><br>&#123;<br>    <span class="hljs-keyword">private</span> String[] course;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list;<br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; map;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCourse</span><span class="hljs-params">(String[] course)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.course = course;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setList</span><span class="hljs-params">(List&lt;String&gt; list)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMap</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.map = map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--集合类型属性注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.collectiontype.Stu&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--数组类型注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;course&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>语文<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>数学<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--list类型注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>小三<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--map类型注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;JAVA&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;PHP&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="工厂Bean"><a href="#工厂Bean" class="headerlink" title="工厂Bean"></a>工厂Bean</h2><p>普通Bean是定义什么类型就返回什么，而工厂Bean则不是。</p><h3 id="创建当实例对象"><a href="#创建当实例对象" class="headerlink" title="创建当实例对象"></a>创建当实例对象</h3><p>首先，创建MyBean类，实现FactoryBean接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5.factorybean;<br><br><span class="hljs-keyword">import</span> com.C4n.spring5.Book;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.FactoryBean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;Book&gt;<br>&#123;<br><span class="hljs-comment">//    定义返回Bean</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>        book.setBname(<span class="hljs-string">&quot;易筋经&quot;</span>);<br>        book.setBauthor(<span class="hljs-string">&quot;达摩老祖&quot;</span>);<br>        <span class="hljs-keyword">return</span> book;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType()<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> FactoryBean.<span class="hljs-built_in">super</span>.isSingleton();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写xml。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.factorybean.MyBean&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写测试代码，注意返回类型。默认是单实例对象，也就是每次加载配置文件时都是获取同一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>    ApplicationContext context= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    Book book=context.getBean(<span class="hljs-string">&quot;myBean&quot;</span>,Book.class);<br>    System.out.println(book);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建多实例对象"><a href="#创建多实例对象" class="headerlink" title="创建多实例对象"></a>创建多实例对象</h3><p>在xml文件中增加属性scope</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.factorybean.MyBean&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>    ApplicationContext context= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    Book book1=context.getBean(<span class="hljs-string">&quot;myBean&quot;</span>,Book.class);<br>    Book book2=context.getBean(<span class="hljs-string">&quot;myBean&quot;</span>,Book.class);<br>    System.out.println(book1.hashCode());<br>    System.out.println(book2.hashCode());<br>&#125;<br></code></pre></td></tr></table></figure><p>注：prototype和singletype还有一个区别。prototype是在getBean时才创建对象，而singletype是在加载配置文件的时候就创建对象。</p><h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><p>新建类Dept，并设置set方法和toString方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5.autowire;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dept</span><br>&#123;<br>    <span class="hljs-keyword">private</span> String dname;<br>&#125;<br></code></pre></td></tr></table></figure><p>新建类Emp，并设置set方法和toString方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5.autowire;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span><br>&#123;<br>    <span class="hljs-keyword">private</span> Dept dept;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写xml文件的两种方式"><a href="#编写xml文件的两种方式" class="headerlink" title="编写xml文件的两种方式"></a>编写xml文件的两种方式</h3><p>byName 方式</p><p>注意下面 id=”dept” 这个地方的id值要和 上面 private Dept dept 的变量名一样。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-comment">&lt;!--实现自动装配</span><br><span class="hljs-comment">            bean标签属性autowire，配置自动装配autowire屠性常用两个值:</span><br><span class="hljs-comment">            byName根据属性名称注入 ，注入值bean的id值和类属性名称一样</span><br><span class="hljs-comment">   byType根据属性类型注入</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.autowire.Emp&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.autowire.Dept&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;国防部&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>byType 方式</p><p>此时 id值可以与变量名不同，因为它根据class进行匹配，但要注意同一 Type 只能有一个，不然它就不知道要装配哪一个。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">    &lt;bean id=&quot;emp&quot; class=&quot;com.C4n.spring5.autowire.Emp&quot; autowire=&quot;byType&quot;&gt;<br>&lt;!--        &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;<br>    &lt;/bean&gt;<br>    &lt;bean id=&quot;dept&quot; class=&quot;com.C4n.spring5.autowire.Dept&quot;&gt;<br>        &lt;property name=&quot;dname&quot; value=&quot;国防部&quot;&gt;&lt;/property&gt;<br>    &lt;/bean&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.IOC容器底层原理</title>
    <link href="/2022/12/16/Spring/2.IOC%E5%AE%B9%E5%99%A8%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <url>/2022/12/16/Spring/2.IOC%E5%AE%B9%E5%99%A8%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">框架 = 注解 + 反射 + 设计模式，而IOC = xml解析 + 反射 + 工厂模式<br></code></pre></td></tr></table></figure><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>使用工厂前，如果 UserDao 的构造器改了，那么很多地方都得跟着改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span>()<br>&#123;<br>    excute()<br>    &#123;<br>     UserDao dao=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDao</span>();<br>        dao.add();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span>()<br>&#123;<br>    add()<br>    &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用工厂后，如果 UserDao 的构造器改了，那么只需要更改工厂方法 UserFactory.getDao() 里面的代码。此时，我们就说 UserDao 和 UserService 间实现了解耦合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span>()<br>&#123;<br>    excute()<br>    &#123;<br>     UserDao dao=UserFactory.getDao();<br>        dao.add();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span>()<br>&#123;<br>    add()<br>    &#123;<br>        ...<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserFactory</span>()<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserDao <span class="hljs-title function_">getDao</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDao</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>先配置xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Dao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.UserDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后通过xml解析获得全限定类名，再利用反射方法 forname 获取 class 对象，然后通过 newInstance 构造器获取 UserDao 类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserFactory</span>()<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserDao <span class="hljs-title function_">getDao</span><span class="hljs-params">()</span><br>    &#123;<br>        String classValue=class属性值; <span class="hljs-comment">//通过xml解析获得</span><br>        Class cl=Class.forName(classValue) <br>        <span class="hljs-keyword">return</span> (UserDao)cl.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，如果你更改了 UserDao 类的路径，那么只需要在xml文件中作修改，进一步降低了耦合度</p><h1 id="xml解析"><a href="#xml解析" class="headerlink" title="xml解析"></a>xml解析</h1><p>Spring 提供 IOC容器实现两种方式(两个接口)：</p><ol><li>BeanFactory: 低级接口，Spring内部使用的接口，也就是开发Spring人员使用的。</li><li>ApplicationContext: 高级接口，BeanFactory接口的子接口，功能更强大，也就是提供给开发人员使用的。</li></ol><h2 id="ApplicationContext接口的两个具体实现类"><a href="#ApplicationContext接口的两个具体实现类" class="headerlink" title="ApplicationContext接口的两个具体实现类"></a>ApplicationContext接口的两个具体实现类</h2><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-02-49-15/image-20221216000044454.png" alt="image-20221216000044454"></p><p>ClassPathXmlApplicationContext ：读取 src 目录下的配置文件路径。</p><p>FileSystemXmlApplicationContext ：读取系统文件路径。</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.通过配置文件创建对象</title>
    <link href="/2022/12/15/Spring/1.%E9%80%9A%E8%BF%87%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/12/15/Spring/1.%E9%80%9A%E8%BF%87%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">通过“新的创建对象方式”开始接触Spring5<br></code></pre></td></tr></table></figure><p>开始前要导入这五个jar包</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-02-49-01/image-20221215223445558.png" alt="image-20221215223445558"></p><p>1.首先，在 com.C4n.spring5 中创建类 User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;adding...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2.完成 bean1.xml 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置User对象创建--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里其实只创建了下面这一行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置User对象创建--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.C4n.spring5.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.C4n.spring5.testdemo;<br><br><span class="hljs-keyword">import</span> com.C4n.spring5.User;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSpring5</span><br>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd</span><span class="hljs-params">()</span><br>    &#123;<br><span class="hljs-comment">//           1.加载配置文件</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br><span class="hljs-comment">//        2.获取配置创建的对象（id,类型转换）</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br><br>        System.out.println(user);<br>        user.add();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MYSQL 必知必会笔记</title>
    <link href="/2022/12/13/Mysql/MYSQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/12/13/Mysql/MYSQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>使用小提示：可以搜索’注’来查看需要注意的地方，防止在开始工作后触碰到危险，此时，你便在使用数据库操作的数据过滤。</p><p>注：</p><ol><li>空字符串：’’    和    空：NULL    不同</li><li>sql不区分大小写，包括表内数据</li></ol><h1 id="常用命令行语句"><a href="#常用命令行语句" class="headerlink" title="常用命令行语句"></a>常用命令行语句</h1><p>net start/stop mysql（需要管理员打开cmd）开启或关闭mysql服务</p><p>mysql -u root -p populate 使用root登录，并使用数据库populate</p><h1 id="操作整个查询结果"><a href="#操作整个查询结果" class="headerlink" title="操作整个查询结果"></a>操作整个查询结果</h1><h2 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a>Distinct</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> vend_id <br><span class="hljs-keyword">from</span> products;<br></code></pre></td></tr></table></figure><h2 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> products <br>limit <span class="hljs-number">1</span>,<span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>从第1行开始查，查10个记录。（这种写法是mysql特有的快捷方式）</p><p>标准sql语句为 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> products <br>limit <span class="hljs-number">10</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h2 id="Order-by"><a href="#Order-by" class="headerlink" title="Order by"></a>Order by</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_price,prod_name <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> prod_price,prod_name <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><p>注：</p><ol><li><p>order by 必须是最后出现的子句。</p></li><li><p>如若未使用ORDER BY子句，查询结果的顺序是插入数据的顺序，但这个顺序会因为增删改查导致混乱，一般认为该顺序没有任何意义。</p></li></ol><p>desc代表按降序排列，如果未指定顺序，则默认按升序排列</p><p>上面语句等同于下面语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_price,prod_name <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><p>2和3是指select时写的顺序</p><h1 id="数据过滤"><a href="#数据过滤" class="headerlink" title="数据过滤"></a>数据过滤</h1><h2 id="普通数据过滤"><a href="#普通数据过滤" class="headerlink" title="普通数据过滤"></a>普通数据过滤</h2><h3 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_name,prod_price <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">where</span> prod_price<span class="hljs-operator">=</span><span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><table><thead><tr><th>操作符</th><th>说明</th><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于</td><td>&gt;</td><td>大于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td><td>&gt;=</td><td>大于等于</td></tr><tr><td>!=</td><td>不等于</td><td>!&gt;</td><td>不大于</td></tr><tr><td>&lt;</td><td>小于</td><td>between and</td><td>在指定的两个值之间</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>is null</td><td>为null值</td></tr><tr><td>!&lt;</td><td>不小于</td><td></td><td></td></tr></tbody></table><h3 id="And"><a href="#And" class="headerlink" title="And"></a>And</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_price,prod_name <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">where</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1001</span> <span class="hljs-keyword">and</span> prod_price<span class="hljs-operator">&lt;=</span><span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h3 id="Or"><a href="#Or" class="headerlink" title="Or"></a>Or</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_price,prod_name <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">where</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1001</span> <span class="hljs-keyword">or</span> prod_id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;tnt2&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="In"><a href="#In" class="headerlink" title="In"></a>In</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_price,prod_name <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">where</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1001</span> <span class="hljs-keyword">or</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1002</span>;<br></code></pre></td></tr></table></figure><p>↑↓两种写法结果相同，但 in 子句的可读性更高，且搜索速度更快，所以更推荐使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_price,prod_name <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">where</span> vend_id <span class="hljs-keyword">in</span> (<span class="hljs-number">1001</span>,<span class="hljs-number">1002</span>);<br></code></pre></td></tr></table></figure><h3 id="Not"><a href="#Not" class="headerlink" title="Not"></a>Not</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> products <br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1001</span> <span class="hljs-keyword">or</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1002</span>;<br></code></pre></td></tr></table></figure><p>not 子句会否定紧接其后的条件子句，即 vend_id=1001</p><h2 id="通配符过滤"><a href="#通配符过滤" class="headerlink" title="通配符过滤"></a>通配符过滤</h2><p>注：通配符搜索一般比其他操作都要耗时很多，所以尽量不使用。</p><h3 id><a href="#" class="headerlink" title="%"></a>%</h3><p>贪婪模式，会尽可能匹配多的字符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> prod_id,prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;J%&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title="_"></a>_</h3><p>专一模式，只匹配一个字符</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> prod_id,prod_name<br><span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;TNT%k_&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h1><p>格式化数据。该操作一般可以在客户端完成，但在数据库服务器上完成这些操作比在客户端中完成要快得多。</p><h2 id="Concat"><a href="#Concat" class="headerlink" title="Concat"></a>Concat</h2><p>拼接字段。其他数据库并不是使用concat（）函数来完成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> CONCAT(vend_name,<span class="hljs-string">&#x27;(&#x27;</span>,vend_country,<span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">FROM</span> vendors<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name;<br></code></pre></td></tr></table></figure><h2 id="Rtrim"><a href="#Rtrim" class="headerlink" title="Rtrim"></a>Rtrim</h2><p>去除值右边所有的空格。然后这里并看不出不一样的效果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> CONCAT(vend_name,<span class="hljs-string">&#x27;(&#x27;</span>,RTRIM(vend_country),<span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">FROM</span> vendors<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name;<br></code></pre></td></tr></table></figure><h2 id="As"><a href="#As" class="headerlink" title="As"></a>As</h2><p>取别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> CONCAT(vend_name,<span class="hljs-string">&#x27;(&#x27;</span>,RTRIM(vend_country),<span class="hljs-string">&#x27;)&#x27;</span>)<br><span class="hljs-keyword">AS</span> vend_title<br><span class="hljs-keyword">FROM</span> vendors<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name;<br></code></pre></td></tr></table></figure><h2 id="执行算术运算"><a href="#执行算术运算" class="headerlink" title="执行算术运算"></a>执行算术运算</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_id,<br> quantity,<br> item_price,<br> quantity<span class="hljs-operator">*</span>item_price <span class="hljs-keyword">as</span> expanded_price<br><span class="hljs-keyword">FROM</span> orderitems<br><span class="hljs-keyword">WHERE</span> order_num<span class="hljs-operator">=</span><span class="hljs-number">20009</span><br></code></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_name,<span class="hljs-built_in">UPPER</span>(vend_name) <span class="hljs-keyword">AS</span> vend_name_upcase<br><span class="hljs-keyword">FROM</span> vendors<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name;<br></code></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>LEFT(str,len)</td><td>返回字符串左边的字符</td></tr><tr><td>LENGTH()</td><td>返回字符串长度</td></tr><tr><td>LOWER()</td><td>将字符串转换为小写</td></tr><tr><td>LTRIM()</td><td>去掉字符串左边的空格</td></tr><tr><td>RIGHT()</td><td>返回字符串右边的空格</td></tr><tr><td>RTRIM()</td><td>去掉字符串右边的空格</td></tr><tr><td>SUBSTR(str FROM pos FOR len)</td><td>提取字符串的组成部分</td></tr><tr><td>SOUNDEX()</td><td>返回字符串的SOUNDEX值</td></tr><tr><td>UPPER()</td><td>将字符串转换为大写</td></tr></tbody></table><h2 id="日期处理函数"><a href="#日期处理函数" class="headerlink" title="日期处理函数"></a>日期处理函数</h2><h3 id="Extract"><a href="#Extract" class="headerlink" title="Extract"></a>Extract</h3><p>返回日期中的一部分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">EXTRACT</span>(<span class="hljs-keyword">month</span> <span class="hljs-keyword">FROM</span> order_date)<span class="hljs-operator">=</span><span class="hljs-number">9</span>;<br></code></pre></td></tr></table></figure><h3 id="To-days"><a href="#To-days" class="headerlink" title="To_days"></a>To_days</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">WHERE</span> TO_DAYS(order_date) <span class="hljs-keyword">BETWEEN</span> TO_DAYS(<span class="hljs-string">&#x27;2005-09-01&#x27;</span>) <span class="hljs-keyword">AND</span> TO_DAYS(<span class="hljs-string">&#x27;2005-10-01&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>ABS()</td><td>返回一个数的绝对值</td></tr><tr><td>COS()</td><td>返回一个角度的余弦</td></tr><tr><td>EXP()</td><td>返回一个数的指数值</td></tr><tr><td>PI()</td><td>返回圆周率的值</td></tr><tr><td>SIN()</td><td>返回一个角度的正弦</td></tr><tr><td>SQRT()</td><td>返回一个数的平方根</td></tr><tr><td>TAN()</td><td>返回一个角度的正切</td></tr></tbody></table><h2 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h2><h3 id="Avg"><a href="#Avg" class="headerlink" title="Avg"></a>Avg</h3><p>注：总是忽略NULL值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(prod_price) <span class="hljs-keyword">AS</span> avg_price<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> vend_id<span class="hljs-operator">=</span><span class="hljs-number">1001</span>;<br></code></pre></td></tr></table></figure><h3 id="Count"><a href="#Count" class="headerlink" title="Count"></a>Count</h3><p>注：</p><p>使用COUNT(*) 时，不忽略NULL</p><p>使用COUNT(column)对特定列进行计数时，忽略NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> num_cust<br><span class="hljs-keyword">FROM</span> customers;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(cust_email) <span class="hljs-keyword">AS</span> num_cust<br><span class="hljs-keyword">FROM</span> customers;<br></code></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>AVG()</td><td>返回某列的平均值</td></tr><tr><td>COUNT()</td><td>返回某列的行数</td></tr><tr><td>MAX()</td><td>返回某列的最大值</td></tr><tr><td>MIN()</td><td>返回某列的最小值</td></tr><tr><td>SUM()</td><td>返回某列值之和</td></tr></tbody></table><p>以上五个函数均可使用 ALL 和 DISTINCT ，默认为 ALL；但要注意，count(*) 不能使用DISTINCT()</p><h1 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h1><h2 id="Group-by"><a href="#Group-by" class="headerlink" title="Group by"></a>Group by</h2><p>计算聚集时进行分组</p><p>注：</p><ol><li>GROUP BY 子句必须出现在WHERE子句之后，ORDER BY之前</li><li>不能在 GROUP BY 后使用别名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_id,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> num_prods<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> vend_id;<br></code></pre></td></tr></table></figure><h2 id="Having"><a href="#Having" class="headerlink" title="Having"></a>Having</h2><p>过滤分组</p><p>很明显，执行顺序是先 GROUP BY 进行分组，再对每一个分组进行 Having 过滤</p><p>注：WHERE 在数据分组前进行过滤，Having 在数据分组后进行过滤</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_id <span class="hljs-keyword">AS</span> id,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> num_prods<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> vend_id<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&lt;=</span> <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><h2 id="在过滤字段中使用子查询"><a href="#在过滤字段中使用子查询" class="headerlink" title="在过滤字段中使用子查询"></a>在过滤字段中使用子查询</h2><p>如果要查询下了 prod=‘FB’ 这些订单的顾客 的 cust_id。可以分为两步进行</p><p>第一步：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> order_num<br><span class="hljs-keyword">FROM</span> orderitems<br><span class="hljs-keyword">WHERE</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;FB&#x27;</span>;<br></code></pre></td></tr></table></figure><p>第一步执行完会返回 order_num 值 20005,20009</p><p>第二步：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_id <br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">WHERE</span> order_num <span class="hljs-keyword">IN</span> (<span class="hljs-number">20005</span>,<span class="hljs-number">20009</span>);<br></code></pre></td></tr></table></figure><p>然后我们把这两步嵌套起来，就是所谓的子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_id <br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">WHERE</span> order_num <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> order_num<br>   <span class="hljs-keyword">FROM</span> orderitems<br>   <span class="hljs-keyword">WHERE</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;FB&#x27;</span>);<br></code></pre></td></tr></table></figure><p>如果还要进一步查找这些顾客的信息，就可以再嵌套一层</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name,cust_contact<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_id <span class="hljs-keyword">IN</span>(<span class="hljs-keyword">SELECT</span> cust_id <br>                 <span class="hljs-keyword">FROM</span> orders<br>                 <span class="hljs-keyword">WHERE</span> order_num <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> order_num<br>                                     <span class="hljs-keyword">FROM</span> orderitems<br>                                     <span class="hljs-keyword">WHERE</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;FB&#x27;</span>));<br></code></pre></td></tr></table></figure><p>注：子查询子句结果只能有单个列，否则将会报错。</p><h2 id="在计算字段中使用子查询"><a href="#在计算字段中使用子查询" class="headerlink" title="在计算字段中使用子查询"></a>在计算字段中使用子查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> orders<br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">WHERE</span> cust_id<span class="hljs-operator">=</span><span class="hljs-number">10001</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name,cust_state,(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br>                             <span class="hljs-keyword">FROM</span> orders<br>                             <span class="hljs-keyword">WHERE</span> orders.cust_id<span class="hljs-operator">=</span>customers.cust_id) <span class="hljs-keyword">AS</span> orders<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> cust_name;<br></code></pre></td></tr></table></figure><h1 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h1><h2 id="等值联结"><a href="#等值联结" class="headerlink" title="等值联结"></a>等值联结</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_name,prod_name,prod_price<br><span class="hljs-keyword">FROM</span> vendors,products<br><span class="hljs-keyword">WHERE</span> vendors.vend_id<span class="hljs-operator">=</span>products.vend_id;<br></code></pre></td></tr></table></figure><p>过程是这样的，数据库会固定vendors第一行，然后从头扫描products每一行，看看有没有 vendors.vend_id=products.vend_id 的，然后固定 vendors 第二行，继续从头扫描products…</p><p>也就是说，如果没又 WHERE  子句，返回的将会是全连接图，也就是笛卡尔积。</p><h2 id="内联结"><a href="#内联结" class="headerlink" title="内联结"></a>内联结</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_name,prod_name,prod_price<br><span class="hljs-keyword">FROM</span> vendors<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> products<br><span class="hljs-keyword">ON</span> vendors.vend_id<span class="hljs-operator">=</span>products.vend_id;<br></code></pre></td></tr></table></figure><p>结果和上面的等值联结相同。</p><h2 id="多表联结"><a href="#多表联结" class="headerlink" title="多表联结"></a>多表联结</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> cust_name,cust_contact<br><span class="hljs-keyword">FROM</span> customers,orders,orderItems<br><span class="hljs-keyword">WHERE</span> customers.cust_id<span class="hljs-operator">=</span>orders.cust_id<br><span class="hljs-keyword">AND</span> orderItems.order_num<span class="hljs-operator">=</span>orders.order_num<br><span class="hljs-keyword">AND</span> prod_id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;FB&#x27;</span>;<br></code></pre></td></tr></table></figure><p>该查询结果和下面的子查询结果相同。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name,cust_contact<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_id <span class="hljs-keyword">IN</span>(<span class="hljs-keyword">SELECT</span> cust_id <br>                 <span class="hljs-keyword">FROM</span> orders<br>                 <span class="hljs-keyword">WHERE</span> order_num <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> order_num<br>                                     <span class="hljs-keyword">FROM</span> orderitems<br>                                     <span class="hljs-keyword">WHERE</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;FB&#x27;</span>));<br></code></pre></td></tr></table></figure><h1 id="高级联结"><a href="#高级联结" class="headerlink" title="高级联结"></a>高级联结</h1><h2 id="表别名"><a href="#表别名" class="headerlink" title="表别名"></a>表别名</h2><p>使用表别名主要的优点是：运行在一条 SELECT 语句中多次使用相同的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> cust_name,cust_contact<br><span class="hljs-keyword">FROM</span> customers <span class="hljs-keyword">AS</span> C,orders <span class="hljs-keyword">AS</span> O,orderItems <span class="hljs-keyword">AS</span> OI<br><span class="hljs-keyword">WHERE</span> C.cust_id<span class="hljs-operator">=</span>O.cust_id<br><span class="hljs-keyword">AND</span> OI.order_num<span class="hljs-operator">=</span>O.order_num<br><span class="hljs-keyword">AND</span> prod_id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;FB&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a>自联结</h2><p>先插入一行数据，以便于后面演示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> customers<br><span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">10006</span>,<span class="hljs-string">&#x27;Wascals&#x27;</span>,<span class="hljs-string">&#x27;829 Riverside Drive&#x27;</span>,<span class="hljs-string">&#x27;Phoenix&#x27;</span>,<span class="hljs-string">&#x27;AZ&#x27;</span>,<span class="hljs-number">88889</span>,<span class="hljs-string">&#x27;USA&#x27;</span>,<span class="hljs-string">&#x27;Y Sam&#x27;</span>,<span class="hljs-string">&#x27;sam@yosemite.com&#x27;</span>);<br></code></pre></td></tr></table></figure><p>题目是：假如要给与Jim Jones同一公司的所有顾客发送一封信件。这个查询要求首先找出Jim Jones工作的公司，然后找出在该公司工作的顾客。下面是解决此问题的一种方法。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> c1.cust_id,c1.cust_name,c1.cust_contact<br><span class="hljs-keyword">FROM</span> customers <span class="hljs-keyword">as</span> c1,customers <span class="hljs-keyword">as</span> c2<br><span class="hljs-keyword">WHERE</span> c1.cust_name<span class="hljs-operator">=</span>c2.cust_name<br><span class="hljs-keyword">AND</span> c2.cust_contact<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Jim Jones&#x27;</span>;<br></code></pre></td></tr></table></figure><p>使用 c1 和 c2 作为 customers 的别名，就可以在同一 SELECT 中使用多次 customers </p><h2 id="外联结"><a href="#外联结" class="headerlink" title="外联结"></a>外联结</h2><p>外联结包含了那些在相关表中没有关联行的行。</p><p>如列出所有产品以及订购数量，包含没有人订购的产品。</p><p>我们先给出一个内联结</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> customers.cust_id,orders.order_num<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> orders <span class="hljs-keyword">ON</span> customers.cust_id<span class="hljs-operator">=</span>orders.cust_id;<br></code></pre></td></tr></table></figure><p>然后再给出一个左外联结</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> customers.cust_id,orders.order_num<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> orders <span class="hljs-keyword">ON</span> customers.cust_id<span class="hljs-operator">=</span>orders.cust_id;<br></code></pre></td></tr></table></figure><p>比较他们的查询结果可以发现，内联结没有null项，而外联结有。</p><p>而 LEFT 和 RIGHT 是用来指定包含所有行的表。</p><p>上面外查询语句由于使用了 LEFT ，所有出现的 null 项都是 OUTER JOIN 左边的表，也就是 customers 表的。</p><p>从结果来看，cust_id 为 10002 出现了 null 项，证明 customers 表中有cust_id 为 10002 的项，而 orders 表中没有。</p><h1 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h1><h2 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h2><p>UNION 操作符可以将多条 SELECT 语句组合成一个结果集</p><p>注：</p><ol><li>UNION 左右两边查询结果列数应该相同</li><li>UNION 默认去除重复行，可以使用 UNION ALL 来取消去重效果，这是 WHERE 子句不能够完成的。</li><li>只能使用一条 ORDER BY 子句</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name,cust_contact,cust_email<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_state <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;IL&#x27;</span>,<span class="hljs-string">&#x27;IN&#x27;</span>,<span class="hljs-string">&#x27;MI&#x27;</span>)<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> cust_name,cust_contact,cust_email<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Wascals&#x27;</span>;<br></code></pre></td></tr></table></figure><p>以上查询语句相当于↓</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name,cust_contact,cust_email<br><span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_state <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;IL&#x27;</span>,<span class="hljs-string">&#x27;IN&#x27;</span>,<span class="hljs-string">&#x27;MI&#x27;</span>) <span class="hljs-keyword">OR</span> cust_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Wascals&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><h2 id="普通数据插入"><a href="#普通数据插入" class="headerlink" title="普通数据插入"></a>普通数据插入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> customers<br><span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">10007</span>,<span class="hljs-string">&#x27;Wascals&#x27;</span>,<span class="hljs-string">&#x27;829 Riverside Drive&#x27;</span>,<span class="hljs-string">&#x27;Phoenix&#x27;</span>,<span class="hljs-string">&#x27;AZ&#x27;</span>,<span class="hljs-number">88889</span>,<span class="hljs-string">&#x27;USA&#x27;</span>,<span class="hljs-string">&#x27;Y Sam&#x27;</span>,<span class="hljs-string">&#x27;sam@yosemite.com&#x27;</span>),<br>(<span class="hljs-number">10008</span>,<span class="hljs-string">&#x27;Wascals&#x27;</span>,<span class="hljs-string">&#x27;829 Riverside Drive&#x27;</span>,<span class="hljs-string">&#x27;Phoenix&#x27;</span>,<span class="hljs-string">&#x27;AZ&#x27;</span>,<span class="hljs-number">88889</span>,<span class="hljs-string">&#x27;USA&#x27;</span>,<span class="hljs-string">&#x27;Y Sam&#x27;</span>,<span class="hljs-string">&#x27;sam@yosemite.com&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> customers(列名<span class="hljs-number">1</span>,列名<span class="hljs-number">2</span>,...)#此处列名可以省略不写，但给出列名的话，可以用不同的列的顺序给出记录，也可以省略某些列<br><span class="hljs-keyword">VALUES</span><br>(列<span class="hljs-number">1</span>,列<span class="hljs-number">2</span>,...),#用逗号隔开多条记录<br>(列<span class="hljs-number">1</span>,列<span class="hljs-number">2</span>,...<br></code></pre></td></tr></table></figure><p>注：省略的列要求允许NULL值或者有默认值。</p><h2 id="插入检索出的数据"><a href="#插入检索出的数据" class="headerlink" title="插入检索出的数据"></a>插入检索出的数据</h2><p>注:  INSERT 和 SELECT 子句中的列位置要相同，因为 DBMS 是使用列的位置作为填充依据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> customers (cust_id,<br>                        cust_name,<br>                        cust_address,<br>                        cust_city,<br>                        cust_state,<br>                        cust_zip,<br>                        cust_country,<br>                        cust_contact,<br>                        cust_email)<br><span class="hljs-keyword">SELECT</span> cust_id,<br>        cust_name,<br>        cust_address,<br>        cust_city,<br>        cust_state,<br>        cust_zip,<br>        cust_country,<br>        cust_contact,<br>        cust_email<br><span class="hljs-keyword">FROM</span> custnew;<br></code></pre></td></tr></table></figure><p>由于列名很多，最好先执行下面语句获取表头</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> columns <span class="hljs-keyword">from</span> customers;<br></code></pre></td></tr></table></figure><h2 id="从一个表复制到另外一个表"><a href="#从一个表复制到另外一个表" class="headerlink" title="从一个表复制到另外一个表"></a>从一个表复制到另外一个表</h2><p>下列语句在不同数据库中可能写法不同</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> custcopy <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> customers;<br></code></pre></td></tr></table></figure><h1 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h1><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> customers<br><span class="hljs-keyword">SET</span> cust_email<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10086@qq.com&#x27;</span>,<br>cust_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Michel&#x27;</span><br><span class="hljs-keyword">WHERE</span> cust_id<span class="hljs-operator">=</span><span class="hljs-number">10006</span>;<br></code></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> customers<br><span class="hljs-keyword">WHERE</span> cust_id<span class="hljs-operator">=</span><span class="hljs-number">10006</span>;<br></code></pre></td></tr></table></figure><h1 id="创建和操纵表"><a href="#创建和操纵表" class="headerlink" title="创建和操纵表"></a>创建和操纵表</h1><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> products<br>(<br>  prod_id    <span class="hljs-type">char</span>(<span class="hljs-number">10</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  vend_id    <span class="hljs-type">int</span>           <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>  prod_name  <span class="hljs-type">char</span>(<span class="hljs-number">255</span>)     <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>  prod_price <span class="hljs-type">decimal</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>  prod_desc  text          <span class="hljs-keyword">NULL</span> ,<br>  <span class="hljs-keyword">PRIMARY</span> KEY(prod_id)<br>);<br></code></pre></td></tr></table></figure><p>创建表还有很多可选项，如果默认值，默认日期。对了，最常用的莫过于你可以让性别为一个枚举型，只能在男女中选一个。</p><h2 id="更新表"><a href="#更新表" class="headerlink" title="更新表"></a>更新表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> vendors<br><span class="hljs-keyword">ADD</span> vend_phone <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> custcopy;<br></code></pre></td></tr></table></figure><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>视图是虚拟的表，存储的是查询结果。</p><p>它可以用来简化复杂数据的处理，例如你经常需要使用某一个格式化后的结果，也就是使用例如了CONCAT() 函数后的结果，那么最好就是创建一个视图，使用它即可。</p><h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> ProductCustomers <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> cust_name,cust_contact,prod_id<br><span class="hljs-keyword">FROM</span> customers,orders,orderitems<br><span class="hljs-keyword">WHERE</span> customers.cust_id<span class="hljs-operator">=</span>orders.cust_id<br><span class="hljs-keyword">AND</span> orderitems.order_num<span class="hljs-operator">=</span>orders.order_num;<br></code></pre></td></tr></table></figure><h2 id="使用视图进行查询"><a href="#使用视图进行查询" class="headerlink" title="使用视图进行查询"></a>使用视图进行查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name,cust_contact<br><span class="hljs-keyword">FROM</span> productcustomers<br><span class="hljs-keyword">WHERE</span> prod_id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;FB&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>防火墙实现访问控制</title>
    <link href="/2022/11/01/Shell/%E9%98%B2%E7%81%AB%E5%A2%99%E5%AE%9E%E7%8E%B0%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/"/>
    <url>/2022/11/01/Shell/%E9%98%B2%E7%81%AB%E5%A2%99%E5%AE%9E%E7%8E%B0%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="init-sh-文件"><a href="#init-sh-文件" class="headerlink" title="init.sh 文件"></a>init.sh 文件</h1><p>该文件用于初始化服务，创建完全部文件后，只需要将全部文件放在同一个文件夹，然后运行 init.sh ，即可开始使用 firectl 服务。</p><p>该服务使用起来很简单，你可以在任一目录的命令行模式下输入 firectl ，即可调出操作菜单，其余操作都在操作菜单中进行选择就会自动执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">授予shell文件执行权限</span><br>chmod +x $(cd `dirname $0`; pwd)/firectl_main.sh<br>chmod +x $(cd `dirname $0`; pwd)/firectl<br><span class="hljs-meta prompt_"># </span><span class="language-bash">以递归形式新建文件夹</span><br>mkdir -p /firectl_dir<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将当前目录的文件移动到特定位置</span><br>mv $(cd `dirname $0`; pwd)/firectl /bin/<br>mv $(cd `dirname $0`; pwd)/firectl_main.sh /firectl_dir/<br>mv $(cd `dirname $0`; pwd)/firectl.service /etc/systemd/system/<br>mv $(cd `dirname $0`; pwd)/firectl.conf /firectl_dir/<br>mv $(cd `dirname $0`; pwd)/main.py /firectl_dir/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启防火墙的ftp端口</span><br>firewall-cmd --permanent --add-port=21/tcp &gt;/dev/null 2&gt;&amp;1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">自动安装vsftpd 如果只使用vsftpd服务，则可以把下面的代码注释给取消掉，vsftpd是一个不对称服务，所以比较常用防火墙来进行拦截</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">tmp=`systemctl status vsftpd |grep <span class="hljs-string">&quot;Active:&quot;</span> |awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>` &amp;&gt;/dev/null</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$tmp</span> != active &amp;&amp; <span class="hljs-variable">$tmp</span> != inactive ]];<span class="hljs-keyword">then</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    yum install -y vsftpd</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">fi</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl restart vsftpd</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">自动安装python3 如果python3不存在，则自动安装</span><br>if ! type pip3 &gt;/dev/null 2&gt;&amp;1; then<br>    echo &#x27;python3 is not installed.&#x27;<br>    echo &#x27;Please wait while it is being installed for you.&#x27;<br>    yum -y install python3;<br>    echo &#x27;python3 is installed.&#x27;<br>fi<br><br>echo &#x27;初始化完成&#x27;<br>echo &#x27;如果python3没安装成功，请自行输入 yum -y install python3 进行安装&#x27;<br>echo &#x27;祝您使用愉快&#x27;<br>rm -f $0<br></code></pre></td></tr></table></figure><h1 id="firectl-conf-配置文件"><a href="#firectl-conf-配置文件" class="headerlink" title="firectl.conf 配置文件"></a>firectl.conf 配置文件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">service_name=vsftpd,httpd</span><br>[vsftpd]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">允许访问或者拒绝访问的时间段</span><br>open_time=2022-11-05 09:32-09:33<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定的地址池，可以添加多个地址，用逗号分隔</span><br>ip_pool=172.24.27.0/24,172.24.28.0/24<br><span class="hljs-meta prompt_"># </span><span class="language-bash">access为<span class="hljs-built_in">yes</span>则代表地址池内的ip是在时间段内允许访问，access为no则代表地址池内的ip是在时间段内拒绝访问</span><br>access=yes<br><span class="hljs-meta prompt_">#</span><span class="language-bash">可自行添加其他服务</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[httpd]</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">open_time=2022-11-03 09:32-09:33</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ip_pool=172.24.27.0/24,172.24.28.0/24</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">access=<span class="hljs-built_in">yes</span></span><br></code></pre></td></tr></table></figure><h1 id="firectl-文件"><a href="#firectl-文件" class="headerlink" title="firectl 文件"></a>firectl 文件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">字体颜色</span><br>red=&#x27;\e[91m&#x27;<br>green=&#x27;\e[92m&#x27;<br>yellow=&#x27;\e[93m&#x27;<br>magenta=&#x27;\e[95m&#x27;<br>none=&#x27;\e[0m&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取firectl_main.sh进程的pid</span><br>firectl_pid=$(pgrep firectl_main.sh)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果该pid存在，证明该程序有在运行</span><br>if [ $firectl_pid ];then<br>    firectl_status=&quot;$green正在运行$none&quot;<br>else<br>    firectl_status=&quot;$red未在运行$none&quot;<br>fi<br><span class="hljs-meta prompt_"># </span><span class="language-bash">该函数用于控制firectl的服务程序</span><br>firectl_service()&#123;<br>    while :; do<br>    echo<br>    echo -e &quot;$yellow 1. $none启动 firectl&quot;<br>    echo<br>    echo -e &quot;$yellow 2. $none停止 firectl&quot;<br>    echo<br>    echo -e &quot;$yellow 3. $none重启 firectl&quot;<br>    echo<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将获取到数字放在_opt变量中</span><br>    read -p &quot;$(echo -e &quot;请选择 [$&#123;magenta&#125;1-3$none]:&quot;)&quot; _opt<br>    if [[ -z $_opt ]]; then<br>        error<br>    else<br>        case $_opt in<br>        1)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果选项为1，则start服务</span><br>            systemctl start firectl.service<br>            break<br>            ;;<br>        2)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果选项为2，则stop服务，并且使用python3 /firectl_dir/main.py stop命令来清空allow和deny中增加的内容</span><br>            systemctl stop firectl.service<br>cd /firectl_dir/<br>python3 /firectl_dir/main.py stop<br>            break<br>            ;;<br>        3)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果选项为3，则restart服务</span><br>            systemctl restart firectl.service<br>            break<br>            ;;<br>        *)<br>            error<br>            ;;<br>        esac<br>    fi<br>    done<br>&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">该函数用于卸载程序</span><br>firectl_uninstall()&#123;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除文件</span><br>rm -f /firectl_dir/firectl_main.sh<br>rm -f /etc/systemd/system/firectl.service<br>rm -f /firectl_dir/firectl.conf<br>rm -f /firectl_dir/main.py<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除目录</span><br>rmdir /firectl_dir<br>echo &quot;卸载完成&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除本脚本程序</span><br>rm -f $0<br>&#125;<br>menu() &#123;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">清屏</span><br>clear<br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出主菜单</span><br>while :; do<br>echo<br>echo &quot;.................... firectl 管理脚本 ...................&quot;<br>echo<br>echo -e &quot;## firectl 状态: $firectl_status ##&quot;<br>        echo<br>echo -e &quot;$yellow  1. $none查看 firectl 配置&quot;<br>echo<br>echo -e &quot;$yellow  2. $none修改 firectl 配置&quot;<br>echo<br>echo -e &quot;$yellow  3. $none启动 / 停止 / 重启&quot;<br>echo<br>echo -e &quot;$yellow  4. $none卸载 firectl&quot;<br>echo<br>echo -e &quot;温馨提示:  如果你不想执行选项   按$yellow Ctrl + C $none即可退出&quot;<br>echo<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将获取到数字放在choose变量中</span><br>read -p &quot;$(echo -e &quot;请选择菜单 [$&#123;magenta&#125;1-4$none]:&quot;)&quot; choose<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果choose为空，则退出</span><br>if [[ -z $choose ]]; then<br>exit 1<br>else<br>case $choose in<br>1)<br># 如果选项为1，则将配置文件的内容cat出来<br>cat /firectl_dir/firectl.conf<br>break<br>;;<br>2)<br># 如果选项为2，则vim配置文件<br>vim /firectl_dir/firectl.conf<br>break<br>;;<br>3)<br># 如果选项为3，则调用函数firectl_service<br>firectl_service<br>break<br>;;<br>4)<br># 如果选项为4，则调用函数firectl_uninstall<br>firectl_uninstall<br>break<br>;;<br>*)<br>error<br>;;<br>esac<br>fi<br>done<br>&#125;<br>menu<br></code></pre></td></tr></table></figure><h1 id="firectl-main-sh-文件"><a href="#firectl-main-sh-文件" class="headerlink" title="firectl_main.sh 文件"></a>firectl_main.sh 文件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">死循环，确保程序能一直挂在后台执行</span><br>while true<br>do<br>    # 需要先cd进脚本所在文件夹才能用python3来执行python程序<br>    cd `dirname $0`<br>    python3 main.py<br>    # 执行完后重启防火墙<br>    systemctl restart firewalld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">每三秒执行一次</span><br>sleep 3<br>done<br></code></pre></td></tr></table></figure><h1 id="main-py-文件"><a href="#main-py-文件" class="headerlink" title="main.py 文件"></a>main.py 文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> configparser<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># 获取输入的参数，比如执行python3 main.py stop时，参数就为stop</span><br>args = sys.argv[<span class="hljs-number">1</span>:]<br><span class="hljs-comment"># 如果args为空，则置0，这样做的好处是使得arg[0]有值，防止后面读取args[0]的时候索引超出范围</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> args:<br>    args = [<span class="hljs-number">0</span>]<br><br><br><span class="hljs-comment"># 预处理</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess</span>(<span class="hljs-params">ip_pool, open_time</span>):<br>    <span class="hljs-comment"># 用逗号分割多个地址</span><br>    ip_pool = re.split(<span class="hljs-string">&#x27;,&#x27;</span>, ip_pool)<br>    <span class="hljs-comment"># 用空格分割日期和时间</span><br>    open_time = re.split(<span class="hljs-string">&#x27; &#x27;</span>, open_time)<br>    <span class="hljs-comment"># 用-分割开始时间和结束时间</span><br>    tmp_time = re.split(<span class="hljs-string">&#x27;-&#x27;</span>, open_time[<span class="hljs-number">1</span>])<br>    <span class="hljs-comment"># 日期加时间，也就是start_time和stop_time都变成2022-08-08 14:00这样的格式</span><br>    start_time = open_time[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27; &#x27;</span> + tmp_time[<span class="hljs-number">0</span>]<br>    stop_time = open_time[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27; &#x27;</span> + tmp_time[<span class="hljs-number">1</span>]<br>    <span class="hljs-comment"># 将字符串类型转换为time类型，方便后面直接进行大小比较</span><br>    start_time = time.strptime(start_time, <span class="hljs-string">&quot;%Y-%m-%d %H:%M&quot;</span>)<br>    stop_time = time.strptime(stop_time, <span class="hljs-string">&quot;%Y-%m-%d %H:%M&quot;</span>)<br>    <span class="hljs-keyword">return</span> ip_pool, start_time, stop_time<br><br><br><span class="hljs-comment"># 读取配置文件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getConfig</span>(<span class="hljs-params">filename, section, option</span>):<br>    <span class="hljs-comment"># 获取当前程序所在的绝对路径</span><br>    proDir = os.path.split(os.path.realpath(__file__))[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># 将绝对路径和配置文件名加起来</span><br>    configPath = os.path.join(proDir, filename)<br><br>    <span class="hljs-comment"># 使用configparser库来读取配置文件内容</span><br>    conf = configparser.ConfigParser()<br><br>    conf.read(configPath, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>)<br>    config = conf.get(section, option)<br>    <span class="hljs-keyword">return</span> config<br><br><br><span class="hljs-comment"># 插入ip_pool</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">file_path, service, ip_pool</span>):<br>    <span class="hljs-comment"># data为读到的文本内容</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        data = file.read()<br>    <span class="hljs-comment"># 追加的形式打开文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;a+&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-comment"># 如果data内不含有地址池内的地址，则追加上去</span><br>        <span class="hljs-keyword">for</span> tmp <span class="hljs-keyword">in</span> ip_pool:<br>            str_tmp = <span class="hljs-string">&#x27;\n&#x27;</span> + service + <span class="hljs-string">&#x27;:&#x27;</span> + tmp<br>            <span class="hljs-keyword">if</span> str_tmp <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> data:<br>                f.write(<span class="hljs-string">&#x27;\n&#x27;</span> + service + <span class="hljs-string">&#x27;:&#x27;</span> + tmp)<br><br><br><span class="hljs-comment"># 删除ip_pool</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">file_path, service, ip_pool</span>):<br>    <span class="hljs-comment"># data为读到的文本内容</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read()<br>        <span class="hljs-comment"># 直接将data内 服务：地址（如 ftp（服务）：172.16.30.1（地址）） 的内容替换为空</span><br>        <span class="hljs-keyword">for</span> tmp <span class="hljs-keyword">in</span> ip_pool:<br>            data = data.replace(<span class="hljs-string">&#x27;\n&#x27;</span> + service + <span class="hljs-string">&#x27;:&#x27;</span> + tmp, <span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>            file.write(data)<br><br><br><span class="hljs-comment"># 执行函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">control</span>(<span class="hljs-params">ip_pool, start_time, stop_time, access, service</span>):<br>    <span class="hljs-comment"># 获取本地时间</span><br>    localtime = time.localtime()<br>    <span class="hljs-comment"># 如果在时间段内</span><br>    <span class="hljs-keyword">if</span> start_time &lt; localtime &lt; stop_time:<br>        <span class="hljs-comment"># 如果该地址池为允许访问的地址池，将地址池内容插入到/etc/hosts.allow中，并从/etc/hosts.deny中删掉</span><br>        <span class="hljs-keyword">if</span> access == <span class="hljs-string">&#x27;yes&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;地址池为允许池&#x27;</span>)<br>            insert(<span class="hljs-string">&#x27;/etc/hosts.allow&#x27;</span>, service, ip_pool)<br>            delete(<span class="hljs-string">&#x27;/etc/hosts.deny&#x27;</span>, service, ip_pool)<br>        <span class="hljs-comment"># 如果该地址池为拒绝访问的地址池，相反操作</span><br>        <span class="hljs-keyword">if</span> access == <span class="hljs-string">&#x27;no&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;地址池为拒绝池&#x27;</span>)<br>            insert(<span class="hljs-string">&#x27;/etc/hosts.deny&#x27;</span>, service, ip_pool)<br>            delete(<span class="hljs-string">&#x27;/etc/hosts.allow&#x27;</span>, service, ip_pool)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 时间段外为相反操作，就是时间段内允许的现在变成了拒绝，时间段内拒绝的现在变成了允许</span><br>        <span class="hljs-keyword">if</span> access == <span class="hljs-string">&#x27;yes&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;已超出时间段&#x27;</span>)<br>            insert(<span class="hljs-string">&#x27;/etc/hosts.deny&#x27;</span>, service, ip_pool)<br>            delete(<span class="hljs-string">&#x27;/etc/hosts.allow&#x27;</span>, service, ip_pool)<br>        <span class="hljs-keyword">if</span> access == <span class="hljs-string">&#x27;no&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;已超出时间段&#x27;</span>)<br>            insert(<span class="hljs-string">&#x27;/etc/hosts.allow&#x27;</span>, service, ip_pool)<br>            delete(<span class="hljs-string">&#x27;/etc/hosts.deny&#x27;</span>, service, ip_pool)<br><br><br><span class="hljs-comment"># 程序入口</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># configparser是读取配置文件的库</span><br>    cf = configparser.ConfigParser()<br>    cf.read(<span class="hljs-string">&quot;firectl.conf&quot;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>)<br>    <span class="hljs-comment"># service_list为配置文件内所有的session，也就是服务名的集合，便于拓展多个服务</span><br>    service_list = cf.sections()<br>    <span class="hljs-comment"># 遍历service_list</span><br>    <span class="hljs-keyword">for</span> tmpt <span class="hljs-keyword">in</span> service_list:<br>        <span class="hljs-comment"># 尝试读取配置文件内容</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># getConfig函数用于获取配置文件的内容，获取后用其转换为str字符串格式</span><br>            <span class="hljs-comment"># getConfig(配置文件名，服务名，字段值)</span><br>            open_time = <span class="hljs-built_in">str</span>(getConfig(<span class="hljs-string">&quot;firectl.conf&quot;</span>, tmpt, <span class="hljs-string">&#x27;open_time&#x27;</span>))<br>            ip_pool = <span class="hljs-built_in">str</span>(getConfig(<span class="hljs-string">&quot;firectl.conf&quot;</span>, tmpt, <span class="hljs-string">&#x27;ip_pool&#x27;</span>))<br>            access = <span class="hljs-built_in">str</span>(getConfig(<span class="hljs-string">&quot;firectl.conf&quot;</span>, tmpt, <span class="hljs-string">&#x27;access&#x27;</span>))<br>            <span class="hljs-comment"># 预处理</span><br>            ip_pool, start_time, stop_time = preprocess(ip_pool, open_time)<br>            <span class="hljs-comment"># python3 main.py stop 这个命令是服务停止后执行的命令，它可以恢复文件的状态，也就是删掉allow和deny文件里面的 服务：地址</span><br>            <span class="hljs-keyword">if</span> args[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;stop&#x27;</span>:<br>                <span class="hljs-comment"># 恢复allow和deny文件的状态</span><br>                delete(<span class="hljs-string">&#x27;/etc/hosts.allow&#x27;</span>, tmpt, ip_pool)<br>                delete(<span class="hljs-string">&#x27;/etc/hosts.deny&#x27;</span>, tmpt, ip_pool)<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-comment"># 如果没有执行stop命令，则执行control函数</span><br>            control(ip_pool, start_time, stop_time, access, tmpt)<br>        <span class="hljs-comment"># 读取失败则抛出错误信息</span><br>        <span class="hljs-keyword">except</span> configparser.NoOptionError:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请检查配置文件格式是否正确&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Shell</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写int数组快排</title>
    <link href="/2022/10/30/C++/%E6%89%8B%E5%86%99int%E6%95%B0%E7%BB%84%E5%BF%AB%E6%8E%92/"/>
    <url>/2022/10/30/C++/%E6%89%8B%E5%86%99int%E6%95%B0%E7%BB%84%E5%BF%AB%E6%8E%92/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//手写int数组快排函数 </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> *a,<span class="hljs-type">int</span> *b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_sqrt</span><span class="hljs-params">(<span class="hljs-type">int</span> list[],<span class="hljs-type">const</span> <span class="hljs-type">int</span> length,<span class="hljs-type">bool</span> (*cmp)(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>))</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> list[],<span class="hljs-type">const</span> <span class="hljs-type">int</span> length)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span> <span class="hljs-title">list_length</span><span class="hljs-params">(<span class="hljs-number">6</span>)</span></span>;<br><span class="hljs-type">int</span> a[list_length]&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-built_in">my_sqrt</span>(a,list_length,cmp);<br><span class="hljs-built_in">show</span>(a,list_length);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//比较函数 </span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-keyword">return</span> a&lt;b;<br>&#125;<br><span class="hljs-comment">//交换函数 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> *a,<span class="hljs-type">int</span> *b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> tmpt;<br>tmpt=*a;<br>*a=*b;<br>*b=tmpt;<br>&#125;<br><span class="hljs-comment">//快排函数 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_sqrt</span><span class="hljs-params">(<span class="hljs-type">int</span> list[],<span class="hljs-type">int</span> length,<span class="hljs-type">bool</span> (*cmp)(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>))</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">l</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">tmpt</span><span class="hljs-params">(list[l])</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">right</span><span class="hljs-params">(length<span class="hljs-number">-1</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">r</span><span class="hljs-params">(length<span class="hljs-number">-1</span>)</span></span>;<br><span class="hljs-keyword">if</span>(l&gt;=r)<span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">while</span>(l!=r)<br>&#123;<br><span class="hljs-comment">//找第一个小于tmpt ，即当tmpt小于list[r]时则循环 </span><br><span class="hljs-keyword">while</span>(l&lt;r&amp;&amp;(((*cmp)(tmpt,list[r]))||list[r]==tmpt))<br>&#123;<br>r--;<br>&#125;<br><span class="hljs-comment">//找第一个大于tmpt ，即当list[l]小于tmpt时则循环 </span><br><span class="hljs-keyword">while</span>(l&lt;r&amp;&amp;(((*cmp)(list[l],tmpt))||list[l]==tmpt))<br>&#123;<br>l++;<br>&#125;<br><span class="hljs-comment">//把右边小于tmpt的和左边大于tmpt的交换 </span><br><span class="hljs-keyword">if</span>(l&lt;r)<span class="hljs-built_in">swap</span>(list+l,list+r);<br>&#125;<br><span class="hljs-comment">//交换list[l]和基准tmpt </span><br>*list=list[l];<br>list[l]=tmpt;<br><span class="hljs-comment">//递归 </span><br><span class="hljs-built_in">my_sqrt</span>(list,l+<span class="hljs-number">1</span>,cmp);<br><span class="hljs-built_in">my_sqrt</span>(list+l+<span class="hljs-number">1</span>,right-l,cmp);<br>&#125;<br><span class="hljs-comment">//展示函数 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> list[],<span class="hljs-type">const</span> <span class="hljs-type">int</span> length)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)<br>&#123;<br>cout&lt;&lt;list[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//手写数组快排函数 </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(T a,T b)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(T *a,T *b)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_sqrt</span><span class="hljs-params">(T list[],<span class="hljs-type">const</span> <span class="hljs-type">int</span> length,<span class="hljs-type">bool</span> (*cmp)(T,T))</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> T list[],<span class="hljs-type">const</span> <span class="hljs-type">int</span> length)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span> <span class="hljs-title">list_length</span><span class="hljs-params">(<span class="hljs-number">6</span>)</span></span>;<br><span class="hljs-type">int</span> a[list_length]&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">float</span> b[list_length]&#123;<span class="hljs-number">5.0</span>,<span class="hljs-number">7.0</span>,<span class="hljs-number">4.0</span>,<span class="hljs-number">3.3</span>,<span class="hljs-number">3.2</span>,<span class="hljs-number">9.9</span>&#125;;<br><span class="hljs-built_in">my_sqrt</span>(a,list_length,cmp);<br><span class="hljs-built_in">show</span>(a,list_length);<br><span class="hljs-built_in">my_sqrt</span>(b,list_length,cmp);<br><span class="hljs-built_in">show</span>(b,list_length);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//比较函数 </span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(T a,T b)</span></span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-keyword">return</span> a&lt;b;<br>&#125;<br><span class="hljs-comment">//交换函数 </span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(T *a,T *b)</span></span><br><span class="hljs-function"></span>&#123;<br>T tmpt;<br>tmpt=*a;<br>*a=*b;<br>*b=tmpt;<br>&#125;<br><span class="hljs-comment">//快排函数 </span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_sqrt</span><span class="hljs-params">(T list[],<span class="hljs-type">int</span> length,<span class="hljs-type">bool</span> (*cmp)(T,T))</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">l</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-function">T <span class="hljs-title">tmpt</span><span class="hljs-params">(list[l])</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">right</span><span class="hljs-params">(length<span class="hljs-number">-1</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">r</span><span class="hljs-params">(length<span class="hljs-number">-1</span>)</span></span>;<br><span class="hljs-keyword">if</span>(l&gt;=r)<span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">while</span>(l!=r)<br>&#123;<br><span class="hljs-comment">//找第一个小于tmpt ，即当tmpt小于list[r]时则循环 </span><br><span class="hljs-keyword">while</span>(l&lt;r&amp;&amp;(((*cmp)(tmpt,list[r]))||list[r]==tmpt))<br>&#123;<br>r--;<br>&#125;<br><span class="hljs-comment">//找第一个大于tmpt ，即当list[l]小于tmpt时则循环 </span><br><span class="hljs-keyword">while</span>(l&lt;r&amp;&amp;(((*cmp)(list[l],tmpt))||list[l]==tmpt))<br>&#123;<br>l++;<br>&#125;<br><span class="hljs-comment">//把右边小于tmpt的和左边大于tmpt的交换 </span><br><span class="hljs-keyword">if</span>(l&lt;r)<span class="hljs-built_in">swap</span>(list+l,list+r);<br>&#125;<br><span class="hljs-comment">//交换list[l]和基准tmpt </span><br>*list=list[l];<br>list[l]=tmpt;<br><span class="hljs-comment">//递归 </span><br><span class="hljs-built_in">my_sqrt</span>(list,l+<span class="hljs-number">1</span>,cmp);<br><span class="hljs-built_in">my_sqrt</span>(list+l+<span class="hljs-number">1</span>,right-l,cmp);<br>&#125;<br><span class="hljs-comment">//展示函数 </span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> T list[],<span class="hljs-type">const</span> <span class="hljs-type">int</span> length)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)<br>&#123;<br>cout&lt;&lt;list[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>array的两种函数传参方式比较</title>
    <link href="/2022/10/29/C++/array%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83/"/>
    <url>/2022/10/29/C++/array%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span> <span class="hljs-title">array_size</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fill</span><span class="hljs-params">(array&lt;<span class="hljs-type">int</span>,array_size&gt; *a)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(array&lt;<span class="hljs-type">int</span>,array_size&gt; a)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show2</span><span class="hljs-params">(<span class="hljs-type">const</span> array&lt;<span class="hljs-type">int</span>,array_size&gt; *a)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>array&lt;<span class="hljs-type">int</span>,array_size&gt; a;<br><span class="hljs-built_in">fill</span>(&amp;a);<br><span class="hljs-built_in">show</span>(a);<br><span class="hljs-built_in">show2</span>(&amp;a);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fill</span><span class="hljs-params">(array&lt;<span class="hljs-type">int</span>,array_size&gt; *a)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;array_size;i++)<br>&#123;<br>(*a)[i]=i;<br>&#125;<br>&#125; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(array&lt;<span class="hljs-type">int</span>,array_size&gt; a)</span><span class="hljs-comment">//该函数将传入的array对象的复制了一份副本，这样会导致效率很低 </span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;array_size;i++)<br>&#123;<br>cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show2</span><span class="hljs-params">(<span class="hljs-type">const</span> array&lt;<span class="hljs-type">int</span>,array_size&gt; *a)</span><span class="hljs-comment">//这种方法则效率比较高，因为传入的是一个指针 </span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;array_size;i++)<br>&#123;<br>cout&lt;&lt;(*a)[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>检测输入了非法数据的例子</title>
    <link href="/2022/10/29/C++/%E6%A3%80%E6%B5%8B%E8%BE%93%E5%85%A5%E4%BA%86%E9%9D%9E%E6%B3%95%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BE%8B%E5%AD%90/"/>
    <url>/2022/10/29/C++/%E6%A3%80%E6%B5%8B%E8%BE%93%E5%85%A5%E4%BA%86%E9%9D%9E%E6%B3%95%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BE%8B%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fill_array</span><span class="hljs-params">(<span class="hljs-type">double</span> ar[],<span class="hljs-type">int</span> limit)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">double</span> array[<span class="hljs-number">25</span>];<br>cout&lt;&lt;<span class="hljs-built_in">fill_array</span>(array,<span class="hljs-number">25</span>);<br>&#125; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fill_array</span><span class="hljs-params">(<span class="hljs-type">double</span> ar[],<span class="hljs-type">int</span> limit)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">double</span> temp;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;limit;i++)<br>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Enter value #&quot;</span>&lt;&lt;(i+<span class="hljs-number">1</span>)&lt;&lt;<span class="hljs-string">&quot;:&quot;</span>;<br>cin&gt;&gt;temp;<br><span class="hljs-keyword">if</span>(!cin)<br>&#123;<br>cin.<span class="hljs-built_in">clear</span>();<span class="hljs-comment">//清除输入标志位 </span><br><span class="hljs-keyword">while</span>(cin.<span class="hljs-built_in">get</span>()!=<span class="hljs-string">&#x27;\n&#x27;</span>)<span class="hljs-comment">//清除输入队列内容 </span><br><span class="hljs-keyword">continue</span>;<br>cout&lt;&lt;<span class="hljs-string">&quot;Bad input; input process terminated. \n&quot;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(temp&lt;<span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br>ar[i]=temp;<br>&#125; <br><span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整理文件夹</title>
    <link href="/2022/10/27/Python/%E6%95%B4%E7%90%86%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <url>/2022/10/27/Python/%E6%95%B4%E7%90%86%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>写这个脚本的初衷是学校有一个专业实习，但由于疫情原因，我们是线上上课，老师课后会把视频发在QQ群上面，当我想对这些视频和其他文件进行整理时，非常不乐意，为了一劳永逸，我便写下这个脚本，以便于以后应付这类情况。</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 整理文件夹的工具</span><br><span class="hljs-comment"># 1.遍历文件夹和子文件夹（有无递归）</span><br><span class="hljs-comment"># 2.按日、月、年进行整理（传入枚举型变量）</span><br><span class="hljs-comment"># 3.起始时间到结束时间</span><br><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum<br><br><br><span class="hljs-comment"># 枚举类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Accuracy</span>(<span class="hljs-title class_ inherited__">Enum</span>):<br>    year = <span class="hljs-number">0</span><br>    mouth = <span class="hljs-number">1</span><br>    day = <span class="hljs-number">2</span><br>    hour = <span class="hljs-number">3</span><br>    minute = <span class="hljs-number">4</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IsRecursive</span>(<span class="hljs-title class_ inherited__">Enum</span>):<br>    no = <span class="hljs-number">0</span><br>    yes = <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">in_timerange</span>(<span class="hljs-params">file_path, start_time, end_time</span>):<br>    <span class="hljs-comment"># 切割日期</span><br>    start_time, end_time = re.split(<span class="hljs-string">&#x27;-&#x27;</span>, start_time), re.split(<span class="hljs-string">&#x27;-&#x27;</span>, end_time)<br>    <span class="hljs-comment"># 转换类型</span><br>    start_time, end_time = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, start_time)), <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, end_time))<br>    <span class="hljs-comment"># 列表拆解传参（拆包）</span><br>    start_time, end_time = datetime(*start_time), datetime(*end_time)<br>    <span class="hljs-comment"># 转换类型  这里使用了按访问时间来进行分类，getctime就是创建时间，getmtime就是修改时间</span><br>    file_time = time.localtime(os.path.getmtime(file_path))<br>    file_time = datetime.fromtimestamp(time.mktime(file_time))<br>    <span class="hljs-comment"># 作比较</span><br>    <span class="hljs-keyword">if</span> start_time &lt; file_time &lt; end_time:<br>        <span class="hljs-keyword">return</span> file_time<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sort_dir</span>(<span class="hljs-params">dir_path, start_time, end_time, accuracy, isrecursive=IsRecursive.no, save_path=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    @param dir_path: 目录路径</span><br><span class="hljs-string">    @param start_time: 起始时间</span><br><span class="hljs-string">    @param end_time: 结束时间</span><br><span class="hljs-string">    @param accuracy: 精度，也就是分类精确到年月日</span><br><span class="hljs-string">    @param isrecursive: 是否进行递归</span><br><span class="hljs-string">    @param save_path:存储路径，一般会和递归搭配使用</span><br><span class="hljs-string">    @return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 如果文件夹路径不是以&#x27;\&#x27;结尾，则补上</span><br>    <span class="hljs-keyword">if</span> dir_path[-<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;\\&#x27;</span>:<br>        dir_path += <span class="hljs-string">&#x27;\\&#x27;</span><br>    <span class="hljs-comment"># 如果存储路径没有指定，就默认为同级目录,选用递归时一般会指定存储路径</span><br>    <span class="hljs-keyword">if</span> save_path <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        save_path = dir_path<br>    <span class="hljs-keyword">if</span> save_path[-<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;\\&#x27;</span>:<br>        save_path += <span class="hljs-string">&#x27;\\&#x27;</span><br>    <span class="hljs-comment"># dir_list：目录路径</span><br>    dir_list = os.listdir(dir_path)<br>    <span class="hljs-comment"># 遍历目录</span><br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> dir_list:<br>        <span class="hljs-comment"># file_path：文件路径</span><br>        file_path = dir_path + file.title()<br>        <span class="hljs-comment"># 如果选择递归且为文件夹，则进行递归操作</span><br>        <span class="hljs-keyword">if</span> isrecursive:<br>            <span class="hljs-keyword">if</span> os.path.isdir(file_path):<br>                sort_dir(file_path, start_time, end_time, accuracy, isrecursive=IsRecursive.no, save_path=save_path)<br>        <span class="hljs-comment"># tmp：在日期区间内则为创建时间，否则则为0</span><br>        tmp = in_timerange(file_path, start_time, end_time)<br>        <span class="hljs-comment"># 如果tmp在日期区间内，则要移动它到指定文件夹</span><br>        <span class="hljs-keyword">if</span> tmp:<br>            <span class="hljs-comment"># 分割日期字符串，便于操作</span><br>            tmp = re.split(<span class="hljs-string">&#x27;-| |,|:&#x27;</span>, <span class="hljs-built_in">str</span>(tmp))<br>            <span class="hljs-comment"># s：要创建的文件夹名字 年-月-日</span><br>            s = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-comment"># j：为了下面创建的文件夹不要多出一个&#x27;-&#x27;</span><br>            j = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tmp[<span class="hljs-number">0</span>:accuracy.value + <span class="hljs-number">1</span>]:<br>                s += i<br>                <span class="hljs-keyword">if</span> j != accuracy.value:<br>                    s += <span class="hljs-string">&#x27;-&#x27;</span><br>                j += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># make_dir：创建的文件夹路径</span><br>            make_dir = save_path + s<br>            <span class="hljs-comment"># 文件夹不存在则创建</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(make_dir):<br>                os.mkdir(make_dir)<br>            <span class="hljs-comment"># 移动文件到指定文件夹</span><br>            shutil.move(file_path, make_dir)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    sort_dir(<span class="hljs-string">&quot;E:\\2022&quot;</span>, <span class="hljs-string">&quot;2020-10-10&quot;</span>, <span class="hljs-string">&quot;2022-12-30&quot;</span>, Accuracy.day, IsRecursive.yes,save_path=<span class="hljs-string">&quot;E:\\2022&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>存储器扩展</title>
    <link href="/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/"/>
    <url>/2022/05/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h2 id="存储元和存储单元"><a href="#存储元和存储单元" class="headerlink" title="存储元和存储单元"></a>存储元和存储单元</h2><p>在讲位扩展和字扩展之前，我们先来说一下存储元和存储单元。</p><h3 id="存储元"><a href="#存储元" class="headerlink" title="存储元"></a>存储元</h3><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-02-43-53/image-20220502161450795.png" alt="-20220502161450795"></p><p>百度百科里介绍到，任何具有两个稳定状态的物理器件都可以用来做存储元。也就是说，既然存储元只有两种状态，我们就可以把它相当于一位二进制数（只有0或1两种状态）。如下图，我们用一个小箱子来表示一个存储单元，它可以输出0或1。</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-02-43-53/image-20220502163628268.png" alt="image-20220502163628268"></p><h3 id="存储单元"><a href="#存储单元" class="headerlink" title="存储单元"></a>存储单元</h3><p>我们买来了四个存储元，将它们输出到一个4位的寄存器上。我们称这样一组输出到同一寄存器上（也就是连接到同一寄存器上）的存储元为一个==存储单元==。而一个存储单元有多少个存储元，我们就说==字长==是多少位。而存储单元输出的一个数据（本例中为一个4位的数据1011），我们称之为==存储字==。而将存储元连接到寄存器MDR上的蓝线我们称之为==数据线==，一个存储单元有多少个存储元就有多少根数据线。</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-02-43-53/image-20220502170228183.png" alt="image-20220502170228183"></p><p>位扩展和字扩展里面的位和字就是这么一回事，要理解好了位和字才能学好后面的位扩展和位扩展。</p><h3 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h3><p>为了存储4个4位的数据，我们买来了4个4位存储单元，或者说买来了16个存储元，然后把它们都输出到MDR上，如下图。</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-02-43-53/image-20220502170244930.png" alt="image-20220502170244930"></p><p>然后我们会发现一个问题，就是MDR寄存器它不知道要听一个存储单元（或者说哪一组存储元）的，第一个存储单元想要输出1011，第二个存储单元想要输出1010，那这种情况要怎么办？答案其实也很简单，只能存4位数据（实际上MDR可以存8位数据，这里为了方便我就用4位来举例）的MDR不可能同时接收多个4位数据。所以我们只能选择接收其中一个存储单元的数据。如下图，我们增加了红色的线来选择要将哪个存储单元的数据输出到MDR上，只有当红色线提供的数据为1时，对应的存储单元数据才会被输出，所以这4根红色线中只能同时有一根线为1。图中只有第一根红线为1，所以只有第一个存储单元的数据会被输出到MDR上。</p><p>然后我们又买来了一个译码器，用来把1或0送到红色线上。输入译码器的紫色线我们称之为==地址线==。如果紫色线为00，就是只有从上往下数第4根红色线为1；如果紫色线为01，第3根红色线为1；如果紫色线是10，则只有第2根红色线为1；如果紫色线是11，则只有第1根红色线为1。我们可以知道，一个地址（图中2根地址线组成的数字00,01那些）就对应一根红色线为1。一个地址是每一位都只能为0或1，所以有2根地址线就有2×2共4种状态，有3根地址线就有2×2×2共8种状态。也就是说，有多少根地址线，输出的地址就有2的多少次方种状态，就可以对应多少个存储单元。</p><p>总容量=存储单元个数（2^地址线根数） * 存储字长（数据线根数）</p><p>如下面要讲的1K×8bit的存储器，就是2的10次方个存储单元，10根地址线，存储字长为8bit，数据线有8根。</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-02-43-53/image-20220502171857968.png" alt="image-20220502171857968"></p><h2 id="位扩展和字扩展"><a href="#位扩展和字扩展" class="headerlink" title="位扩展和字扩展"></a>位扩展和字扩展</h2><p>进入本文正题，位扩展和字扩展。</p><h3 id="位扩展（增加存储字长）"><a href="#位扩展（增加存储字长）" class="headerlink" title="位扩展（增加存储字长）"></a>位扩展（增加存储字长）</h3><p>问题：用（2）片 1K×4位 存储芯片组成 1K×8位的存储器（10根地址线，8根数据线）</p><p>由于增加的是存储字长，也是就是说增加一个字的位数。我们可以这样设计：拿一片1K×4位 存储芯片作为高4位，再拿一片1K×4位 存储芯片作为低4位，这样我们的存储字长就从4位增加到了8位。</p><p>D7~D0为8根数据线，对应8位数据。我们先将两个1K×4位的存储芯片分别接到数据线的高四位和低四位。</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-02-43-53/image-20220502175558181.png" alt="image-20220502175558181"></p><p>然后我们将两个1K×4位的存储芯片接到同样的地址线上面，表示他们同时工作。</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-02-43-53/image-20220502180336275-16516428803801.png" alt="image-20220502180336275"></p><p>然后我们再将两个1K×4位的存储芯片接到同样的片选线CS和读写控制线WE上，同样表示他们同时进行工作。</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-02-43-53/image-20220502181545575.png" alt="image-20220502181545575"></p><h3 id="字扩展-增加存储字的数量"><a href="#字扩展-增加存储字的数量" class="headerlink" title="字扩展(增加存储字的数量)"></a>字扩展(增加存储字的数量)</h3><p>问题：用（2）片 1K×8位存储芯片组成2K×8位的存储器。（11根地址线，8根数据线）</p><p>由于增加的是存储字的数量，也是就是说增加存储单元的数量。我们可以这样设计：1片1K×8位存储芯片有2^10个存储单元，一个2K×8位的存储器的2^11个存储单元，所以我们直接拿两片1K×8位存储芯片就可以达到目的，功德圆满。</p><p> 我们先把两片1K×8位存储芯片接到同样的地址线上，但由于这两片芯片不能同时工作（一个地址怎么能对应多户人家（数据）呢），我们得再增加一位地址，来表示是使用了哪一片1K×8位的存储芯片，这也是片选线的意义所在（如下下图所示）。</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-02-43-53/image-20220502182512174.png" alt="image-20220502182512174"></p><p>如下图，我们增加了一位地址A10，并将两片1K×8位存储芯片的片选线接到上面，然后增加了一个取反器。这样一来第一个1K×8位存储芯片的地址为0xxxxxxxxxx，而第二个1K×8位存储芯片的地址为1xxxxxxxxxx。</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-02-43-53/image-20220502183403715.png" alt="image-20220502183403715"></p><p>然后将数据线和读写控制线都给接上</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-02-43-53/image-20220502184054987.png" alt="image-20220502184054987"></p><h3 id="字位同时扩展"><a href="#字位同时扩展" class="headerlink" title="字位同时扩展"></a>字位同时扩展</h3><p>问题：用（8）片 1K×4位的存储芯片组成4K×8位的存储器。（12根地址线，8根数据线）</p><p>我们先进行位扩展，也就是用2片1K×4位的存储芯片将位数扩展到8位。然后进行字扩展，我们可以把前面2片1K×4位的存储芯片看为1组1K×8位的存储芯片，然后我们需要4组1K×8位的存储芯片才能扩展为4K×8位的存储器，也就是4×2片1K×4位的存储芯片。</p><p>我们先将每两片1K×4位的存储芯片作为1组接到数据线上，一共4组。</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-02-43-53/image-20220502185536432.png" alt="image-20220502185536432"></p><p>再将这四组存储芯片接到同样的地址线上，但由于这四组存储芯片不能同时工作，我们需要增加地址，来表示选择哪一组存储芯片（下下图）。</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-02-43-53/image-20220502190534482.png" alt="image-20220502190534482"></p><p>我们为这四组存储芯片都加了片选线（如下图），同一组芯片是同时工作的，所以他们需要接收到同样的片选信号。</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-02-43-53/image-20220502191047467.png" alt="image-20220502191047467"></p><p>再将读写控制线接上，功德圆满。</p><p><img src="https://wodiao.oss-cn-guangzhou.aliyuncs.com/img/2022-12-18-02-43-53/image-20220502191404221.png" alt="image-20220502191404221"></p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
